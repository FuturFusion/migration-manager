// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package migration_test

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/google/uuid"
)

// Ensure, that QueueServiceMock does implement migration.QueueService.
// If this is not the case, regenerate this file with moq.
var _ migration.QueueService = &QueueServiceMock{}

// QueueServiceMock is a mock implementation of migration.QueueService.
//
//	func TestSomethingThatUsesQueueService(t *testing.T) {
//
//		// make and configure a mocked migration.QueueService
//		mockedQueueService := &QueueServiceMock{
//			GetAllFunc: func(ctx context.Context) (migration.QueueEntries, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByInstanceIDFunc: func(ctx context.Context, id uuid.UUID) (migration.QueueEntry, error) {
//				panic("mock out the GetByInstanceID method")
//			},
//			NewWorkerCommandByInstanceUUIDFunc: func(ctx context.Context, id uuid.UUID) (migration.WorkerCommand, error) {
//				panic("mock out the NewWorkerCommandByInstanceUUID method")
//			},
//		}
//
//		// use mockedQueueService in code that requires migration.QueueService
//		// and then make assertions.
//
//	}
type QueueServiceMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.QueueEntries, error)

	// GetByInstanceIDFunc mocks the GetByInstanceID method.
	GetByInstanceIDFunc func(ctx context.Context, id uuid.UUID) (migration.QueueEntry, error)

	// NewWorkerCommandByInstanceUUIDFunc mocks the NewWorkerCommandByInstanceUUID method.
	NewWorkerCommandByInstanceUUIDFunc func(ctx context.Context, id uuid.UUID) (migration.WorkerCommand, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByInstanceID holds details about calls to the GetByInstanceID method.
		GetByInstanceID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// NewWorkerCommandByInstanceUUID holds details about calls to the NewWorkerCommandByInstanceUUID method.
		NewWorkerCommandByInstanceUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
	}
	lockGetAll                         sync.RWMutex
	lockGetByInstanceID                sync.RWMutex
	lockNewWorkerCommandByInstanceUUID sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *QueueServiceMock) GetAll(ctx context.Context) (migration.QueueEntries, error) {
	if mock.GetAllFunc == nil {
		panic("QueueServiceMock.GetAllFunc: method is nil but QueueService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedQueueService.GetAllCalls())
func (mock *QueueServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByInstanceID calls GetByInstanceIDFunc.
func (mock *QueueServiceMock) GetByInstanceID(ctx context.Context, id uuid.UUID) (migration.QueueEntry, error) {
	if mock.GetByInstanceIDFunc == nil {
		panic("QueueServiceMock.GetByInstanceIDFunc: method is nil but QueueService.GetByInstanceID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByInstanceID.Lock()
	mock.calls.GetByInstanceID = append(mock.calls.GetByInstanceID, callInfo)
	mock.lockGetByInstanceID.Unlock()
	return mock.GetByInstanceIDFunc(ctx, id)
}

// GetByInstanceIDCalls gets all the calls that were made to GetByInstanceID.
// Check the length with:
//
//	len(mockedQueueService.GetByInstanceIDCalls())
func (mock *QueueServiceMock) GetByInstanceIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByInstanceID.RLock()
	calls = mock.calls.GetByInstanceID
	mock.lockGetByInstanceID.RUnlock()
	return calls
}

// NewWorkerCommandByInstanceUUID calls NewWorkerCommandByInstanceUUIDFunc.
func (mock *QueueServiceMock) NewWorkerCommandByInstanceUUID(ctx context.Context, id uuid.UUID) (migration.WorkerCommand, error) {
	if mock.NewWorkerCommandByInstanceUUIDFunc == nil {
		panic("QueueServiceMock.NewWorkerCommandByInstanceUUIDFunc: method is nil but QueueService.NewWorkerCommandByInstanceUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockNewWorkerCommandByInstanceUUID.Lock()
	mock.calls.NewWorkerCommandByInstanceUUID = append(mock.calls.NewWorkerCommandByInstanceUUID, callInfo)
	mock.lockNewWorkerCommandByInstanceUUID.Unlock()
	return mock.NewWorkerCommandByInstanceUUIDFunc(ctx, id)
}

// NewWorkerCommandByInstanceUUIDCalls gets all the calls that were made to NewWorkerCommandByInstanceUUID.
// Check the length with:
//
//	len(mockedQueueService.NewWorkerCommandByInstanceUUIDCalls())
func (mock *QueueServiceMock) NewWorkerCommandByInstanceUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockNewWorkerCommandByInstanceUUID.RLock()
	calls = mock.calls.NewWorkerCommandByInstanceUUID
	mock.lockNewWorkerCommandByInstanceUUID.RUnlock()
	return calls
}
