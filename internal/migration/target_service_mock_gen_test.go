// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package migration_test

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
)

// Ensure, that TargetServiceMock does implement migration.TargetService.
// If this is not the case, regenerate this file with moq.
var _ migration.TargetService = &TargetServiceMock{}

// TargetServiceMock is a mock implementation of migration.TargetService.
//
//	func TestSomethingThatUsesTargetService(t *testing.T) {
//
//		// make and configure a mocked migration.TargetService
//		mockedTargetService := &TargetServiceMock{
//			CreateFunc: func(ctx context.Context, target migration.Target) (migration.Target, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Targets, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllNamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (*migration.Target, error) {
//				panic("mock out the GetByName method")
//			},
//			GetCachedCreationsFunc: func(targetName string) int {
//				panic("mock out the GetCachedCreations method")
//			},
//			GetCachedImportsFunc: func(targetName string) int {
//				panic("mock out the GetCachedImports method")
//			},
//			InitCreateCacheFunc: func(initial map[string]int) error {
//				panic("mock out the InitCreateCache method")
//			},
//			InitImportCacheFunc: func(initial map[string]int) error {
//				panic("mock out the InitImportCache method")
//			},
//			RecordActiveImportFunc: func(targetName string)  {
//				panic("mock out the RecordActiveImport method")
//			},
//			RecordCreationFunc: func(targetName string)  {
//				panic("mock out the RecordCreation method")
//			},
//			RemoveActiveImportFunc: func(targetName string)  {
//				panic("mock out the RemoveActiveImport method")
//			},
//			RemoveCreationFunc: func(targetName string)  {
//				panic("mock out the RemoveCreation method")
//			},
//			UpdateFunc: func(ctx context.Context, name string, target *migration.Target) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedTargetService in code that requires migration.TargetService
//		// and then make assertions.
//
//	}
type TargetServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, target migration.Target) (migration.Target, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Targets, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context) ([]string, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (*migration.Target, error)

	// GetCachedCreationsFunc mocks the GetCachedCreations method.
	GetCachedCreationsFunc func(targetName string) int

	// GetCachedImportsFunc mocks the GetCachedImports method.
	GetCachedImportsFunc func(targetName string) int

	// InitCreateCacheFunc mocks the InitCreateCache method.
	InitCreateCacheFunc func(initial map[string]int) error

	// InitImportCacheFunc mocks the InitImportCache method.
	InitImportCacheFunc func(initial map[string]int) error

	// RecordActiveImportFunc mocks the RecordActiveImport method.
	RecordActiveImportFunc func(targetName string)

	// RecordCreationFunc mocks the RecordCreation method.
	RecordCreationFunc func(targetName string)

	// RemoveActiveImportFunc mocks the RemoveActiveImport method.
	RemoveActiveImportFunc func(targetName string)

	// RemoveCreationFunc mocks the RemoveCreation method.
	RemoveCreationFunc func(targetName string)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, name string, target *migration.Target) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target migration.Target
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetCachedCreations holds details about calls to the GetCachedCreations method.
		GetCachedCreations []struct {
			// TargetName is the targetName argument value.
			TargetName string
		}
		// GetCachedImports holds details about calls to the GetCachedImports method.
		GetCachedImports []struct {
			// TargetName is the targetName argument value.
			TargetName string
		}
		// InitCreateCache holds details about calls to the InitCreateCache method.
		InitCreateCache []struct {
			// Initial is the initial argument value.
			Initial map[string]int
		}
		// InitImportCache holds details about calls to the InitImportCache method.
		InitImportCache []struct {
			// Initial is the initial argument value.
			Initial map[string]int
		}
		// RecordActiveImport holds details about calls to the RecordActiveImport method.
		RecordActiveImport []struct {
			// TargetName is the targetName argument value.
			TargetName string
		}
		// RecordCreation holds details about calls to the RecordCreation method.
		RecordCreation []struct {
			// TargetName is the targetName argument value.
			TargetName string
		}
		// RemoveActiveImport holds details about calls to the RemoveActiveImport method.
		RemoveActiveImport []struct {
			// TargetName is the targetName argument value.
			TargetName string
		}
		// RemoveCreation holds details about calls to the RemoveCreation method.
		RemoveCreation []struct {
			// TargetName is the targetName argument value.
			TargetName string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Target is the target argument value.
			Target *migration.Target
		}
	}
	lockCreate             sync.RWMutex
	lockDeleteByName       sync.RWMutex
	lockGetAll             sync.RWMutex
	lockGetAllNames        sync.RWMutex
	lockGetByName          sync.RWMutex
	lockGetCachedCreations sync.RWMutex
	lockGetCachedImports   sync.RWMutex
	lockInitCreateCache    sync.RWMutex
	lockInitImportCache    sync.RWMutex
	lockRecordActiveImport sync.RWMutex
	lockRecordCreation     sync.RWMutex
	lockRemoveActiveImport sync.RWMutex
	lockRemoveCreation     sync.RWMutex
	lockUpdate             sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TargetServiceMock) Create(ctx context.Context, target migration.Target) (migration.Target, error) {
	if mock.CreateFunc == nil {
		panic("TargetServiceMock.CreateFunc: method is nil but TargetService.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Target migration.Target
	}{
		Ctx:    ctx,
		Target: target,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, target)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTargetService.CreateCalls())
func (mock *TargetServiceMock) CreateCalls() []struct {
	Ctx    context.Context
	Target migration.Target
} {
	var calls []struct {
		Ctx    context.Context
		Target migration.Target
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *TargetServiceMock) DeleteByName(ctx context.Context, name string) error {
	if mock.DeleteByNameFunc == nil {
		panic("TargetServiceMock.DeleteByNameFunc: method is nil but TargetService.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedTargetService.DeleteByNameCalls())
func (mock *TargetServiceMock) DeleteByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *TargetServiceMock) GetAll(ctx context.Context) (migration.Targets, error) {
	if mock.GetAllFunc == nil {
		panic("TargetServiceMock.GetAllFunc: method is nil but TargetService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedTargetService.GetAllCalls())
func (mock *TargetServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *TargetServiceMock) GetAllNames(ctx context.Context) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("TargetServiceMock.GetAllNamesFunc: method is nil but TargetService.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedTargetService.GetAllNamesCalls())
func (mock *TargetServiceMock) GetAllNamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *TargetServiceMock) GetByName(ctx context.Context, name string) (*migration.Target, error) {
	if mock.GetByNameFunc == nil {
		panic("TargetServiceMock.GetByNameFunc: method is nil but TargetService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedTargetService.GetByNameCalls())
func (mock *TargetServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// GetCachedCreations calls GetCachedCreationsFunc.
func (mock *TargetServiceMock) GetCachedCreations(targetName string) int {
	if mock.GetCachedCreationsFunc == nil {
		panic("TargetServiceMock.GetCachedCreationsFunc: method is nil but TargetService.GetCachedCreations was just called")
	}
	callInfo := struct {
		TargetName string
	}{
		TargetName: targetName,
	}
	mock.lockGetCachedCreations.Lock()
	mock.calls.GetCachedCreations = append(mock.calls.GetCachedCreations, callInfo)
	mock.lockGetCachedCreations.Unlock()
	return mock.GetCachedCreationsFunc(targetName)
}

// GetCachedCreationsCalls gets all the calls that were made to GetCachedCreations.
// Check the length with:
//
//	len(mockedTargetService.GetCachedCreationsCalls())
func (mock *TargetServiceMock) GetCachedCreationsCalls() []struct {
	TargetName string
} {
	var calls []struct {
		TargetName string
	}
	mock.lockGetCachedCreations.RLock()
	calls = mock.calls.GetCachedCreations
	mock.lockGetCachedCreations.RUnlock()
	return calls
}

// GetCachedImports calls GetCachedImportsFunc.
func (mock *TargetServiceMock) GetCachedImports(targetName string) int {
	if mock.GetCachedImportsFunc == nil {
		panic("TargetServiceMock.GetCachedImportsFunc: method is nil but TargetService.GetCachedImports was just called")
	}
	callInfo := struct {
		TargetName string
	}{
		TargetName: targetName,
	}
	mock.lockGetCachedImports.Lock()
	mock.calls.GetCachedImports = append(mock.calls.GetCachedImports, callInfo)
	mock.lockGetCachedImports.Unlock()
	return mock.GetCachedImportsFunc(targetName)
}

// GetCachedImportsCalls gets all the calls that were made to GetCachedImports.
// Check the length with:
//
//	len(mockedTargetService.GetCachedImportsCalls())
func (mock *TargetServiceMock) GetCachedImportsCalls() []struct {
	TargetName string
} {
	var calls []struct {
		TargetName string
	}
	mock.lockGetCachedImports.RLock()
	calls = mock.calls.GetCachedImports
	mock.lockGetCachedImports.RUnlock()
	return calls
}

// InitCreateCache calls InitCreateCacheFunc.
func (mock *TargetServiceMock) InitCreateCache(initial map[string]int) error {
	if mock.InitCreateCacheFunc == nil {
		panic("TargetServiceMock.InitCreateCacheFunc: method is nil but TargetService.InitCreateCache was just called")
	}
	callInfo := struct {
		Initial map[string]int
	}{
		Initial: initial,
	}
	mock.lockInitCreateCache.Lock()
	mock.calls.InitCreateCache = append(mock.calls.InitCreateCache, callInfo)
	mock.lockInitCreateCache.Unlock()
	return mock.InitCreateCacheFunc(initial)
}

// InitCreateCacheCalls gets all the calls that were made to InitCreateCache.
// Check the length with:
//
//	len(mockedTargetService.InitCreateCacheCalls())
func (mock *TargetServiceMock) InitCreateCacheCalls() []struct {
	Initial map[string]int
} {
	var calls []struct {
		Initial map[string]int
	}
	mock.lockInitCreateCache.RLock()
	calls = mock.calls.InitCreateCache
	mock.lockInitCreateCache.RUnlock()
	return calls
}

// InitImportCache calls InitImportCacheFunc.
func (mock *TargetServiceMock) InitImportCache(initial map[string]int) error {
	if mock.InitImportCacheFunc == nil {
		panic("TargetServiceMock.InitImportCacheFunc: method is nil but TargetService.InitImportCache was just called")
	}
	callInfo := struct {
		Initial map[string]int
	}{
		Initial: initial,
	}
	mock.lockInitImportCache.Lock()
	mock.calls.InitImportCache = append(mock.calls.InitImportCache, callInfo)
	mock.lockInitImportCache.Unlock()
	return mock.InitImportCacheFunc(initial)
}

// InitImportCacheCalls gets all the calls that were made to InitImportCache.
// Check the length with:
//
//	len(mockedTargetService.InitImportCacheCalls())
func (mock *TargetServiceMock) InitImportCacheCalls() []struct {
	Initial map[string]int
} {
	var calls []struct {
		Initial map[string]int
	}
	mock.lockInitImportCache.RLock()
	calls = mock.calls.InitImportCache
	mock.lockInitImportCache.RUnlock()
	return calls
}

// RecordActiveImport calls RecordActiveImportFunc.
func (mock *TargetServiceMock) RecordActiveImport(targetName string) {
	if mock.RecordActiveImportFunc == nil {
		panic("TargetServiceMock.RecordActiveImportFunc: method is nil but TargetService.RecordActiveImport was just called")
	}
	callInfo := struct {
		TargetName string
	}{
		TargetName: targetName,
	}
	mock.lockRecordActiveImport.Lock()
	mock.calls.RecordActiveImport = append(mock.calls.RecordActiveImport, callInfo)
	mock.lockRecordActiveImport.Unlock()
	mock.RecordActiveImportFunc(targetName)
}

// RecordActiveImportCalls gets all the calls that were made to RecordActiveImport.
// Check the length with:
//
//	len(mockedTargetService.RecordActiveImportCalls())
func (mock *TargetServiceMock) RecordActiveImportCalls() []struct {
	TargetName string
} {
	var calls []struct {
		TargetName string
	}
	mock.lockRecordActiveImport.RLock()
	calls = mock.calls.RecordActiveImport
	mock.lockRecordActiveImport.RUnlock()
	return calls
}

// RecordCreation calls RecordCreationFunc.
func (mock *TargetServiceMock) RecordCreation(targetName string) {
	if mock.RecordCreationFunc == nil {
		panic("TargetServiceMock.RecordCreationFunc: method is nil but TargetService.RecordCreation was just called")
	}
	callInfo := struct {
		TargetName string
	}{
		TargetName: targetName,
	}
	mock.lockRecordCreation.Lock()
	mock.calls.RecordCreation = append(mock.calls.RecordCreation, callInfo)
	mock.lockRecordCreation.Unlock()
	mock.RecordCreationFunc(targetName)
}

// RecordCreationCalls gets all the calls that were made to RecordCreation.
// Check the length with:
//
//	len(mockedTargetService.RecordCreationCalls())
func (mock *TargetServiceMock) RecordCreationCalls() []struct {
	TargetName string
} {
	var calls []struct {
		TargetName string
	}
	mock.lockRecordCreation.RLock()
	calls = mock.calls.RecordCreation
	mock.lockRecordCreation.RUnlock()
	return calls
}

// RemoveActiveImport calls RemoveActiveImportFunc.
func (mock *TargetServiceMock) RemoveActiveImport(targetName string) {
	if mock.RemoveActiveImportFunc == nil {
		panic("TargetServiceMock.RemoveActiveImportFunc: method is nil but TargetService.RemoveActiveImport was just called")
	}
	callInfo := struct {
		TargetName string
	}{
		TargetName: targetName,
	}
	mock.lockRemoveActiveImport.Lock()
	mock.calls.RemoveActiveImport = append(mock.calls.RemoveActiveImport, callInfo)
	mock.lockRemoveActiveImport.Unlock()
	mock.RemoveActiveImportFunc(targetName)
}

// RemoveActiveImportCalls gets all the calls that were made to RemoveActiveImport.
// Check the length with:
//
//	len(mockedTargetService.RemoveActiveImportCalls())
func (mock *TargetServiceMock) RemoveActiveImportCalls() []struct {
	TargetName string
} {
	var calls []struct {
		TargetName string
	}
	mock.lockRemoveActiveImport.RLock()
	calls = mock.calls.RemoveActiveImport
	mock.lockRemoveActiveImport.RUnlock()
	return calls
}

// RemoveCreation calls RemoveCreationFunc.
func (mock *TargetServiceMock) RemoveCreation(targetName string) {
	if mock.RemoveCreationFunc == nil {
		panic("TargetServiceMock.RemoveCreationFunc: method is nil but TargetService.RemoveCreation was just called")
	}
	callInfo := struct {
		TargetName string
	}{
		TargetName: targetName,
	}
	mock.lockRemoveCreation.Lock()
	mock.calls.RemoveCreation = append(mock.calls.RemoveCreation, callInfo)
	mock.lockRemoveCreation.Unlock()
	mock.RemoveCreationFunc(targetName)
}

// RemoveCreationCalls gets all the calls that were made to RemoveCreation.
// Check the length with:
//
//	len(mockedTargetService.RemoveCreationCalls())
func (mock *TargetServiceMock) RemoveCreationCalls() []struct {
	TargetName string
} {
	var calls []struct {
		TargetName string
	}
	mock.lockRemoveCreation.RLock()
	calls = mock.calls.RemoveCreation
	mock.lockRemoveCreation.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TargetServiceMock) Update(ctx context.Context, name string, target *migration.Target) error {
	if mock.UpdateFunc == nil {
		panic("TargetServiceMock.UpdateFunc: method is nil but TargetService.Update was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Name   string
		Target *migration.Target
	}{
		Ctx:    ctx,
		Name:   name,
		Target: target,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, name, target)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedTargetService.UpdateCalls())
func (mock *TargetServiceMock) UpdateCalls() []struct {
	Ctx    context.Context
	Name   string
	Target *migration.Target
} {
	var calls []struct {
		Ctx    context.Context
		Name   string
		Target *migration.Target
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
