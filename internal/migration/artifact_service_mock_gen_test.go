// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package migration_test

import (
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// Ensure, that ArtifactServiceMock does implement migration.ArtifactService.
// If this is not the case, regenerate this file with moq.
var _ migration.ArtifactService = &ArtifactServiceMock{}

// ArtifactServiceMock is a mock implementation of migration.ArtifactService.
//
//	func TestSomethingThatUsesArtifactService(t *testing.T) {
//
//		// make and configure a mocked migration.ArtifactService
//		mockedArtifactService := &ArtifactServiceMock{
//			CreateFunc: func(ctx context.Context, artifact migration.Artifact) (migration.Artifact, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByUUID method")
//			},
//			DeleteFileFunc: func(id uuid.UUID, fileName string) error {
//				panic("mock out the DeleteFile method")
//			},
//			FileDirectoryFunc: func(id uuid.UUID) string {
//				panic("mock out the FileDirectory method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Artifacts, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByTypeFunc: func(ctx context.Context, artType api.ArtifactType) (migration.Artifacts, error) {
//				panic("mock out the GetAllByType method")
//			},
//			GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (*migration.Artifact, error) {
//				panic("mock out the GetByUUID method")
//			},
//			GetFilesFunc: func(id uuid.UUID) ([]string, error) {
//				panic("mock out the GetFiles method")
//			},
//			HasRequiredArtifactsForInstanceFunc: func(artifacts migration.Artifacts, inst migration.Instance) error {
//				panic("mock out the HasRequiredArtifactsForInstance method")
//			},
//			UpdateFunc: func(ctx context.Context, id uuid.UUID, artifact *migration.Artifact) error {
//				panic("mock out the Update method")
//			},
//			WriteFileFunc: func(id uuid.UUID, fileName string, reader io.ReadCloser) error {
//				panic("mock out the WriteFile method")
//			},
//		}
//
//		// use mockedArtifactService in code that requires migration.ArtifactService
//		// and then make assertions.
//
//	}
type ArtifactServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, artifact migration.Artifact) (migration.Artifact, error)

	// DeleteByUUIDFunc mocks the DeleteByUUID method.
	DeleteByUUIDFunc func(ctx context.Context, id uuid.UUID) error

	// DeleteFileFunc mocks the DeleteFile method.
	DeleteFileFunc func(id uuid.UUID, fileName string) error

	// FileDirectoryFunc mocks the FileDirectory method.
	FileDirectoryFunc func(id uuid.UUID) string

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Artifacts, error)

	// GetAllByTypeFunc mocks the GetAllByType method.
	GetAllByTypeFunc func(ctx context.Context, artType api.ArtifactType) (migration.Artifacts, error)

	// GetByUUIDFunc mocks the GetByUUID method.
	GetByUUIDFunc func(ctx context.Context, id uuid.UUID) (*migration.Artifact, error)

	// GetFilesFunc mocks the GetFiles method.
	GetFilesFunc func(id uuid.UUID) ([]string, error)

	// HasRequiredArtifactsForInstanceFunc mocks the HasRequiredArtifactsForInstance method.
	HasRequiredArtifactsForInstanceFunc func(artifacts migration.Artifacts, inst migration.Instance) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id uuid.UUID, artifact *migration.Artifact) error

	// WriteFileFunc mocks the WriteFile method.
	WriteFileFunc func(id uuid.UUID, fileName string, reader io.ReadCloser) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Artifact is the artifact argument value.
			Artifact migration.Artifact
		}
		// DeleteByUUID holds details about calls to the DeleteByUUID method.
		DeleteByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteFile holds details about calls to the DeleteFile method.
		DeleteFile []struct {
			// ID is the id argument value.
			ID uuid.UUID
			// FileName is the fileName argument value.
			FileName string
		}
		// FileDirectory holds details about calls to the FileDirectory method.
		FileDirectory []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByType holds details about calls to the GetAllByType method.
		GetAllByType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ArtType is the artType argument value.
			ArtType api.ArtifactType
		}
		// GetByUUID holds details about calls to the GetByUUID method.
		GetByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetFiles holds details about calls to the GetFiles method.
		GetFiles []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// HasRequiredArtifactsForInstance holds details about calls to the HasRequiredArtifactsForInstance method.
		HasRequiredArtifactsForInstance []struct {
			// Artifacts is the artifacts argument value.
			Artifacts migration.Artifacts
			// Inst is the inst argument value.
			Inst migration.Instance
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Artifact is the artifact argument value.
			Artifact *migration.Artifact
		}
		// WriteFile holds details about calls to the WriteFile method.
		WriteFile []struct {
			// ID is the id argument value.
			ID uuid.UUID
			// FileName is the fileName argument value.
			FileName string
			// Reader is the reader argument value.
			Reader io.ReadCloser
		}
	}
	lockCreate                          sync.RWMutex
	lockDeleteByUUID                    sync.RWMutex
	lockDeleteFile                      sync.RWMutex
	lockFileDirectory                   sync.RWMutex
	lockGetAll                          sync.RWMutex
	lockGetAllByType                    sync.RWMutex
	lockGetByUUID                       sync.RWMutex
	lockGetFiles                        sync.RWMutex
	lockHasRequiredArtifactsForInstance sync.RWMutex
	lockUpdate                          sync.RWMutex
	lockWriteFile                       sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ArtifactServiceMock) Create(ctx context.Context, artifact migration.Artifact) (migration.Artifact, error) {
	if mock.CreateFunc == nil {
		panic("ArtifactServiceMock.CreateFunc: method is nil but ArtifactService.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Artifact migration.Artifact
	}{
		Ctx:      ctx,
		Artifact: artifact,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, artifact)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedArtifactService.CreateCalls())
func (mock *ArtifactServiceMock) CreateCalls() []struct {
	Ctx      context.Context
	Artifact migration.Artifact
} {
	var calls []struct {
		Ctx      context.Context
		Artifact migration.Artifact
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByUUID calls DeleteByUUIDFunc.
func (mock *ArtifactServiceMock) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByUUIDFunc == nil {
		panic("ArtifactServiceMock.DeleteByUUIDFunc: method is nil but ArtifactService.DeleteByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByUUID.Lock()
	mock.calls.DeleteByUUID = append(mock.calls.DeleteByUUID, callInfo)
	mock.lockDeleteByUUID.Unlock()
	return mock.DeleteByUUIDFunc(ctx, id)
}

// DeleteByUUIDCalls gets all the calls that were made to DeleteByUUID.
// Check the length with:
//
//	len(mockedArtifactService.DeleteByUUIDCalls())
func (mock *ArtifactServiceMock) DeleteByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByUUID.RLock()
	calls = mock.calls.DeleteByUUID
	mock.lockDeleteByUUID.RUnlock()
	return calls
}

// DeleteFile calls DeleteFileFunc.
func (mock *ArtifactServiceMock) DeleteFile(id uuid.UUID, fileName string) error {
	if mock.DeleteFileFunc == nil {
		panic("ArtifactServiceMock.DeleteFileFunc: method is nil but ArtifactService.DeleteFile was just called")
	}
	callInfo := struct {
		ID       uuid.UUID
		FileName string
	}{
		ID:       id,
		FileName: fileName,
	}
	mock.lockDeleteFile.Lock()
	mock.calls.DeleteFile = append(mock.calls.DeleteFile, callInfo)
	mock.lockDeleteFile.Unlock()
	return mock.DeleteFileFunc(id, fileName)
}

// DeleteFileCalls gets all the calls that were made to DeleteFile.
// Check the length with:
//
//	len(mockedArtifactService.DeleteFileCalls())
func (mock *ArtifactServiceMock) DeleteFileCalls() []struct {
	ID       uuid.UUID
	FileName string
} {
	var calls []struct {
		ID       uuid.UUID
		FileName string
	}
	mock.lockDeleteFile.RLock()
	calls = mock.calls.DeleteFile
	mock.lockDeleteFile.RUnlock()
	return calls
}

// FileDirectory calls FileDirectoryFunc.
func (mock *ArtifactServiceMock) FileDirectory(id uuid.UUID) string {
	if mock.FileDirectoryFunc == nil {
		panic("ArtifactServiceMock.FileDirectoryFunc: method is nil but ArtifactService.FileDirectory was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockFileDirectory.Lock()
	mock.calls.FileDirectory = append(mock.calls.FileDirectory, callInfo)
	mock.lockFileDirectory.Unlock()
	return mock.FileDirectoryFunc(id)
}

// FileDirectoryCalls gets all the calls that were made to FileDirectory.
// Check the length with:
//
//	len(mockedArtifactService.FileDirectoryCalls())
func (mock *ArtifactServiceMock) FileDirectoryCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockFileDirectory.RLock()
	calls = mock.calls.FileDirectory
	mock.lockFileDirectory.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ArtifactServiceMock) GetAll(ctx context.Context) (migration.Artifacts, error) {
	if mock.GetAllFunc == nil {
		panic("ArtifactServiceMock.GetAllFunc: method is nil but ArtifactService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedArtifactService.GetAllCalls())
func (mock *ArtifactServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByType calls GetAllByTypeFunc.
func (mock *ArtifactServiceMock) GetAllByType(ctx context.Context, artType api.ArtifactType) (migration.Artifacts, error) {
	if mock.GetAllByTypeFunc == nil {
		panic("ArtifactServiceMock.GetAllByTypeFunc: method is nil but ArtifactService.GetAllByType was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ArtType api.ArtifactType
	}{
		Ctx:     ctx,
		ArtType: artType,
	}
	mock.lockGetAllByType.Lock()
	mock.calls.GetAllByType = append(mock.calls.GetAllByType, callInfo)
	mock.lockGetAllByType.Unlock()
	return mock.GetAllByTypeFunc(ctx, artType)
}

// GetAllByTypeCalls gets all the calls that were made to GetAllByType.
// Check the length with:
//
//	len(mockedArtifactService.GetAllByTypeCalls())
func (mock *ArtifactServiceMock) GetAllByTypeCalls() []struct {
	Ctx     context.Context
	ArtType api.ArtifactType
} {
	var calls []struct {
		Ctx     context.Context
		ArtType api.ArtifactType
	}
	mock.lockGetAllByType.RLock()
	calls = mock.calls.GetAllByType
	mock.lockGetAllByType.RUnlock()
	return calls
}

// GetByUUID calls GetByUUIDFunc.
func (mock *ArtifactServiceMock) GetByUUID(ctx context.Context, id uuid.UUID) (*migration.Artifact, error) {
	if mock.GetByUUIDFunc == nil {
		panic("ArtifactServiceMock.GetByUUIDFunc: method is nil but ArtifactService.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByUUID.Lock()
	mock.calls.GetByUUID = append(mock.calls.GetByUUID, callInfo)
	mock.lockGetByUUID.Unlock()
	return mock.GetByUUIDFunc(ctx, id)
}

// GetByUUIDCalls gets all the calls that were made to GetByUUID.
// Check the length with:
//
//	len(mockedArtifactService.GetByUUIDCalls())
func (mock *ArtifactServiceMock) GetByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByUUID.RLock()
	calls = mock.calls.GetByUUID
	mock.lockGetByUUID.RUnlock()
	return calls
}

// GetFiles calls GetFilesFunc.
func (mock *ArtifactServiceMock) GetFiles(id uuid.UUID) ([]string, error) {
	if mock.GetFilesFunc == nil {
		panic("ArtifactServiceMock.GetFilesFunc: method is nil but ArtifactService.GetFiles was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockGetFiles.Lock()
	mock.calls.GetFiles = append(mock.calls.GetFiles, callInfo)
	mock.lockGetFiles.Unlock()
	return mock.GetFilesFunc(id)
}

// GetFilesCalls gets all the calls that were made to GetFiles.
// Check the length with:
//
//	len(mockedArtifactService.GetFilesCalls())
func (mock *ArtifactServiceMock) GetFilesCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockGetFiles.RLock()
	calls = mock.calls.GetFiles
	mock.lockGetFiles.RUnlock()
	return calls
}

// HasRequiredArtifactsForInstance calls HasRequiredArtifactsForInstanceFunc.
func (mock *ArtifactServiceMock) HasRequiredArtifactsForInstance(artifacts migration.Artifacts, inst migration.Instance) error {
	if mock.HasRequiredArtifactsForInstanceFunc == nil {
		panic("ArtifactServiceMock.HasRequiredArtifactsForInstanceFunc: method is nil but ArtifactService.HasRequiredArtifactsForInstance was just called")
	}
	callInfo := struct {
		Artifacts migration.Artifacts
		Inst      migration.Instance
	}{
		Artifacts: artifacts,
		Inst:      inst,
	}
	mock.lockHasRequiredArtifactsForInstance.Lock()
	mock.calls.HasRequiredArtifactsForInstance = append(mock.calls.HasRequiredArtifactsForInstance, callInfo)
	mock.lockHasRequiredArtifactsForInstance.Unlock()
	return mock.HasRequiredArtifactsForInstanceFunc(artifacts, inst)
}

// HasRequiredArtifactsForInstanceCalls gets all the calls that were made to HasRequiredArtifactsForInstance.
// Check the length with:
//
//	len(mockedArtifactService.HasRequiredArtifactsForInstanceCalls())
func (mock *ArtifactServiceMock) HasRequiredArtifactsForInstanceCalls() []struct {
	Artifacts migration.Artifacts
	Inst      migration.Instance
} {
	var calls []struct {
		Artifacts migration.Artifacts
		Inst      migration.Instance
	}
	mock.lockHasRequiredArtifactsForInstance.RLock()
	calls = mock.calls.HasRequiredArtifactsForInstance
	mock.lockHasRequiredArtifactsForInstance.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ArtifactServiceMock) Update(ctx context.Context, id uuid.UUID, artifact *migration.Artifact) error {
	if mock.UpdateFunc == nil {
		panic("ArtifactServiceMock.UpdateFunc: method is nil but ArtifactService.Update was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ID       uuid.UUID
		Artifact *migration.Artifact
	}{
		Ctx:      ctx,
		ID:       id,
		Artifact: artifact,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, artifact)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedArtifactService.UpdateCalls())
func (mock *ArtifactServiceMock) UpdateCalls() []struct {
	Ctx      context.Context
	ID       uuid.UUID
	Artifact *migration.Artifact
} {
	var calls []struct {
		Ctx      context.Context
		ID       uuid.UUID
		Artifact *migration.Artifact
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// WriteFile calls WriteFileFunc.
func (mock *ArtifactServiceMock) WriteFile(id uuid.UUID, fileName string, reader io.ReadCloser) error {
	if mock.WriteFileFunc == nil {
		panic("ArtifactServiceMock.WriteFileFunc: method is nil but ArtifactService.WriteFile was just called")
	}
	callInfo := struct {
		ID       uuid.UUID
		FileName string
		Reader   io.ReadCloser
	}{
		ID:       id,
		FileName: fileName,
		Reader:   reader,
	}
	mock.lockWriteFile.Lock()
	mock.calls.WriteFile = append(mock.calls.WriteFile, callInfo)
	mock.lockWriteFile.Unlock()
	return mock.WriteFileFunc(id, fileName, reader)
}

// WriteFileCalls gets all the calls that were made to WriteFile.
// Check the length with:
//
//	len(mockedArtifactService.WriteFileCalls())
func (mock *ArtifactServiceMock) WriteFileCalls() []struct {
	ID       uuid.UUID
	FileName string
	Reader   io.ReadCloser
} {
	var calls []struct {
		ID       uuid.UUID
		FileName string
		Reader   io.ReadCloser
	}
	mock.lockWriteFile.RLock()
	calls = mock.calls.WriteFile
	mock.lockWriteFile.RUnlock()
	return calls
}
