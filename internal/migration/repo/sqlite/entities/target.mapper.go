// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/mattn/go-sqlite3"
)

var targetObjects = RegisterStmt(`
SELECT targets.id, targets.name, targets.target_type, targets.properties
  FROM targets
  ORDER BY targets.name
`)

var targetObjectsByName = RegisterStmt(`
SELECT targets.id, targets.name, targets.target_type, targets.properties
  FROM targets
  WHERE ( targets.name = ? )
  ORDER BY targets.name
`)

var targetNames = RegisterStmt(`
SELECT targets.name
  FROM targets
  ORDER BY targets.name
`)

var targetID = RegisterStmt(`
SELECT targets.id FROM targets
  WHERE targets.name = ?
`)

var targetCreate = RegisterStmt(`
INSERT INTO targets (name, target_type, properties)
  VALUES (?, ?, ?)
`)

var targetUpdate = RegisterStmt(`
UPDATE targets
  SET name = ?, target_type = ?, properties = ?
 WHERE id = ?
`)

var targetRename = RegisterStmt(`
UPDATE targets SET name = ? WHERE name = ?
`)

var targetDeleteByName = RegisterStmt(`
DELETE FROM targets WHERE name = ?
`)

// GetTargetID return the ID of the target with the given key.
// generator: target ID
func GetTargetID(ctx context.Context, db tx, name string) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	stmt, err := Stmt(db, targetID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"targetID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"targets\" ID: %w", err)
	}

	return id, nil
}

// TargetExists checks if a target with the given key exists.
// generator: target Exists
func TargetExists(ctx context.Context, db dbtx, name string) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	stmt, err := Stmt(db, targetID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"targetID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"targets\" ID: %w", err)
	}

	return true, nil
}

// GetTarget returns the target with the given key.
// generator: target GetOne
func GetTarget(ctx context.Context, db dbtx, name string) (_ *migration.Target, _err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	filter := TargetFilter{}
	filter.Name = &name

	objects, err := GetTargets(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"targets\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"targets\" entry matches")
	}
}

// targetColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Target entity.
func targetColumns() string {
	return "targets.id, targets.name, targets.target_type, targets.properties"
}

// getTargets can be used to run handwritten sql.Stmts to return a slice of objects.
func getTargets(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.Target, error) {
	objects := make([]migration.Target, 0)

	dest := func(scan func(dest ...any) error) error {
		t := migration.Target{}
		err := scan(&t.ID, &t.Name, &t.TargetType, &t.Properties)
		if err != nil {
			return err
		}

		objects = append(objects, t)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"targets\" table: %w", err)
	}

	return objects, nil
}

// getTargetsRaw can be used to run handwritten query strings to return a slice of objects.
func getTargetsRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.Target, error) {
	objects := make([]migration.Target, 0)

	dest := func(scan func(dest ...any) error) error {
		t := migration.Target{}
		err := scan(&t.ID, &t.Name, &t.TargetType, &t.Properties)
		if err != nil {
			return err
		}

		objects = append(objects, t)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"targets\" table: %w", err)
	}

	return objects, nil
}

// GetTargets returns all available targets.
// generator: target GetMany
func GetTargets(ctx context.Context, db dbtx, filters ...TargetFilter) (_ []migration.Target, _err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	var err error

	// Result slice.
	objects := make([]migration.Target, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, targetObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"targetObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, targetObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"targetObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(targetObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"targetObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty TargetFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getTargets(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getTargetsRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"targets\" table: %w", err)
	}

	return objects, nil
}

// GetTargetNames returns the identifying field of target.
// generator: target GetNames
func GetTargetNames(ctx context.Context, db dbtx, filters ...TargetFilter) (_ []string, _err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	var err error

	// Result slice.
	names := make([]string, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, targetNames)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"targetNames\" prepared statement: %w", err)
		}
	}

	for _, filter := range filters {
		if filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty TargetFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	var rows *sql.Rows
	if sqlStmt != nil {
		rows, err = sqlStmt.QueryContext(ctx, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		rows, err = db.QueryContext(ctx, queryStr, args...)
	}

	if err != nil {
		return nil, err
	}

	defer func() { _ = rows.Close() }()
	for rows.Next() {
		var identifier string
		err := rows.Scan(&identifier)
		if err != nil {
			return nil, err
		}

		names = append(names, identifier)
	}

	err = rows.Err()
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"targets\" table: %w", err)
	}

	return names, nil
}

// CreateTarget adds a new target to the database.
// generator: target Create
func CreateTarget(ctx context.Context, db dbtx, object migration.Target) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	args := make([]any, 3)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.TargetType
	args[2] = object.Properties

	// Prepared statement to use.
	stmt, err := Stmt(db, targetCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"targetCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	var sqliteErr sqlite3.Error
	if errors.As(err, &sqliteErr) {
		if sqliteErr.Code == sqlite3.ErrConstraint {
			return -1, ErrConflict
		}
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"targets\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"targets\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateTarget updates the target matching the given key parameters.
// generator: target Update
func UpdateTarget(ctx context.Context, db tx, name string, object migration.Target) (_err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	id, err := GetTargetID(ctx, db, name)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, targetUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"targetUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Name, object.TargetType, object.Properties, id)
	if err != nil {
		return fmt.Errorf("Update \"targets\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// RenameTarget renames the target matching the given key parameters.
// generator: target Rename
func RenameTarget(ctx context.Context, db dbtx, name string, to string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	stmt, err := Stmt(db, targetRename)
	if err != nil {
		return fmt.Errorf("Failed to get \"targetRename\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(to, name)
	if err != nil {
		return fmt.Errorf("Rename Target failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows failed: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query affected %d rows instead of 1", n)
	}

	return nil
}

// DeleteTarget deletes the target matching the given key parameters.
// generator: target DeleteOne-by-Name
func DeleteTarget(ctx context.Context, db dbtx, name string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Target")
	}()

	stmt, err := Stmt(db, targetDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"targetDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"targets\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Target rows instead of 1", n)
	}

	return nil
}
