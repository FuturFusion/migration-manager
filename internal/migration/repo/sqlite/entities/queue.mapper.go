// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/google/uuid"
)

var queueEntryObjects = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  ORDER BY instances.id
`)

var queueEntryObjectsByInstanceUUID = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  WHERE ( instance_uuid = ? )
  ORDER BY instances.id
`)

var queueEntryObjectsByBatchName = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  WHERE ( batch_name = ? )
  ORDER BY instances.id
`)

var queueEntryObjectsByMigrationStatus = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  WHERE ( queue.migration_status = ? )
  ORDER BY instances.id
`)

var queueEntryObjectsByImportStage = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  WHERE ( queue.import_stage = ? )
  ORDER BY instances.id
`)

var queueEntryObjectsByBatchNameAndMigrationStatus = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  WHERE ( batch_name = ? AND queue.migration_status = ? )
  ORDER BY instances.id
`)

var queueEntryObjectsByBatchNameAndImportStage = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  WHERE ( batch_name = ? AND queue.import_stage = ? )
  ORDER BY instances.id
`)

var queueEntryObjectsByBatchNameAndMigrationStatusAndImportStage = RegisterStmt(`
SELECT queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement
  FROM queue
  JOIN instances ON queue.instance_id = instances.id
  JOIN batches ON queue.batch_id = batches.id
  WHERE ( batch_name = ? AND queue.migration_status = ? AND queue.import_stage = ? )
  ORDER BY instances.id
`)

var queueEntryID = RegisterStmt(`
SELECT queue.id FROM queue
  JOIN instances ON queue.instance_id = instances.id
  WHERE instances.uuid = ?
`)

var queueEntryCreate = RegisterStmt(`
INSERT INTO queue (instance_id, batch_id, secret_token, import_stage, migration_status, migration_status_message, last_worker_status, migration_window_id, placement)
  VALUES ((SELECT instances.id FROM instances WHERE instances.uuid = ?), (SELECT batches.id FROM batches WHERE batches.name = ?), ?, ?, ?, ?, ?, ?, ?)
`)

var queueEntryUpdate = RegisterStmt(`
UPDATE queue
  SET instance_id = (SELECT instances.id FROM instances WHERE instances.uuid = ?), batch_id = (SELECT batches.id FROM batches WHERE batches.name = ?), secret_token = ?, import_stage = ?, migration_status = ?, migration_status_message = ?, last_worker_status = ?, migration_window_id = ?, placement = ?
 WHERE id = ?
`)

var queueEntryDeleteByInstanceUUID = RegisterStmt(`
DELETE FROM queue WHERE instance_id = (SELECT instances.id FROM instances WHERE instances.uuid = ?)
`)

var queueEntryDeleteByBatchName = RegisterStmt(`
DELETE FROM queue WHERE batch_id = (SELECT batches.id FROM batches WHERE batches.name = ?)
`)

// GetQueueEntryID return the ID of the queue_entry with the given key.
// generator: queue_entry ID
func GetQueueEntryID(ctx context.Context, db tx, instanceUUID uuid.UUID) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Queue_entry")
	}()

	stmt, err := Stmt(db, queueEntryID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"queueEntryID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, instanceUUID)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"queue\" ID: %w", err)
	}

	return id, nil
}

// GetQueueEntry returns the queue_entry with the given key.
// generator: queue_entry GetOne
func GetQueueEntry(ctx context.Context, db dbtx, instanceUUID uuid.UUID) (_ *migration.QueueEntry, _err error) {
	defer func() {
		_err = mapErr(_err, "Queue_entry")
	}()

	filter := QueueEntryFilter{}
	filter.InstanceUUID = &instanceUUID

	objects, err := GetQueueEntries(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"queue\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"queue\" entry matches")
	}
}

// queueEntryColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the QueueEntry entity.
func queueEntryColumns() string {
	return "queue.id, instances.uuid AS instance_uuid, batches.name AS batch_name, queue.secret_token, queue.import_stage, queue.migration_status, queue.migration_status_message, queue.last_worker_status, queue.migration_window_id, queue.placement"
}

// getQueueEntries can be used to run handwritten sql.Stmts to return a slice of objects.
func getQueueEntries(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.QueueEntry, error) {
	objects := make([]migration.QueueEntry, 0)

	dest := func(scan func(dest ...any) error) error {
		q := migration.QueueEntry{}
		var placementStr string
		err := scan(&q.ID, &q.InstanceUUID, &q.BatchName, &q.SecretToken, &q.ImportStage, &q.MigrationStatus, &q.MigrationStatusMessage, &q.LastWorkerStatus, &q.MigrationWindowID, &placementStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(placementStr, &q.Placement)
		if err != nil {
			return err
		}

		objects = append(objects, q)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"queue\" table: %w", err)
	}

	return objects, nil
}

// getQueueEntriesRaw can be used to run handwritten query strings to return a slice of objects.
func getQueueEntriesRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.QueueEntry, error) {
	objects := make([]migration.QueueEntry, 0)

	dest := func(scan func(dest ...any) error) error {
		q := migration.QueueEntry{}
		var placementStr string
		err := scan(&q.ID, &q.InstanceUUID, &q.BatchName, &q.SecretToken, &q.ImportStage, &q.MigrationStatus, &q.MigrationStatusMessage, &q.LastWorkerStatus, &q.MigrationWindowID, &placementStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(placementStr, &q.Placement)
		if err != nil {
			return err
		}

		objects = append(objects, q)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"queue\" table: %w", err)
	}

	return objects, nil
}

// GetQueueEntries returns all available queue_entries.
// generator: queue_entry GetMany
func GetQueueEntries(ctx context.Context, db dbtx, filters ...QueueEntryFilter) (_ []migration.QueueEntry, _err error) {
	defer func() {
		_err = mapErr(_err, "Queue_entry")
	}()

	var err error

	// Result slice.
	objects := make([]migration.QueueEntry, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, queueEntryObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.BatchName != nil && filter.MigrationStatus != nil && filter.ImportStage != nil && filter.InstanceUUID == nil {
			args = append(args, []any{filter.BatchName, filter.MigrationStatus, filter.ImportStage}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, queueEntryObjectsByBatchNameAndMigrationStatusAndImportStage)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"queueEntryObjectsByBatchNameAndMigrationStatusAndImportStage\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(queueEntryObjectsByBatchNameAndMigrationStatusAndImportStage)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.BatchName != nil && filter.MigrationStatus != nil && filter.InstanceUUID == nil && filter.ImportStage == nil {
			args = append(args, []any{filter.BatchName, filter.MigrationStatus}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, queueEntryObjectsByBatchNameAndMigrationStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"queueEntryObjectsByBatchNameAndMigrationStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(queueEntryObjectsByBatchNameAndMigrationStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.BatchName != nil && filter.ImportStage != nil && filter.InstanceUUID == nil && filter.MigrationStatus == nil {
			args = append(args, []any{filter.BatchName, filter.ImportStage}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, queueEntryObjectsByBatchNameAndImportStage)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"queueEntryObjectsByBatchNameAndImportStage\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(queueEntryObjectsByBatchNameAndImportStage)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.MigrationStatus != nil && filter.InstanceUUID == nil && filter.BatchName == nil && filter.ImportStage == nil {
			args = append(args, []any{filter.MigrationStatus}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, queueEntryObjectsByMigrationStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"queueEntryObjectsByMigrationStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(queueEntryObjectsByMigrationStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.InstanceUUID != nil && filter.BatchName == nil && filter.MigrationStatus == nil && filter.ImportStage == nil {
			args = append(args, []any{filter.InstanceUUID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, queueEntryObjectsByInstanceUUID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"queueEntryObjectsByInstanceUUID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(queueEntryObjectsByInstanceUUID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ImportStage != nil && filter.InstanceUUID == nil && filter.BatchName == nil && filter.MigrationStatus == nil {
			args = append(args, []any{filter.ImportStage}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, queueEntryObjectsByImportStage)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"queueEntryObjectsByImportStage\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(queueEntryObjectsByImportStage)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.BatchName != nil && filter.InstanceUUID == nil && filter.MigrationStatus == nil && filter.ImportStage == nil {
			args = append(args, []any{filter.BatchName}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, queueEntryObjectsByBatchName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"queueEntryObjectsByBatchName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(queueEntryObjectsByBatchName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"queueEntryObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.InstanceUUID == nil && filter.BatchName == nil && filter.MigrationStatus == nil && filter.ImportStage == nil {
			return nil, fmt.Errorf("Cannot filter on empty QueueEntryFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getQueueEntries(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getQueueEntriesRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"queue\" table: %w", err)
	}

	return objects, nil
}

// CreateQueueEntry adds a new queue_entry to the database.
// generator: queue_entry Create
func CreateQueueEntry(ctx context.Context, db dbtx, object migration.QueueEntry) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Queue_entry")
	}()

	args := make([]any, 9)

	// Populate the statement arguments.
	args[0] = object.InstanceUUID
	args[1] = object.BatchName
	args[2] = object.SecretToken
	args[3] = object.ImportStage
	args[4] = object.MigrationStatus
	args[5] = object.MigrationStatusMessage
	args[6] = object.LastWorkerStatus
	args[7] = object.MigrationWindowID
	marshaledPlacement, err := marshalJSON(object.Placement)
	if err != nil {
		return -1, err
	}

	args[8] = marshaledPlacement

	// Prepared statement to use.
	stmt, err := Stmt(db, queueEntryCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"queueEntryCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
		return -1, ErrConflict
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"queue\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"queue\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateQueueEntry updates the queue_entry matching the given key parameters.
// generator: queue_entry Update
func UpdateQueueEntry(ctx context.Context, db tx, instanceUUID uuid.UUID, object migration.QueueEntry) (_err error) {
	defer func() {
		_err = mapErr(_err, "Queue_entry")
	}()

	id, err := GetQueueEntryID(ctx, db, instanceUUID)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, queueEntryUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"queueEntryUpdate\" prepared statement: %w", err)
	}

	marshaledPlacement, err := marshalJSON(object.Placement)
	if err != nil {
		return err
	}

	result, err := stmt.Exec(object.InstanceUUID, object.BatchName, object.SecretToken, object.ImportStage, object.MigrationStatus, object.MigrationStatusMessage, object.LastWorkerStatus, object.MigrationWindowID, marshaledPlacement, id)
	if err != nil {
		return fmt.Errorf("Update \"queue\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteQueueEntry deletes the queue_entry matching the given key parameters.
// generator: queue_entry DeleteOne-by-InstanceUUID
func DeleteQueueEntry(ctx context.Context, db dbtx, instanceUUID uuid.UUID) (_err error) {
	defer func() {
		_err = mapErr(_err, "Queue_entry")
	}()

	stmt, err := Stmt(db, queueEntryDeleteByInstanceUUID)
	if err != nil {
		return fmt.Errorf("Failed to get \"queueEntryDeleteByInstanceUUID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(instanceUUID)
	if err != nil {
		return fmt.Errorf("Delete \"queue\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d QueueEntry rows instead of 1", n)
	}

	return nil
}

// DeleteQueueEntries deletes the queue_entry matching the given key parameters.
// generator: queue_entry DeleteMany-by-BatchName
func DeleteQueueEntries(ctx context.Context, db dbtx, batchName string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Queue_entry")
	}()

	stmt, err := Stmt(db, queueEntryDeleteByBatchName)
	if err != nil {
		return fmt.Errorf("Failed to get \"queueEntryDeleteByBatchName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(batchName)
	if err != nil {
		return fmt.Errorf("Delete \"queue\": %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}
