// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"fmt"
	"strings"
)

var batchMigrationWindowObjects = RegisterStmt(`
SELECT batches_migration_windows.batch_id, batches_migration_windows.migration_window_id
  FROM batches_migration_windows
  ORDER BY batches_migration_windows.batch_id
`)

var batchMigrationWindowObjectsByBatchID = RegisterStmt(`
SELECT batches_migration_windows.batch_id, batches_migration_windows.migration_window_id
  FROM batches_migration_windows
  WHERE ( batches_migration_windows.batch_id = ? )
  ORDER BY batches_migration_windows.batch_id
`)

var batchMigrationWindowObjectsByMigrationWindowID = RegisterStmt(`
SELECT batches_migration_windows.batch_id, batches_migration_windows.migration_window_id
  FROM batches_migration_windows
  WHERE ( batches_migration_windows.migration_window_id = ? )
  ORDER BY batches_migration_windows.batch_id
`)

var batchMigrationWindowCreate = RegisterStmt(`
INSERT INTO batches_migration_windows (batch_id, migration_window_id)
  VALUES (?, ?)
`)

var batchMigrationWindowDeleteByMigrationWindowID = RegisterStmt(`
DELETE FROM batches_migration_windows WHERE migration_window_id = ?
`)

var batchMigrationWindowDeleteByBatchID = RegisterStmt(`
DELETE FROM batches_migration_windows WHERE batch_id = ?
`)

// CreateBatchMigrationWindows adds a new batch_migration_window to the database.
// generator: batch_migration_window Create
func CreateBatchMigrationWindows(ctx context.Context, db tx, objects []BatchMigrationWindow) (_err error) {
	defer func() {
		_err = mapErr(_err, "Batch_migration_window")
	}()

	for _, object := range objects {
		args := make([]any, 2)

		// Populate the statement arguments.
		args[0] = object.BatchID
		args[1] = object.MigrationWindowID

		// Prepared statement to use.
		stmt, err := Stmt(db, batchMigrationWindowCreate)
		if err != nil {
			return fmt.Errorf("Failed to get \"batchMigrationWindowCreate\" prepared statement: %w", err)
		}

		// Execute the statement.
		_, err = stmt.Exec(args...)
		if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
			return ErrConflict
		}

		if err != nil {
			return fmt.Errorf("Failed to create \"batches_migration_windows\" entry: %w", err)
		}

	}

	return nil
}

// DeleteBatchMigrationWindows deletes the batch_migration_window matching the given key parameters.
// generator: batch_migration_window DeleteMany
func DeleteBatchMigrationWindows(ctx context.Context, db tx, batchID int) (_err error) {
	defer func() {
		_err = mapErr(_err, "Batch_migration_window")
	}()

	stmt, err := Stmt(db, batchMigrationWindowDeleteByBatchID)
	if err != nil {
		return fmt.Errorf("Failed to get \"batchMigrationWindowDeleteByBatchID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(int(batchID))
	if err != nil {
		return fmt.Errorf("Delete \"batches_migration_windows\" entry failed: %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}
