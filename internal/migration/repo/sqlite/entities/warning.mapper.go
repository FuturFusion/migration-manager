// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/google/uuid"
)

var warningObjects = RegisterStmt(`
SELECT warnings.id, warnings.uuid, warnings.type, warnings.scope, warnings.entity_type, warnings.entity, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.messages, warnings.count
  FROM warnings
  ORDER BY warnings.uuid
`)

var warningObjectsByUUID = RegisterStmt(`
SELECT warnings.id, warnings.uuid, warnings.type, warnings.scope, warnings.entity_type, warnings.entity, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.messages, warnings.count
  FROM warnings
  WHERE ( warnings.uuid = ? )
  ORDER BY warnings.uuid
`)

var warningObjectsByType = RegisterStmt(`
SELECT warnings.id, warnings.uuid, warnings.type, warnings.scope, warnings.entity_type, warnings.entity, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.messages, warnings.count
  FROM warnings
  WHERE ( warnings.type = ? )
  ORDER BY warnings.uuid
`)

var warningObjectsByTypeAndScope = RegisterStmt(`
SELECT warnings.id, warnings.uuid, warnings.type, warnings.scope, warnings.entity_type, warnings.entity, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.messages, warnings.count
  FROM warnings
  WHERE ( warnings.type = ? AND warnings.scope = ? )
  ORDER BY warnings.uuid
`)

var warningObjectsByTypeAndScopeAndEntityType = RegisterStmt(`
SELECT warnings.id, warnings.uuid, warnings.type, warnings.scope, warnings.entity_type, warnings.entity, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.messages, warnings.count
  FROM warnings
  WHERE ( warnings.type = ? AND warnings.scope = ? AND warnings.entity_type = ? )
  ORDER BY warnings.uuid
`)

var warningObjectsByTypeAndScopeAndEntityTypeAndEntity = RegisterStmt(`
SELECT warnings.id, warnings.uuid, warnings.type, warnings.scope, warnings.entity_type, warnings.entity, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.messages, warnings.count
  FROM warnings
  WHERE ( warnings.type = ? AND warnings.scope = ? AND warnings.entity_type = ? AND warnings.entity = ? )
  ORDER BY warnings.uuid
`)

var warningID = RegisterStmt(`
SELECT warnings.id FROM warnings
  WHERE warnings.uuid = ?
`)

var warningCreateOrReplace = RegisterStmt(`
INSERT OR REPLACE INTO warnings (uuid, type, scope, entity_type, entity, status, first_seen_date, last_seen_date, updated_date, messages, count)
 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`)

var warningUpdate = RegisterStmt(`
UPDATE warnings
  SET uuid = ?, type = ?, scope = ?, entity_type = ?, entity = ?, status = ?, first_seen_date = ?, last_seen_date = ?, updated_date = ?, messages = ?, count = ?
 WHERE id = ?
`)

var warningDeleteByUUID = RegisterStmt(`
DELETE FROM warnings WHERE uuid = ?
`)

// GetWarningID return the ID of the warning with the given key.
// generator: warning ID
func GetWarningID(ctx context.Context, db tx, uuid uuid.UUID) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Warning")
	}()

	stmt, err := Stmt(db, warningID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"warningID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, uuid)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"warnings\" ID: %w", err)
	}

	return id, nil
}

// GetWarning returns the warning with the given key.
// generator: warning GetOne
func GetWarning(ctx context.Context, db dbtx, uuid uuid.UUID) (_ *migration.Warning, _err error) {
	defer func() {
		_err = mapErr(_err, "Warning")
	}()

	filter := WarningFilter{}
	filter.UUID = &uuid

	objects, err := GetWarnings(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"warnings\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"warnings\" entry matches")
	}
}

// warningColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Warning entity.
func warningColumns() string {
	return "warnings.id, warnings.uuid, warnings.type, warnings.scope, warnings.entity_type, warnings.entity, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.messages, warnings.count"
}

// getWarnings can be used to run handwritten sql.Stmts to return a slice of objects.
func getWarnings(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.Warning, error) {
	objects := make([]migration.Warning, 0)

	dest := func(scan func(dest ...any) error) error {
		w := migration.Warning{}
		var messagesStr string
		err := scan(&w.ID, &w.UUID, &w.Type, &w.Scope, &w.EntityType, &w.Entity, &w.Status, &w.FirstSeenDate, &w.LastSeenDate, &w.UpdatedDate, &messagesStr, &w.Count)
		if err != nil {
			return err
		}

		err = unmarshalJSON(messagesStr, &w.Messages)
		if err != nil {
			return err
		}

		objects = append(objects, w)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"warnings\" table: %w", err)
	}

	return objects, nil
}

// getWarningsRaw can be used to run handwritten query strings to return a slice of objects.
func getWarningsRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.Warning, error) {
	objects := make([]migration.Warning, 0)

	dest := func(scan func(dest ...any) error) error {
		w := migration.Warning{}
		var messagesStr string
		err := scan(&w.ID, &w.UUID, &w.Type, &w.Scope, &w.EntityType, &w.Entity, &w.Status, &w.FirstSeenDate, &w.LastSeenDate, &w.UpdatedDate, &messagesStr, &w.Count)
		if err != nil {
			return err
		}

		err = unmarshalJSON(messagesStr, &w.Messages)
		if err != nil {
			return err
		}

		objects = append(objects, w)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"warnings\" table: %w", err)
	}

	return objects, nil
}

// GetWarnings returns all available warnings.
// generator: warning GetMany
func GetWarnings(ctx context.Context, db dbtx, filters ...WarningFilter) (_ []migration.Warning, _err error) {
	defer func() {
		_err = mapErr(_err, "Warning")
	}()

	var err error

	// Result slice.
	objects := make([]migration.Warning, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, warningObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"warningObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Type != nil && filter.Scope != nil && filter.EntityType != nil && filter.Entity != nil && filter.ID == nil && filter.UUID == nil {
			args = append(args, []any{filter.Type, filter.Scope, filter.EntityType, filter.Entity}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, warningObjectsByTypeAndScopeAndEntityTypeAndEntity)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"warningObjectsByTypeAndScopeAndEntityTypeAndEntity\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(warningObjectsByTypeAndScopeAndEntityTypeAndEntity)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"warningObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Type != nil && filter.Scope != nil && filter.EntityType != nil && filter.ID == nil && filter.UUID == nil && filter.Entity == nil {
			args = append(args, []any{filter.Type, filter.Scope, filter.EntityType}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, warningObjectsByTypeAndScopeAndEntityType)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"warningObjectsByTypeAndScopeAndEntityType\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(warningObjectsByTypeAndScopeAndEntityType)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"warningObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Type != nil && filter.Scope != nil && filter.ID == nil && filter.UUID == nil && filter.EntityType == nil && filter.Entity == nil {
			args = append(args, []any{filter.Type, filter.Scope}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, warningObjectsByTypeAndScope)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"warningObjectsByTypeAndScope\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(warningObjectsByTypeAndScope)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"warningObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.UUID != nil && filter.ID == nil && filter.Scope == nil && filter.EntityType == nil && filter.Entity == nil && filter.Type == nil {
			args = append(args, []any{filter.UUID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, warningObjectsByUUID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"warningObjectsByUUID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(warningObjectsByUUID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"warningObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Type != nil && filter.ID == nil && filter.UUID == nil && filter.Scope == nil && filter.EntityType == nil && filter.Entity == nil {
			args = append(args, []any{filter.Type}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, warningObjectsByType)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"warningObjectsByType\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(warningObjectsByType)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"warningObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.UUID == nil && filter.Scope == nil && filter.EntityType == nil && filter.Entity == nil && filter.Type == nil {
			return nil, fmt.Errorf("Cannot filter on empty WarningFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getWarnings(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getWarningsRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"warnings\" table: %w", err)
	}

	return objects, nil
}

// CreateOrReplaceWarning adds a new warning to the database.
// generator: warning CreateOrReplace
func CreateOrReplaceWarning(ctx context.Context, db dbtx, object migration.Warning) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Warning")
	}()

	args := make([]any, 11)

	// Populate the statement arguments.
	args[0] = object.UUID
	args[1] = object.Type
	args[2] = object.Scope
	args[3] = object.EntityType
	args[4] = object.Entity
	args[5] = object.Status
	args[6] = object.FirstSeenDate
	args[7] = object.LastSeenDate
	args[8] = object.UpdatedDate
	marshaledMessages, err := marshalJSON(object.Messages)
	if err != nil {
		return -1, err
	}

	args[9] = marshaledMessages
	args[10] = object.Count

	// Prepared statement to use.
	stmt, err := Stmt(db, warningCreateOrReplace)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"warningCreateOrReplace\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
		return -1, ErrConflict
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"warnings\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"warnings\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateWarning updates the warning matching the given key parameters.
// generator: warning Update
func UpdateWarning(ctx context.Context, db tx, uuid uuid.UUID, object migration.Warning) (_err error) {
	defer func() {
		_err = mapErr(_err, "Warning")
	}()

	id, err := GetWarningID(ctx, db, uuid)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, warningUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"warningUpdate\" prepared statement: %w", err)
	}

	marshaledMessages, err := marshalJSON(object.Messages)
	if err != nil {
		return err
	}

	result, err := stmt.Exec(object.UUID, object.Type, object.Scope, object.EntityType, object.Entity, object.Status, object.FirstSeenDate, object.LastSeenDate, object.UpdatedDate, marshaledMessages, object.Count, id)
	if err != nil {
		return fmt.Errorf("Update \"warnings\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteWarning deletes the warning matching the given key parameters.
// generator: warning DeleteOne-by-UUID
func DeleteWarning(ctx context.Context, db dbtx, uuid uuid.UUID) (_err error) {
	defer func() {
		_err = mapErr(_err, "Warning")
	}()

	stmt, err := Stmt(db, warningDeleteByUUID)
	if err != nil {
		return fmt.Errorf("Failed to get \"warningDeleteByUUID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(uuid)
	if err != nil {
		return fmt.Errorf("Delete \"warnings\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Warning rows instead of 1", n)
	}

	return nil
}
