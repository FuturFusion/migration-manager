// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/google/uuid"
)

var artifactObjects = RegisterStmt(`
SELECT artifacts.id, artifacts.uuid, artifacts.type, artifacts.last_updated, artifacts.properties
  FROM artifacts
  ORDER BY artifacts.uuid
`)

var artifactObjectsByID = RegisterStmt(`
SELECT artifacts.id, artifacts.uuid, artifacts.type, artifacts.last_updated, artifacts.properties
  FROM artifacts
  WHERE ( artifacts.id = ? )
  ORDER BY artifacts.uuid
`)

var artifactObjectsByUUID = RegisterStmt(`
SELECT artifacts.id, artifacts.uuid, artifacts.type, artifacts.last_updated, artifacts.properties
  FROM artifacts
  WHERE ( artifacts.uuid = ? )
  ORDER BY artifacts.uuid
`)

var artifactObjectsByType = RegisterStmt(`
SELECT artifacts.id, artifacts.uuid, artifacts.type, artifacts.last_updated, artifacts.properties
  FROM artifacts
  WHERE ( artifacts.type = ? )
  ORDER BY artifacts.uuid
`)

var artifactID = RegisterStmt(`
SELECT artifacts.id FROM artifacts
  WHERE artifacts.uuid = ?
`)

var artifactCreate = RegisterStmt(`
INSERT INTO artifacts (uuid, type, last_updated, properties)
  VALUES (?, ?, ?, ?)
`)

var artifactUpdate = RegisterStmt(`
UPDATE artifacts
  SET uuid = ?, type = ?, last_updated = ?, properties = ?
 WHERE id = ?
`)

var artifactDeleteByUUID = RegisterStmt(`
DELETE FROM artifacts WHERE uuid = ?
`)

// GetArtifactID return the ID of the artifact with the given key.
// generator: artifact ID
func GetArtifactID(ctx context.Context, db tx, uuid uuid.UUID) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Artifact")
	}()

	stmt, err := Stmt(db, artifactID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"artifactID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, uuid)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"artifacts\" ID: %w", err)
	}

	return id, nil
}

// ArtifactExists checks if a artifact with the given key exists.
// generator: artifact Exists
func ArtifactExists(ctx context.Context, db dbtx, uuid uuid.UUID) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Artifact")
	}()

	stmt, err := Stmt(db, artifactID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"artifactID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, uuid)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"artifacts\" ID: %w", err)
	}

	return true, nil
}

// GetArtifact returns the artifact with the given key.
// generator: artifact GetOne
func GetArtifact(ctx context.Context, db dbtx, uuid uuid.UUID) (_ *migration.Artifact, _err error) {
	defer func() {
		_err = mapErr(_err, "Artifact")
	}()

	filter := ArtifactFilter{}
	filter.UUID = &uuid

	objects, err := GetArtifacts(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"artifacts\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"artifacts\" entry matches")
	}
}

// artifactColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Artifact entity.
func artifactColumns() string {
	return "artifacts.id, artifacts.uuid, artifacts.type, artifacts.last_updated, artifacts.properties"
}

// getArtifacts can be used to run handwritten sql.Stmts to return a slice of objects.
func getArtifacts(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.Artifact, error) {
	objects := make([]migration.Artifact, 0)

	dest := func(scan func(dest ...any) error) error {
		a := migration.Artifact{}
		var propertiesStr string
		err := scan(&a.ID, &a.UUID, &a.Type, &a.LastUpdated, &propertiesStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(propertiesStr, &a.Properties)
		if err != nil {
			return err
		}

		objects = append(objects, a)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"artifacts\" table: %w", err)
	}

	return objects, nil
}

// getArtifactsRaw can be used to run handwritten query strings to return a slice of objects.
func getArtifactsRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.Artifact, error) {
	objects := make([]migration.Artifact, 0)

	dest := func(scan func(dest ...any) error) error {
		a := migration.Artifact{}
		var propertiesStr string
		err := scan(&a.ID, &a.UUID, &a.Type, &a.LastUpdated, &propertiesStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(propertiesStr, &a.Properties)
		if err != nil {
			return err
		}

		objects = append(objects, a)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"artifacts\" table: %w", err)
	}

	return objects, nil
}

// GetArtifacts returns all available artifacts.
// generator: artifact GetMany
func GetArtifacts(ctx context.Context, db dbtx, filters ...ArtifactFilter) (_ []migration.Artifact, _err error) {
	defer func() {
		_err = mapErr(_err, "Artifact")
	}()

	var err error

	// Result slice.
	objects := make([]migration.Artifact, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, artifactObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"artifactObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.UUID != nil && filter.ID == nil && filter.Type == nil {
			args = append(args, []any{filter.UUID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, artifactObjectsByUUID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"artifactObjectsByUUID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(artifactObjectsByUUID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"artifactObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Type != nil && filter.ID == nil && filter.UUID == nil {
			args = append(args, []any{filter.Type}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, artifactObjectsByType)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"artifactObjectsByType\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(artifactObjectsByType)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"artifactObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID != nil && filter.UUID == nil && filter.Type == nil {
			args = append(args, []any{filter.ID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, artifactObjectsByID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"artifactObjectsByID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(artifactObjectsByID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"artifactObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.UUID == nil && filter.Type == nil {
			return nil, fmt.Errorf("Cannot filter on empty ArtifactFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getArtifacts(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getArtifactsRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"artifacts\" table: %w", err)
	}

	return objects, nil
}

// CreateArtifact adds a new artifact to the database.
// generator: artifact Create
func CreateArtifact(ctx context.Context, db dbtx, object migration.Artifact) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Artifact")
	}()

	args := make([]any, 4)

	// Populate the statement arguments.
	args[0] = object.UUID
	args[1] = object.Type
	args[2] = time.Now().UTC().Format(time.RFC3339)
	marshaledProperties, err := marshalJSON(object.Properties)
	if err != nil {
		return -1, err
	}

	args[3] = marshaledProperties

	// Prepared statement to use.
	stmt, err := Stmt(db, artifactCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"artifactCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
		return -1, ErrConflict
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"artifacts\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"artifacts\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateArtifact updates the artifact matching the given key parameters.
// generator: artifact Update
func UpdateArtifact(ctx context.Context, db tx, uuid uuid.UUID, object migration.Artifact) (_err error) {
	defer func() {
		_err = mapErr(_err, "Artifact")
	}()

	id, err := GetArtifactID(ctx, db, uuid)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, artifactUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"artifactUpdate\" prepared statement: %w", err)
	}

	marshaledProperties, err := marshalJSON(object.Properties)
	if err != nil {
		return err
	}

	result, err := stmt.Exec(object.UUID, object.Type, time.Now().UTC().Format(time.RFC3339), marshaledProperties, id)
	if err != nil {
		return fmt.Errorf("Update \"artifacts\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteArtifact deletes the artifact matching the given key parameters.
// generator: artifact DeleteOne-by-UUID
func DeleteArtifact(ctx context.Context, db dbtx, uuid uuid.UUID) (_err error) {
	defer func() {
		_err = mapErr(_err, "Artifact")
	}()

	stmt, err := Stmt(db, artifactDeleteByUUID)
	if err != nil {
		return fmt.Errorf("Failed to get \"artifactDeleteByUUID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(uuid)
	if err != nil {
		return fmt.Errorf("Delete \"artifacts\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Artifact rows instead of 1", n)
	}

	return nil
}
