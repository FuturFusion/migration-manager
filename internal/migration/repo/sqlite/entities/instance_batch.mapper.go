// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/FuturFusion/migration-manager/internal/migration"
)

var instanceBatchObjects = RegisterStmt(`
SELECT instances_batches.batch_id, instances_batches.instance_id
  FROM instances_batches
  ORDER BY instances_batches.batch_id, instances_batches.instance_id
`)

var instanceBatchObjectsByBatchID = RegisterStmt(`
SELECT instances_batches.batch_id, instances_batches.instance_id
  FROM instances_batches
  WHERE ( instances_batches.batch_id = ? )
  ORDER BY instances_batches.batch_id, instances_batches.instance_id
`)

var instanceBatchObjectsByInstanceID = RegisterStmt(`
SELECT instances_batches.batch_id, instances_batches.instance_id
  FROM instances_batches
  WHERE ( instances_batches.instance_id = ? )
  ORDER BY instances_batches.batch_id, instances_batches.instance_id
`)

var instanceBatchCreate = RegisterStmt(`
INSERT INTO instances_batches (batch_id, instance_id)
  VALUES (?, ?)
`)

var instanceBatchDeleteByInstanceID = RegisterStmt(`
DELETE FROM instances_batches WHERE instance_id = ?
`)

var instanceBatchDeleteByInstanceIDAndBatchID = RegisterStmt(`
DELETE FROM instances_batches WHERE instance_id = ? AND batch_id = ?
`)

// GetBatchInstances returns all available Instances for the Batch.
// generator: instance_batch GetMany
func GetBatchInstances(ctx context.Context, db tx, batchID int) (_ []migration.Instance, _err error) {
	defer func() {
		_err = mapErr(_err, "Instance_batch")
	}()

	var err error

	// Result slice.
	objects := make([]InstanceBatch, 0)

	sqlStmt, err := Stmt(db, instanceBatchObjectsByBatchID)
	if err != nil {
		return nil, fmt.Errorf("Failed to get \"instanceBatchObjectsByBatchID\" prepared statement: %w", err)
	}

	args := []any{batchID}

	// Select.
	objects, err = getInstanceBatches(ctx, sqlStmt, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances_batches\" table: %w", err)
	}

	result := make([]migration.Instance, len(objects))
	for i, object := range objects {
		instance, err := GetInstances(ctx, db, InstanceFilter{ID: &object.InstanceID})
		if err != nil {
			return nil, err
		}

		result[i] = instance[0]
	}

	return result, nil
}

// instanceBatchColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the InstanceBatch entity.
func instanceBatchColumns() string {
	return "instances_batches.batch_id, instances_batches.instance_id"
}

// getInstanceBatches can be used to run handwritten sql.Stmts to return a slice of objects.
func getInstanceBatches(ctx context.Context, stmt *sql.Stmt, args ...any) ([]InstanceBatch, error) {
	objects := make([]InstanceBatch, 0)

	dest := func(scan func(dest ...any) error) error {
		i := InstanceBatch{}
		err := scan(&i.BatchID, &i.InstanceID)
		if err != nil {
			return err
		}

		objects = append(objects, i)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances_batches\" table: %w", err)
	}

	return objects, nil
}

// getInstanceBatchesRaw can be used to run handwritten query strings to return a slice of objects.
func getInstanceBatchesRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]InstanceBatch, error) {
	objects := make([]InstanceBatch, 0)

	dest := func(scan func(dest ...any) error) error {
		i := InstanceBatch{}
		err := scan(&i.BatchID, &i.InstanceID)
		if err != nil {
			return err
		}

		objects = append(objects, i)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances_batches\" table: %w", err)
	}

	return objects, nil
}

// GetInstanceBatches returns all available Batches for the Instance.
// generator: instance_batch GetMany
func GetInstanceBatches(ctx context.Context, db tx, instanceID int) (_ []migration.Batch, _err error) {
	defer func() {
		_err = mapErr(_err, "Instance_batch")
	}()

	var err error

	// Result slice.
	objects := make([]InstanceBatch, 0)

	sqlStmt, err := Stmt(db, instanceBatchObjectsByInstanceID)
	if err != nil {
		return nil, fmt.Errorf("Failed to get \"instanceBatchObjectsByInstanceID\" prepared statement: %w", err)
	}

	args := []any{instanceID}

	// Select.
	objects, err = getInstanceBatches(ctx, sqlStmt, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances_batches\" table: %w", err)
	}

	result := make([]migration.Batch, len(objects))
	for i, object := range objects {
		batch, err := GetBatches(ctx, db, BatchFilter{ID: &object.BatchID})
		if err != nil {
			return nil, err
		}

		result[i] = batch[0]
	}

	return result, nil
}

// CreateInstanceBatches adds a new instance_batch to the database.
// generator: instance_batch Create
func CreateInstanceBatches(ctx context.Context, db tx, objects []InstanceBatch) (_err error) {
	defer func() {
		_err = mapErr(_err, "Instance_batch")
	}()

	for _, object := range objects {
		args := make([]any, 2)

		// Populate the statement arguments.
		args[0] = object.BatchID
		args[1] = object.InstanceID

		// Prepared statement to use.
		stmt, err := Stmt(db, instanceBatchCreate)
		if err != nil {
			return fmt.Errorf("Failed to get \"instanceBatchCreate\" prepared statement: %w", err)
		}

		// Execute the statement.
		_, err = stmt.Exec(args...)
		if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
			return ErrConflict
		}

		if err != nil {
			return fmt.Errorf("Failed to create \"instances_batches\" entry: %w", err)
		}

	}

	return nil
}

// DeleteInstanceBatches deletes the instance_batch matching the given key parameters.
// generator: instance_batch DeleteMany
func DeleteInstanceBatches(ctx context.Context, db tx, instanceID int) (_err error) {
	defer func() {
		_err = mapErr(_err, "Instance_batch")
	}()

	stmt, err := Stmt(db, instanceBatchDeleteByInstanceID)
	if err != nil {
		return fmt.Errorf("Failed to get \"instanceBatchDeleteByInstanceID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(int(instanceID))
	if err != nil {
		return fmt.Errorf("Delete \"instances_batches\" entry failed: %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}
