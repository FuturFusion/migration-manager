// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/mattn/go-sqlite3"
)

var networkObjects = RegisterStmt(`
SELECT networks.id, networks.type, networks.name, networks.location, sources.name AS source, networks.properties, networks.config
  FROM networks
  JOIN sources ON networks.source_id = sources.id
  ORDER BY networks.name, sources.id
`)

var networkObjectsByName = RegisterStmt(`
SELECT networks.id, networks.type, networks.name, networks.location, sources.name AS source, networks.properties, networks.config
  FROM networks
  JOIN sources ON networks.source_id = sources.id
  WHERE ( networks.name = ? )
  ORDER BY networks.name, sources.id
`)

var networkObjectsByNameAndSource = RegisterStmt(`
SELECT networks.id, networks.type, networks.name, networks.location, sources.name AS source, networks.properties, networks.config
  FROM networks
  JOIN sources ON networks.source_id = sources.id
  WHERE ( networks.name = ? AND source = ? )
  ORDER BY networks.name, sources.id
`)

var networkObjectsBySource = RegisterStmt(`
SELECT networks.id, networks.type, networks.name, networks.location, sources.name AS source, networks.properties, networks.config
  FROM networks
  JOIN sources ON networks.source_id = sources.id
  WHERE ( source = ? )
  ORDER BY networks.name, sources.id
`)

var networkID = RegisterStmt(`
SELECT networks.id FROM networks
  JOIN sources ON networks.source_id = sources.id
  WHERE networks.name = ? AND sources.name = ?
`)

var networkCreate = RegisterStmt(`
INSERT INTO networks (type, name, location, source_id, properties, config)
  VALUES (?, ?, ?, (SELECT sources.id FROM sources WHERE sources.name = ?), ?, ?)
`)

var networkUpdate = RegisterStmt(`
UPDATE networks
  SET type = ?, name = ?, location = ?, source_id = (SELECT sources.id FROM sources WHERE sources.name = ?), properties = ?, config = ?
 WHERE id = ?
`)

var networkRename = RegisterStmt(`
UPDATE networks SET name = ? WHERE name = ? AND source_id = (SELECT sources.id FROM sources WHERE sources.name = ?)
`)

var networkDeleteByNameAndSource = RegisterStmt(`
DELETE FROM networks WHERE name = ? AND source_id = (SELECT sources.id FROM sources WHERE sources.name = ?)
`)

// GetNetworkID return the ID of the network with the given key.
// generator: network ID
func GetNetworkID(ctx context.Context, db tx, name string, source string) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	stmt, err := Stmt(db, networkID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"networkID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name, source)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"networks\" ID: %w", err)
	}

	return id, nil
}

// NetworkExists checks if a network with the given key exists.
// generator: network Exists
func NetworkExists(ctx context.Context, db dbtx, name string, source string) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	stmt, err := Stmt(db, networkID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"networkID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name, source)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"networks\" ID: %w", err)
	}

	return true, nil
}

// GetNetwork returns the network with the given key.
// generator: network GetOne
func GetNetwork(ctx context.Context, db dbtx, name string, source string) (_ *migration.Network, _err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	filter := NetworkFilter{}
	filter.Name = &name
	filter.Source = &source

	objects, err := GetNetworks(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"networks\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"networks\" entry matches")
	}
}

// networkColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Network entity.
func networkColumns() string {
	return "networks.id, networks.type, networks.name, networks.location, sources.name AS source, networks.properties, networks.config"
}

// getNetworks can be used to run handwritten sql.Stmts to return a slice of objects.
func getNetworks(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.Network, error) {
	objects := make([]migration.Network, 0)

	dest := func(scan func(dest ...any) error) error {
		n := migration.Network{}
		var propertiesStr string
		var configStr string
		err := scan(&n.ID, &n.Type, &n.Name, &n.Location, &n.Source, &propertiesStr, &configStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(propertiesStr, &n.Properties)
		if err != nil {
			return err
		}

		err = unmarshalJSON(configStr, &n.Config)
		if err != nil {
			return err
		}

		objects = append(objects, n)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"networks\" table: %w", err)
	}

	return objects, nil
}

// getNetworksRaw can be used to run handwritten query strings to return a slice of objects.
func getNetworksRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.Network, error) {
	objects := make([]migration.Network, 0)

	dest := func(scan func(dest ...any) error) error {
		n := migration.Network{}
		var propertiesStr string
		var configStr string
		err := scan(&n.ID, &n.Type, &n.Name, &n.Location, &n.Source, &propertiesStr, &configStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(propertiesStr, &n.Properties)
		if err != nil {
			return err
		}

		err = unmarshalJSON(configStr, &n.Config)
		if err != nil {
			return err
		}

		objects = append(objects, n)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"networks\" table: %w", err)
	}

	return objects, nil
}

// GetNetworks returns all available networks.
// generator: network GetMany
func GetNetworks(ctx context.Context, db dbtx, filters ...NetworkFilter) (_ []migration.Network, _err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	var err error

	// Result slice.
	objects := make([]migration.Network, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, networkObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"networkObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil && filter.Source != nil {
			args = append(args, []any{filter.Name, filter.Source}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, networkObjectsByNameAndSource)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"networkObjectsByNameAndSource\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(networkObjectsByNameAndSource)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"networkObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Source != nil && filter.Name == nil {
			args = append(args, []any{filter.Source}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, networkObjectsBySource)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"networkObjectsBySource\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(networkObjectsBySource)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"networkObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name != nil && filter.Source == nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, networkObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"networkObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(networkObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"networkObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name == nil && filter.Source == nil {
			return nil, fmt.Errorf("Cannot filter on empty NetworkFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getNetworks(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getNetworksRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"networks\" table: %w", err)
	}

	return objects, nil
}

// CreateNetwork adds a new network to the database.
// generator: network Create
func CreateNetwork(ctx context.Context, db dbtx, object migration.Network) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	args := make([]any, 6)

	// Populate the statement arguments.
	args[0] = object.Type
	args[1] = object.Name
	args[2] = object.Location
	args[3] = object.Source
	marshaledProperties, err := marshalJSON(object.Properties)
	if err != nil {
		return -1, err
	}

	args[4] = marshaledProperties
	marshaledConfig, err := marshalJSON(object.Config)
	if err != nil {
		return -1, err
	}

	args[5] = marshaledConfig

	// Prepared statement to use.
	stmt, err := Stmt(db, networkCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"networkCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	var sqliteErr sqlite3.Error
	if errors.As(err, &sqliteErr) {
		if sqliteErr.Code == sqlite3.ErrConstraint {
			return -1, ErrConflict
		}
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"networks\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"networks\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateNetwork updates the network matching the given key parameters.
// generator: network Update
func UpdateNetwork(ctx context.Context, db tx, name string, source string, object migration.Network) (_err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	id, err := GetNetworkID(ctx, db, name, source)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, networkUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"networkUpdate\" prepared statement: %w", err)
	}

	marshaledProperties, err := marshalJSON(object.Properties)
	if err != nil {
		return err
	}

	marshaledConfig, err := marshalJSON(object.Config)
	if err != nil {
		return err
	}

	result, err := stmt.Exec(object.Type, object.Name, object.Location, object.Source, marshaledProperties, marshaledConfig, id)
	if err != nil {
		return fmt.Errorf("Update \"networks\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// RenameNetwork renames the network matching the given key parameters.
// generator: network Rename
func RenameNetwork(ctx context.Context, db dbtx, name string, source string, to string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	stmt, err := Stmt(db, networkRename)
	if err != nil {
		return fmt.Errorf("Failed to get \"networkRename\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(to, name, source)
	if err != nil {
		return fmt.Errorf("Rename Network failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows failed: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query affected %d rows instead of 1", n)
	}

	return nil
}

// DeleteNetwork deletes the network matching the given key parameters.
// generator: network DeleteOne-by-Name-and-Source
func DeleteNetwork(ctx context.Context, db dbtx, name string, source string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Network")
	}()

	stmt, err := Stmt(db, networkDeleteByNameAndSource)
	if err != nil {
		return fmt.Errorf("Failed to get \"networkDeleteByNameAndSource\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name, source)
	if err != nil {
		return fmt.Errorf("Delete \"networks\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Network rows instead of 1", n)
	}

	return nil
}
