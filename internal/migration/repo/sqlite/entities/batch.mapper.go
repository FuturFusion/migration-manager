// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/migration-manager/internal/migration"
)

var batchObjects = RegisterStmt(`
SELECT batches.id, batches.name, batches.status, batches.status_message, batches.include_expression, batches.start_date, batches.default_target, batches.default_target_project, batches.default_storage_pool, batches.rerun_scriptlets, batches.placement_scriptlet, batches.post_migration_retries, batches.constraints, batches.restriction_overrides
  FROM batches
  ORDER BY batches.name
`)

var batchObjectsByID = RegisterStmt(`
SELECT batches.id, batches.name, batches.status, batches.status_message, batches.include_expression, batches.start_date, batches.default_target, batches.default_target_project, batches.default_storage_pool, batches.rerun_scriptlets, batches.placement_scriptlet, batches.post_migration_retries, batches.constraints, batches.restriction_overrides
  FROM batches
  WHERE ( batches.id = ? )
  ORDER BY batches.name
`)

var batchObjectsByName = RegisterStmt(`
SELECT batches.id, batches.name, batches.status, batches.status_message, batches.include_expression, batches.start_date, batches.default_target, batches.default_target_project, batches.default_storage_pool, batches.rerun_scriptlets, batches.placement_scriptlet, batches.post_migration_retries, batches.constraints, batches.restriction_overrides
  FROM batches
  WHERE ( batches.name = ? )
  ORDER BY batches.name
`)

var batchObjectsByStatus = RegisterStmt(`
SELECT batches.id, batches.name, batches.status, batches.status_message, batches.include_expression, batches.start_date, batches.default_target, batches.default_target_project, batches.default_storage_pool, batches.rerun_scriptlets, batches.placement_scriptlet, batches.post_migration_retries, batches.constraints, batches.restriction_overrides
  FROM batches
  WHERE ( batches.status = ? )
  ORDER BY batches.name
`)

var batchNames = RegisterStmt(`
SELECT batches.name
  FROM batches
  ORDER BY batches.name
`)

var batchNamesByStatus = RegisterStmt(`
SELECT batches.name
  FROM batches
  WHERE ( batches.status = ? )
  ORDER BY batches.name
`)

var batchID = RegisterStmt(`
SELECT batches.id FROM batches
  WHERE batches.name = ?
`)

var batchCreate = RegisterStmt(`
INSERT INTO batches (name, status, status_message, include_expression, start_date, default_target, default_target_project, default_storage_pool, rerun_scriptlets, placement_scriptlet, post_migration_retries, constraints, restriction_overrides)
  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`)

var batchUpdate = RegisterStmt(`
UPDATE batches
  SET name = ?, status = ?, status_message = ?, include_expression = ?, start_date = ?, default_target = ?, default_target_project = ?, default_storage_pool = ?, rerun_scriptlets = ?, placement_scriptlet = ?, post_migration_retries = ?, constraints = ?, restriction_overrides = ?
 WHERE id = ?
`)

var batchRename = RegisterStmt(`
UPDATE batches SET name = ? WHERE name = ?
`)

var batchDeleteByName = RegisterStmt(`
DELETE FROM batches WHERE name = ?
`)

// GetBatchID return the ID of the batch with the given key.
// generator: batch ID
func GetBatchID(ctx context.Context, db tx, name string) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	stmt, err := Stmt(db, batchID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"batchID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"batches\" ID: %w", err)
	}

	return id, nil
}

// BatchExists checks if a batch with the given key exists.
// generator: batch Exists
func BatchExists(ctx context.Context, db dbtx, name string) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	stmt, err := Stmt(db, batchID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"batchID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"batches\" ID: %w", err)
	}

	return true, nil
}

// GetBatch returns the batch with the given key.
// generator: batch GetOne
func GetBatch(ctx context.Context, db dbtx, name string) (_ *migration.Batch, _err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	filter := BatchFilter{}
	filter.Name = &name

	objects, err := GetBatches(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"batches\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"batches\" entry matches")
	}
}

// batchColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Batch entity.
func batchColumns() string {
	return "batches.id, batches.name, batches.status, batches.status_message, batches.include_expression, batches.start_date, batches.default_target, batches.default_target_project, batches.default_storage_pool, batches.rerun_scriptlets, batches.placement_scriptlet, batches.post_migration_retries, batches.constraints, batches.restriction_overrides"
}

// getBatches can be used to run handwritten sql.Stmts to return a slice of objects.
func getBatches(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.Batch, error) {
	objects := make([]migration.Batch, 0)

	dest := func(scan func(dest ...any) error) error {
		b := migration.Batch{}
		var constraintsStr string
		var restrictionOverridesStr string
		err := scan(&b.ID, &b.Name, &b.Status, &b.StatusMessage, &b.IncludeExpression, &b.StartDate, &b.DefaultTarget, &b.DefaultTargetProject, &b.DefaultStoragePool, &b.RerunScriptlets, &b.PlacementScriptlet, &b.PostMigrationRetries, &constraintsStr, &restrictionOverridesStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(constraintsStr, &b.Constraints)
		if err != nil {
			return err
		}

		err = unmarshalJSON(restrictionOverridesStr, &b.RestrictionOverrides)
		if err != nil {
			return err
		}

		objects = append(objects, b)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"batches\" table: %w", err)
	}

	return objects, nil
}

// getBatchesRaw can be used to run handwritten query strings to return a slice of objects.
func getBatchesRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.Batch, error) {
	objects := make([]migration.Batch, 0)

	dest := func(scan func(dest ...any) error) error {
		b := migration.Batch{}
		var constraintsStr string
		var restrictionOverridesStr string
		err := scan(&b.ID, &b.Name, &b.Status, &b.StatusMessage, &b.IncludeExpression, &b.StartDate, &b.DefaultTarget, &b.DefaultTargetProject, &b.DefaultStoragePool, &b.RerunScriptlets, &b.PlacementScriptlet, &b.PostMigrationRetries, &constraintsStr, &restrictionOverridesStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(constraintsStr, &b.Constraints)
		if err != nil {
			return err
		}

		err = unmarshalJSON(restrictionOverridesStr, &b.RestrictionOverrides)
		if err != nil {
			return err
		}

		objects = append(objects, b)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"batches\" table: %w", err)
	}

	return objects, nil
}

// GetBatches returns all available batches.
// generator: batch GetMany
func GetBatches(ctx context.Context, db dbtx, filters ...BatchFilter) (_ []migration.Batch, _err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	var err error

	// Result slice.
	objects := make([]migration.Batch, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, batchObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"batchObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Status != nil && filter.ID == nil && filter.Name == nil {
			args = append(args, []any{filter.Status}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, batchObjectsByStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"batchObjectsByStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(batchObjectsByStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"batchObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name != nil && filter.ID == nil && filter.Status == nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, batchObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"batchObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(batchObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"batchObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID != nil && filter.Name == nil && filter.Status == nil {
			args = append(args, []any{filter.ID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, batchObjectsByID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"batchObjectsByID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(batchObjectsByID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"batchObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Name == nil && filter.Status == nil {
			return nil, fmt.Errorf("Cannot filter on empty BatchFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getBatches(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getBatchesRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"batches\" table: %w", err)
	}

	return objects, nil
}

// GetBatchNames returns the identifying field of batch.
// generator: batch GetNames
func GetBatchNames(ctx context.Context, db dbtx, filters ...BatchFilter) (_ []string, _err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	var err error

	// Result slice.
	names := make([]string, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, batchNames)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"batchNames\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Status != nil && filter.ID == nil && filter.Name == nil {
			args = append(args, []any{filter.Status}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, batchNamesByStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"batchNamesByStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(batchNamesByStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"batchNames\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Name == nil && filter.Status == nil {
			return nil, fmt.Errorf("Cannot filter on empty BatchFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	var rows *sql.Rows
	if sqlStmt != nil {
		rows, err = sqlStmt.QueryContext(ctx, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		rows, err = db.QueryContext(ctx, queryStr, args...)
	}

	if err != nil {
		return nil, err
	}

	defer func() { _ = rows.Close() }()
	for rows.Next() {
		var identifier string
		err := rows.Scan(&identifier)
		if err != nil {
			return nil, err
		}

		names = append(names, identifier)
	}

	err = rows.Err()
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"batches\" table: %w", err)
	}

	return names, nil
}

// CreateBatch adds a new batch to the database.
// generator: batch Create
func CreateBatch(ctx context.Context, db dbtx, object migration.Batch) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	args := make([]any, 13)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.Status
	args[2] = object.StatusMessage
	args[3] = object.IncludeExpression
	args[4] = object.StartDate
	args[5] = object.DefaultTarget
	args[6] = object.DefaultTargetProject
	args[7] = object.DefaultStoragePool
	args[8] = object.RerunScriptlets
	args[9] = object.PlacementScriptlet
	args[10] = object.PostMigrationRetries
	marshaledConstraints, err := marshalJSON(object.Constraints)
	if err != nil {
		return -1, err
	}

	args[11] = marshaledConstraints
	marshaledRestrictionOverrides, err := marshalJSON(object.RestrictionOverrides)
	if err != nil {
		return -1, err
	}

	args[12] = marshaledRestrictionOverrides

	// Prepared statement to use.
	stmt, err := Stmt(db, batchCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"batchCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
		return -1, ErrConflict
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"batches\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"batches\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateBatch updates the batch matching the given key parameters.
// generator: batch Update
func UpdateBatch(ctx context.Context, db tx, name string, object migration.Batch) (_err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	id, err := GetBatchID(ctx, db, name)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, batchUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"batchUpdate\" prepared statement: %w", err)
	}

	marshaledConstraints, err := marshalJSON(object.Constraints)
	if err != nil {
		return err
	}

	marshaledRestrictionOverrides, err := marshalJSON(object.RestrictionOverrides)
	if err != nil {
		return err
	}

	result, err := stmt.Exec(object.Name, object.Status, object.StatusMessage, object.IncludeExpression, object.StartDate, object.DefaultTarget, object.DefaultTargetProject, object.DefaultStoragePool, object.RerunScriptlets, object.PlacementScriptlet, object.PostMigrationRetries, marshaledConstraints, marshaledRestrictionOverrides, id)
	if err != nil {
		return fmt.Errorf("Update \"batches\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// RenameBatch renames the batch matching the given key parameters.
// generator: batch Rename
func RenameBatch(ctx context.Context, db dbtx, name string, to string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	stmt, err := Stmt(db, batchRename)
	if err != nil {
		return fmt.Errorf("Failed to get \"batchRename\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(to, name)
	if err != nil {
		return fmt.Errorf("Rename Batch failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows failed: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query affected %d rows instead of 1", n)
	}

	return nil
}

// DeleteBatch deletes the batch matching the given key parameters.
// generator: batch DeleteOne-by-Name
func DeleteBatch(ctx context.Context, db dbtx, name string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Batch")
	}()

	stmt, err := Stmt(db, batchDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"batchDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"batches\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Batch rows instead of 1", n)
	}

	return nil
}
