// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/google/uuid"
	"github.com/mattn/go-sqlite3"
)

var instanceObjects = RegisterStmt(`
SELECT instances.id, instances.uuid, instances.migration_status, instances.migration_status_string, instances.last_update_from_source, sources.name AS source, batches.name AS batch, instances.needs_disk_import, instances.secret_token, instances.properties
  FROM instances
  JOIN sources ON instances.source_id = sources.id
  LEFT JOIN batches ON instances.batch_id = batches.id
  ORDER BY instances.uuid
`)

var instanceObjectsByUUID = RegisterStmt(`
SELECT instances.id, instances.uuid, instances.migration_status, instances.migration_status_string, instances.last_update_from_source, sources.name AS source, batches.name AS batch, instances.needs_disk_import, instances.secret_token, instances.properties
  FROM instances
  JOIN sources ON instances.source_id = sources.id
  LEFT JOIN batches ON instances.batch_id = batches.id
  WHERE ( instances.uuid = ? )
  ORDER BY instances.uuid
`)

var instanceObjectsByBatch = RegisterStmt(`
SELECT instances.id, instances.uuid, instances.migration_status, instances.migration_status_string, instances.last_update_from_source, sources.name AS source, batches.name AS batch, instances.needs_disk_import, instances.secret_token, instances.properties
  FROM instances
  JOIN sources ON instances.source_id = sources.id
  LEFT JOIN batches ON instances.batch_id = batches.id
  WHERE ( batch = ? )
  ORDER BY instances.uuid
`)

var instanceObjectsByMigrationStatus = RegisterStmt(`
SELECT instances.id, instances.uuid, instances.migration_status, instances.migration_status_string, instances.last_update_from_source, sources.name AS source, batches.name AS batch, instances.needs_disk_import, instances.secret_token, instances.properties
  FROM instances
  JOIN sources ON instances.source_id = sources.id
  LEFT JOIN batches ON instances.batch_id = batches.id
  WHERE ( instances.migration_status = ? )
  ORDER BY instances.uuid
`)

var instanceObjectsByBatchAndMigrationStatus = RegisterStmt(`
SELECT instances.id, instances.uuid, instances.migration_status, instances.migration_status_string, instances.last_update_from_source, sources.name AS source, batches.name AS batch, instances.needs_disk_import, instances.secret_token, instances.properties
  FROM instances
  JOIN sources ON instances.source_id = sources.id
  LEFT JOIN batches ON instances.batch_id = batches.id
  WHERE ( batch = ? AND instances.migration_status = ? )
  ORDER BY instances.uuid
`)

var instanceObjectsBySource = RegisterStmt(`
SELECT instances.id, instances.uuid, instances.migration_status, instances.migration_status_string, instances.last_update_from_source, sources.name AS source, batches.name AS batch, instances.needs_disk_import, instances.secret_token, instances.properties
  FROM instances
  JOIN sources ON instances.source_id = sources.id
  LEFT JOIN batches ON instances.batch_id = batches.id
  WHERE ( source = ? )
  ORDER BY instances.uuid
`)

var instanceNames = RegisterStmt(`
SELECT instances.uuid
  FROM instances
  ORDER BY instances.uuid
`)

var instanceNamesByUUID = RegisterStmt(`
SELECT instances.uuid
  FROM instances
  WHERE ( instances.uuid = ? )
  ORDER BY instances.uuid
`)

var instanceNamesByBatch = RegisterStmt(`
SELECT instances.uuid
  FROM instances
  LEFT JOIN batches ON instances.batch_id = batches.id
  WHERE ( batches.name = ? )
  ORDER BY instances.uuid
`)

var instanceNamesByMigrationStatus = RegisterStmt(`
SELECT instances.uuid
  FROM instances
  WHERE ( instances.migration_status = ? )
  ORDER BY instances.uuid
`)

var instanceNamesByBatchAndMigrationStatus = RegisterStmt(`
SELECT instances.uuid
  FROM instances
  LEFT JOIN batches ON instances.batch_id = batches.id
  WHERE ( batches.name = ? AND instances.migration_status = ? )
  ORDER BY instances.uuid
`)

var instanceID = RegisterStmt(`
SELECT instances.id FROM instances
  WHERE instances.uuid = ?
`)

var instanceCreate = RegisterStmt(`
INSERT INTO instances (uuid, migration_status, migration_status_string, last_update_from_source, source_id, batch_id, needs_disk_import, secret_token, properties)
  VALUES (?, ?, ?, ?, (SELECT sources.id FROM sources WHERE sources.name = ?), (SELECT batches.id FROM batches WHERE batches.name = ?), ?, ?, ?)
`)

var instanceUpdate = RegisterStmt(`
UPDATE instances
  SET uuid = ?, migration_status = ?, migration_status_string = ?, last_update_from_source = ?, source_id = (SELECT sources.id FROM sources WHERE sources.name = ?), batch_id = (SELECT batches.id FROM batches WHERE batches.name = ?), needs_disk_import = ?, secret_token = ?, properties = ?
 WHERE id = ?
`)

var instanceDeleteByUUID = RegisterStmt(`
DELETE FROM instances WHERE uuid = ?
`)

// GetInstanceID return the ID of the instance with the given key.
// generator: instance ID
func GetInstanceID(ctx context.Context, db tx, uuid uuid.UUID) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Instance")
	}()

	stmt, err := Stmt(db, instanceID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"instanceID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, uuid)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"instances\" ID: %w", err)
	}

	return id, nil
}

// GetInstance returns the instance with the given key.
// generator: instance GetOne
func GetInstance(ctx context.Context, db dbtx, uuid uuid.UUID) (_ *migration.Instance, _err error) {
	defer func() {
		_err = mapErr(_err, "Instance")
	}()

	filter := InstanceFilter{}
	filter.UUID = &uuid

	objects, err := GetInstances(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"instances\" entry matches")
	}
}

// instanceColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Instance entity.
func instanceColumns() string {
	return "instances.id, instances.uuid, instances.migration_status, instances.migration_status_string, instances.last_update_from_source, sources.name AS source, batches.name AS batch, instances.needs_disk_import, instances.secret_token, instances.properties"
}

// getInstances can be used to run handwritten sql.Stmts to return a slice of objects.
func getInstances(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.Instance, error) {
	objects := make([]migration.Instance, 0)

	dest := func(scan func(dest ...any) error) error {
		i := migration.Instance{}
		var propertiesStr string
		err := scan(&i.ID, &i.UUID, &i.MigrationStatus, &i.MigrationStatusString, &i.LastUpdateFromSource, &i.Source, &i.Batch, &i.NeedsDiskImport, &i.SecretToken, &propertiesStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(propertiesStr, &i.Properties)
		if err != nil {
			return err
		}

		objects = append(objects, i)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances\" table: %w", err)
	}

	return objects, nil
}

// getInstancesRaw can be used to run handwritten query strings to return a slice of objects.
func getInstancesRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.Instance, error) {
	objects := make([]migration.Instance, 0)

	dest := func(scan func(dest ...any) error) error {
		i := migration.Instance{}
		var propertiesStr string
		err := scan(&i.ID, &i.UUID, &i.MigrationStatus, &i.MigrationStatusString, &i.LastUpdateFromSource, &i.Source, &i.Batch, &i.NeedsDiskImport, &i.SecretToken, &propertiesStr)
		if err != nil {
			return err
		}

		err = unmarshalJSON(propertiesStr, &i.Properties)
		if err != nil {
			return err
		}

		objects = append(objects, i)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances\" table: %w", err)
	}

	return objects, nil
}

// GetInstances returns all available instances.
// generator: instance GetMany
func GetInstances(ctx context.Context, db dbtx, filters ...InstanceFilter) (_ []migration.Instance, _err error) {
	defer func() {
		_err = mapErr(_err, "Instance")
	}()

	var err error

	// Result slice.
	objects := make([]migration.Instance, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, instanceObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"instanceObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Batch != nil && filter.MigrationStatus != nil && filter.UUID == nil && filter.Source == nil {
			args = append(args, []any{filter.Batch, filter.MigrationStatus}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceObjectsByBatchAndMigrationStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceObjectsByBatchAndMigrationStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceObjectsByBatchAndMigrationStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.UUID != nil && filter.Batch == nil && filter.MigrationStatus == nil && filter.Source == nil {
			args = append(args, []any{filter.UUID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceObjectsByUUID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceObjectsByUUID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceObjectsByUUID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Source != nil && filter.UUID == nil && filter.Batch == nil && filter.MigrationStatus == nil {
			args = append(args, []any{filter.Source}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceObjectsBySource)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceObjectsBySource\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceObjectsBySource)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.MigrationStatus != nil && filter.UUID == nil && filter.Batch == nil && filter.Source == nil {
			args = append(args, []any{filter.MigrationStatus}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceObjectsByMigrationStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceObjectsByMigrationStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceObjectsByMigrationStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Batch != nil && filter.UUID == nil && filter.MigrationStatus == nil && filter.Source == nil {
			args = append(args, []any{filter.Batch}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceObjectsByBatch)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceObjectsByBatch\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceObjectsByBatch)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.UUID == nil && filter.Batch == nil && filter.MigrationStatus == nil && filter.Source == nil {
			return nil, fmt.Errorf("Cannot filter on empty InstanceFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getInstances(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getInstancesRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances\" table: %w", err)
	}

	return objects, nil
}

// GetInstanceNames returns the identifying field of instance.
// generator: instance GetNames
func GetInstanceNames(ctx context.Context, db dbtx, filters ...InstanceFilter) (_ []uuid.UUID, _err error) {
	defer func() {
		_err = mapErr(_err, "Instance")
	}()

	var err error

	// Result slice.
	names := make([]uuid.UUID, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, instanceNames)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"instanceNames\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Batch != nil && filter.MigrationStatus != nil && filter.UUID == nil && filter.Source == nil {
			args = append(args, []any{filter.Batch, filter.MigrationStatus}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceNamesByBatchAndMigrationStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceNamesByBatchAndMigrationStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceNamesByBatchAndMigrationStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceNames\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.UUID != nil && filter.Batch == nil && filter.MigrationStatus == nil && filter.Source == nil {
			args = append(args, []any{filter.UUID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceNamesByUUID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceNamesByUUID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceNamesByUUID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceNames\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.MigrationStatus != nil && filter.UUID == nil && filter.Batch == nil && filter.Source == nil {
			args = append(args, []any{filter.MigrationStatus}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceNamesByMigrationStatus)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceNamesByMigrationStatus\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceNamesByMigrationStatus)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceNames\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Batch != nil && filter.UUID == nil && filter.MigrationStatus == nil && filter.Source == nil {
			args = append(args, []any{filter.Batch}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, instanceNamesByBatch)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"instanceNamesByBatch\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(instanceNamesByBatch)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"instanceNames\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.UUID == nil && filter.Batch == nil && filter.MigrationStatus == nil && filter.Source == nil {
			return nil, fmt.Errorf("Cannot filter on empty InstanceFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	var rows *sql.Rows
	if sqlStmt != nil {
		rows, err = sqlStmt.QueryContext(ctx, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		rows, err = db.QueryContext(ctx, queryStr, args...)
	}

	if err != nil {
		return nil, err
	}

	defer func() { _ = rows.Close() }()
	for rows.Next() {
		var identifier uuid.UUID
		err := rows.Scan(&identifier)
		if err != nil {
			return nil, err
		}

		names = append(names, identifier)
	}

	err = rows.Err()
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances\" table: %w", err)
	}

	return names, nil
}

// CreateInstance adds a new instance to the database.
// generator: instance Create
func CreateInstance(ctx context.Context, db dbtx, object migration.Instance) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Instance")
	}()

	args := make([]any, 9)

	// Populate the statement arguments.
	args[0] = object.UUID
	args[1] = object.MigrationStatus
	args[2] = object.MigrationStatusString
	args[3] = object.LastUpdateFromSource
	args[4] = object.Source
	args[5] = object.Batch
	args[6] = object.NeedsDiskImport
	args[7] = object.SecretToken
	marshaledProperties, err := marshalJSON(object.Properties)
	if err != nil {
		return -1, err
	}

	args[8] = marshaledProperties

	// Prepared statement to use.
	stmt, err := Stmt(db, instanceCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"instanceCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	var sqliteErr sqlite3.Error
	if errors.As(err, &sqliteErr) {
		if sqliteErr.Code == sqlite3.ErrConstraint {
			return -1, ErrConflict
		}
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"instances\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"instances\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateInstance updates the instance matching the given key parameters.
// generator: instance Update
func UpdateInstance(ctx context.Context, db tx, uuid uuid.UUID, object migration.Instance) (_err error) {
	defer func() {
		_err = mapErr(_err, "Instance")
	}()

	id, err := GetInstanceID(ctx, db, uuid)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, instanceUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"instanceUpdate\" prepared statement: %w", err)
	}

	marshaledProperties, err := marshalJSON(object.Properties)
	if err != nil {
		return err
	}

	result, err := stmt.Exec(object.UUID, object.MigrationStatus, object.MigrationStatusString, object.LastUpdateFromSource, object.Source, object.Batch, object.NeedsDiskImport, object.SecretToken, marshaledProperties, id)
	if err != nil {
		return fmt.Errorf("Update \"instances\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteInstance deletes the instance matching the given key parameters.
// generator: instance DeleteOne-by-UUID
func DeleteInstance(ctx context.Context, db dbtx, uuid uuid.UUID) (_err error) {
	defer func() {
		_err = mapErr(_err, "Instance")
	}()

	stmt, err := Stmt(db, instanceDeleteByUUID)
	if err != nil {
		return fmt.Errorf("Failed to get \"instanceDeleteByUUID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(uuid)
	if err != nil {
		return fmt.Errorf("Delete \"instances\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Instance rows instead of 1", n)
	}

	return nil
}
