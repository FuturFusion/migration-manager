// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/mattn/go-sqlite3"
)

var migrationWindowObjects = RegisterStmt(`
SELECT migration_windows.id, migration_windows.start, migration_windows.end, migration_windows.lockout
  FROM migration_windows
  ORDER BY migration_windows.start, migration_windows.end, migration_windows.lockout
`)

var migrationWindowObjectsByStartAndEndAndLockout = RegisterStmt(`
SELECT migration_windows.id, migration_windows.start, migration_windows.end, migration_windows.lockout
  FROM migration_windows
  WHERE ( migration_windows.start = ? AND migration_windows.end = ? AND migration_windows.lockout = ? )
  ORDER BY migration_windows.start, migration_windows.end, migration_windows.lockout
`)

var migrationWindowID = RegisterStmt(`
SELECT migration_windows.id FROM migration_windows
  WHERE migration_windows.start = ? AND migration_windows.end = ? AND migration_windows.lockout = ?
`)

var migrationWindowCreate = RegisterStmt(`
INSERT INTO migration_windows (start, end, lockout)
  VALUES (?, ?, ?)
`)

var migrationWindowUpdate = RegisterStmt(`
UPDATE migration_windows
  SET start = ?, end = ?, lockout = ?
 WHERE id = ?
`)

var migrationWindowDeleteByStartAndEndAndLockout = RegisterStmt(`
DELETE FROM migration_windows WHERE start = ? AND end = ? AND lockout = ?
`)

// GetMigrationWindowID return the ID of the migration_window with the given key.
// generator: migration_window ID
func GetMigrationWindowID(ctx context.Context, db tx, start time.Time, end time.Time, lockout time.Time) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Migration_window")
	}()

	stmt, err := Stmt(db, migrationWindowID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"migrationWindowID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, start, end, lockout)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"migration_windows\" ID: %w", err)
	}

	return id, nil
}

// GetMigrationWindow returns the migration_window with the given key.
// generator: migration_window GetOne
func GetMigrationWindow(ctx context.Context, db dbtx, start time.Time, end time.Time, lockout time.Time) (_ *migration.MigrationWindow, _err error) {
	defer func() {
		_err = mapErr(_err, "Migration_window")
	}()

	filter := MigrationWindowFilter{}
	filter.Start = &start
	filter.End = &end
	filter.Lockout = &lockout

	objects, err := GetMigrationWindows(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"migration_windows\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"migration_windows\" entry matches")
	}
}

// migrationWindowColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the MigrationWindow entity.
func migrationWindowColumns() string {
	return "migration_windows.id, migration_windows.start, migration_windows.end, migration_windows.lockout"
}

// getMigrationWindows can be used to run handwritten sql.Stmts to return a slice of objects.
func getMigrationWindows(ctx context.Context, stmt *sql.Stmt, args ...any) ([]migration.MigrationWindow, error) {
	objects := make([]migration.MigrationWindow, 0)

	dest := func(scan func(dest ...any) error) error {
		m := migration.MigrationWindow{}
		err := scan(&m.ID, &m.Start, &m.End, &m.Lockout)
		if err != nil {
			return err
		}

		objects = append(objects, m)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"migration_windows\" table: %w", err)
	}

	return objects, nil
}

// getMigrationWindowsRaw can be used to run handwritten query strings to return a slice of objects.
func getMigrationWindowsRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]migration.MigrationWindow, error) {
	objects := make([]migration.MigrationWindow, 0)

	dest := func(scan func(dest ...any) error) error {
		m := migration.MigrationWindow{}
		err := scan(&m.ID, &m.Start, &m.End, &m.Lockout)
		if err != nil {
			return err
		}

		objects = append(objects, m)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"migration_windows\" table: %w", err)
	}

	return objects, nil
}

// GetMigrationWindows returns all available migration_windows.
// generator: migration_window GetMany
func GetMigrationWindows(ctx context.Context, db dbtx, filters ...MigrationWindowFilter) (_ []migration.MigrationWindow, _err error) {
	defer func() {
		_err = mapErr(_err, "Migration_window")
	}()

	var err error

	// Result slice.
	objects := make([]migration.MigrationWindow, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, migrationWindowObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"migrationWindowObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Start != nil && filter.End != nil && filter.Lockout != nil && filter.ID == nil {
			args = append(args, []any{filter.Start, filter.End, filter.Lockout}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, migrationWindowObjectsByStartAndEndAndLockout)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"migrationWindowObjectsByStartAndEndAndLockout\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(migrationWindowObjectsByStartAndEndAndLockout)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"migrationWindowObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Start == nil && filter.End == nil && filter.Lockout == nil {
			return nil, fmt.Errorf("Cannot filter on empty MigrationWindowFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getMigrationWindows(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getMigrationWindowsRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"migration_windows\" table: %w", err)
	}

	return objects, nil
}

// CreateMigrationWindow adds a new migration_window to the database.
// generator: migration_window Create
func CreateMigrationWindow(ctx context.Context, db dbtx, object migration.MigrationWindow) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Migration_window")
	}()

	args := make([]any, 3)

	// Populate the statement arguments.
	args[0] = object.Start
	args[1] = object.End
	args[2] = object.Lockout

	// Prepared statement to use.
	stmt, err := Stmt(db, migrationWindowCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"migrationWindowCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	var sqliteErr sqlite3.Error
	if errors.As(err, &sqliteErr) {
		if sqliteErr.Code == sqlite3.ErrConstraint {
			return -1, ErrConflict
		}
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"migration_windows\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"migration_windows\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateMigrationWindow updates the migration_window matching the given key parameters.
// generator: migration_window Update
func UpdateMigrationWindow(ctx context.Context, db tx, start time.Time, end time.Time, lockout time.Time, object migration.MigrationWindow) (_err error) {
	defer func() {
		_err = mapErr(_err, "Migration_window")
	}()

	id, err := GetMigrationWindowID(ctx, db, start, end, lockout)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, migrationWindowUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"migrationWindowUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Start, object.End, object.Lockout, id)
	if err != nil {
		return fmt.Errorf("Update \"migration_windows\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteMigrationWindow deletes the migration_window matching the given key parameters.
// generator: migration_window DeleteOne-by-Start-and-End-and-Lockout
func DeleteMigrationWindow(ctx context.Context, db dbtx, start time.Time, end time.Time, lockout time.Time) (_err error) {
	defer func() {
		_err = mapErr(_err, "Migration_window")
	}()

	stmt, err := Stmt(db, migrationWindowDeleteByStartAndEndAndLockout)
	if err != nil {
		return fmt.Errorf("Failed to get \"migrationWindowDeleteByStartAndEndAndLockout\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(start, end, lockout)
	if err != nil {
		return fmt.Errorf("Delete \"migration_windows\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d MigrationWindow rows instead of 1", n)
	}

	return nil
}
