// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceMigration "github.com/FuturFusion/migration-manager/internal/migration"
)

// SourceRepoWithSlog implements _sourceMigration.SourceRepo that is instrumented with slog logger
type SourceRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceMigration.SourceRepo
}

// NewSourceRepoWithSlog instruments an implementation of the _sourceMigration.SourceRepo with simple logging
func NewSourceRepoWithSlog(base _sourceMigration.SourceRepo, log *slog.Logger) SourceRepoWithSlog {
	return SourceRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceMigration.SourceRepo
func (_d SourceRepoWithSlog) Create(ctx context.Context, source _sourceMigration.Source) (i1 int64, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("source", source),
	).Debug("SourceRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Int64("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("SourceRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, source)
}

// DeleteByName implements _sourceMigration.SourceRepo
func (_d SourceRepoWithSlog) DeleteByName(ctx context.Context, name string) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("name", name),
	).Debug("SourceRepoWithSlog: calling DeleteByName")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceRepoWithSlog: method DeleteByName returned an error")
		} else {
			log.Debug("SourceRepoWithSlog: method DeleteByName finished")
		}
	}()
	return _d._base.DeleteByName(ctx, name)
}

// GetAll implements _sourceMigration.SourceRepo
func (_d SourceRepoWithSlog) GetAll(ctx context.Context) (s1 _sourceMigration.Sources, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("SourceRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("SourceRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllNames implements _sourceMigration.SourceRepo
func (_d SourceRepoWithSlog) GetAllNames(ctx context.Context) (sa1 []string, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("SourceRepoWithSlog: calling GetAllNames")
	defer func() {
		log := _d._log.With(
			slog.Any("sa1", sa1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceRepoWithSlog: method GetAllNames returned an error")
		} else {
			log.Debug("SourceRepoWithSlog: method GetAllNames finished")
		}
	}()
	return _d._base.GetAllNames(ctx)
}

// GetByName implements _sourceMigration.SourceRepo
func (_d SourceRepoWithSlog) GetByName(ctx context.Context, name string) (sp1 *_sourceMigration.Source, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("name", name),
	).Debug("SourceRepoWithSlog: calling GetByName")
	defer func() {
		log := _d._log.With(
			slog.Any("sp1", sp1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceRepoWithSlog: method GetByName returned an error")
		} else {
			log.Debug("SourceRepoWithSlog: method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}

// Rename implements _sourceMigration.SourceRepo
func (_d SourceRepoWithSlog) Rename(ctx context.Context, oldName string, newName string) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("oldName", oldName),
		slog.String("newName", newName),
	).Debug("SourceRepoWithSlog: calling Rename")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceRepoWithSlog: method Rename returned an error")
		} else {
			log.Debug("SourceRepoWithSlog: method Rename finished")
		}
	}()
	return _d._base.Rename(ctx, oldName, newName)
}

// Update implements _sourceMigration.SourceRepo
func (_d SourceRepoWithSlog) Update(ctx context.Context, source _sourceMigration.Source) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("source", source),
	).Debug("SourceRepoWithSlog: calling Update")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceRepoWithSlog: method Update returned an error")
		} else {
			log.Debug("SourceRepoWithSlog: method Update finished")
		}
	}()
	return _d._base.Update(ctx, source)
}
