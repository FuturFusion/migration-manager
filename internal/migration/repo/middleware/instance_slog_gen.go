// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceMigration "github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// InstanceRepoWithSlog implements _sourceMigration.InstanceRepo that is instrumented with slog logger
type InstanceRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceMigration.InstanceRepo
}

// NewInstanceRepoWithSlog instruments an implementation of the _sourceMigration.InstanceRepo with simple logging
func NewInstanceRepoWithSlog(base _sourceMigration.InstanceRepo, log *slog.Logger) InstanceRepoWithSlog {
	return InstanceRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) Create(ctx context.Context, instance _sourceMigration.Instance) (i1 _sourceMigration.Instance, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("instance", instance),
	).Debug("InstanceRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, instance)
}

// CreateOverrides implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) CreateOverrides(ctx context.Context, overrides _sourceMigration.Overrides) (o1 _sourceMigration.Overrides, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("overrides", overrides),
	).Debug("InstanceRepoWithSlog: calling CreateOverrides")
	defer func() {
		log := _d._log.With(
			slog.Any("o1", o1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method CreateOverrides returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method CreateOverrides finished")
		}
	}()
	return _d._base.CreateOverrides(ctx, overrides)
}

// DeleteByID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) DeleteByID(ctx context.Context, id uuid.UUID) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("InstanceRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// DeleteOverridesByID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) DeleteOverridesByID(ctx context.Context, id uuid.UUID) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("InstanceRepoWithSlog: calling DeleteOverridesByID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method DeleteOverridesByID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method DeleteOverridesByID finished")
		}
	}()
	return _d._base.DeleteOverridesByID(ctx, id)
}

// GetAll implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) GetAll(ctx context.Context) (i1 _sourceMigration.Instances, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("InstanceRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllByBatchID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) GetAllByBatchID(ctx context.Context, batchID int) (i1 _sourceMigration.Instances, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("batchID", batchID),
	).Debug("InstanceRepoWithSlog: calling GetAllByBatchID")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method GetAllByBatchID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method GetAllByBatchID finished")
		}
	}()
	return _d._base.GetAllByBatchID(ctx, batchID)
}

// GetAllByState implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) GetAllByState(ctx context.Context, status api.MigrationStatusType) (i1 _sourceMigration.Instances, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("status", status),
	).Debug("InstanceRepoWithSlog: calling GetAllByState")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method GetAllByState returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method GetAllByState finished")
		}
	}()
	return _d._base.GetAllByState(ctx, status)
}

// GetAllUUIDs implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) GetAllUUIDs(ctx context.Context) (ua1 []uuid.UUID, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("InstanceRepoWithSlog: calling GetAllUUIDs")
	defer func() {
		log := _d._log.With(
			slog.Any("ua1", ua1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method GetAllUUIDs returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method GetAllUUIDs finished")
		}
	}()
	return _d._base.GetAllUUIDs(ctx)
}

// GetAllUnassigned implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) GetAllUnassigned(ctx context.Context) (i1 _sourceMigration.Instances, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("InstanceRepoWithSlog: calling GetAllUnassigned")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method GetAllUnassigned returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method GetAllUnassigned finished")
		}
	}()
	return _d._base.GetAllUnassigned(ctx)
}

// GetByID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) GetByID(ctx context.Context, id uuid.UUID) (i1 _sourceMigration.Instance, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("InstanceRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// GetOverridesByID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) GetOverridesByID(ctx context.Context, id uuid.UUID) (o1 _sourceMigration.Overrides, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("InstanceRepoWithSlog: calling GetOverridesByID")
	defer func() {
		log := _d._log.With(
			slog.Any("o1", o1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method GetOverridesByID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method GetOverridesByID finished")
		}
	}()
	return _d._base.GetOverridesByID(ctx, id)
}

// UpdateByID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) UpdateByID(ctx context.Context, instance _sourceMigration.Instance) (i1 _sourceMigration.Instance, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("instance", instance),
	).Debug("InstanceRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, instance)
}

// UpdateOverridesByID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) UpdateOverridesByID(ctx context.Context, overrides _sourceMigration.Overrides) (o1 _sourceMigration.Overrides, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("overrides", overrides),
	).Debug("InstanceRepoWithSlog: calling UpdateOverridesByID")
	defer func() {
		log := _d._log.With(
			slog.Any("o1", o1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method UpdateOverridesByID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method UpdateOverridesByID finished")
		}
	}()
	return _d._base.UpdateOverridesByID(ctx, overrides)
}

// UpdateStatusByUUID implements _sourceMigration.InstanceRepo
func (_d InstanceRepoWithSlog) UpdateStatusByUUID(ctx context.Context, id uuid.UUID, status api.MigrationStatusType, statusString string, needsDiskImport bool) (i1 _sourceMigration.Instance, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
		slog.Any("status", status),
		slog.String("statusString", statusString),
		slog.Bool("needsDiskImport", needsDiskImport),
	).Debug("InstanceRepoWithSlog: calling UpdateStatusByUUID")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceRepoWithSlog: method UpdateStatusByUUID returned an error")
		} else {
			log.Debug("InstanceRepoWithSlog: method UpdateStatusByUUID finished")
		}
	}()
	return _d._base.UpdateStatusByUUID(ctx, id, status, statusString, needsDiskImport)
}
