// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceMigration "github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// ArtifactRepoWithSlog implements _sourceMigration.ArtifactRepo that is instrumented with slog logger
type ArtifactRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceMigration.ArtifactRepo
}

// NewArtifactRepoWithSlog instruments an implementation of the _sourceMigration.ArtifactRepo with simple logging
func NewArtifactRepoWithSlog(base _sourceMigration.ArtifactRepo, log *slog.Logger) ArtifactRepoWithSlog {
	return ArtifactRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceMigration.ArtifactRepo
func (_d ArtifactRepoWithSlog) Create(ctx context.Context, artifact _sourceMigration.Artifact) (i1 int64, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("artifact", artifact),
	).Debug("ArtifactRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Int64("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ArtifactRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("ArtifactRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, artifact)
}

// DeleteByUUID implements _sourceMigration.ArtifactRepo
func (_d ArtifactRepoWithSlog) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("ArtifactRepoWithSlog: calling DeleteByUUID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ArtifactRepoWithSlog: method DeleteByUUID returned an error")
		} else {
			log.Debug("ArtifactRepoWithSlog: method DeleteByUUID finished")
		}
	}()
	return _d._base.DeleteByUUID(ctx, id)
}

// GetAll implements _sourceMigration.ArtifactRepo
func (_d ArtifactRepoWithSlog) GetAll(ctx context.Context) (a1 _sourceMigration.Artifacts, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("ArtifactRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("a1", a1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ArtifactRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("ArtifactRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllByType implements _sourceMigration.ArtifactRepo
func (_d ArtifactRepoWithSlog) GetAllByType(ctx context.Context, artType api.ArtifactType) (a1 _sourceMigration.Artifacts, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("artType", artType),
	).Debug("ArtifactRepoWithSlog: calling GetAllByType")
	defer func() {
		log := _d._log.With(
			slog.Any("a1", a1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ArtifactRepoWithSlog: method GetAllByType returned an error")
		} else {
			log.Debug("ArtifactRepoWithSlog: method GetAllByType finished")
		}
	}()
	return _d._base.GetAllByType(ctx, artType)
}

// GetByUUID implements _sourceMigration.ArtifactRepo
func (_d ArtifactRepoWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (ap1 *_sourceMigration.Artifact, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("ArtifactRepoWithSlog: calling GetByUUID")
	defer func() {
		log := _d._log.With(
			slog.Any("ap1", ap1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ArtifactRepoWithSlog: method GetByUUID returned an error")
		} else {
			log.Debug("ArtifactRepoWithSlog: method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// Update implements _sourceMigration.ArtifactRepo
func (_d ArtifactRepoWithSlog) Update(ctx context.Context, id uuid.UUID, artifact *_sourceMigration.Artifact) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
		slog.Any("artifact", artifact),
	).Debug("ArtifactRepoWithSlog: calling Update")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ArtifactRepoWithSlog: method Update returned an error")
		} else {
			log.Debug("ArtifactRepoWithSlog: method Update finished")
		}
	}()
	return _d._base.Update(ctx, id, artifact)
}
