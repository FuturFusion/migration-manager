// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceMigration "github.com/FuturFusion/migration-manager/internal/migration"
)

// NetworkRepoWithSlog implements _sourceMigration.NetworkRepo that is instrumented with slog logger
type NetworkRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceMigration.NetworkRepo
}

// NewNetworkRepoWithSlog instruments an implementation of the _sourceMigration.NetworkRepo with simple logging
func NewNetworkRepoWithSlog(base _sourceMigration.NetworkRepo, log *slog.Logger) NetworkRepoWithSlog {
	return NetworkRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceMigration.NetworkRepo
func (_d NetworkRepoWithSlog) Create(ctx context.Context, network _sourceMigration.Network) (i1 int64, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("network", network),
	).Debug("NetworkRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Int64("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("NetworkRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, network)
}

// DeleteByNameAndSource implements _sourceMigration.NetworkRepo
func (_d NetworkRepoWithSlog) DeleteByNameAndSource(ctx context.Context, name string, src string) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("name", name),
		slog.String("src", src),
	).Debug("NetworkRepoWithSlog: calling DeleteByNameAndSource")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkRepoWithSlog: method DeleteByNameAndSource returned an error")
		} else {
			log.Debug("NetworkRepoWithSlog: method DeleteByNameAndSource finished")
		}
	}()
	return _d._base.DeleteByNameAndSource(ctx, name, src)
}

// GetAll implements _sourceMigration.NetworkRepo
func (_d NetworkRepoWithSlog) GetAll(ctx context.Context) (n1 _sourceMigration.Networks, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("NetworkRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("NetworkRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllBySource implements _sourceMigration.NetworkRepo
func (_d NetworkRepoWithSlog) GetAllBySource(ctx context.Context, src string) (n1 _sourceMigration.Networks, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("src", src),
	).Debug("NetworkRepoWithSlog: calling GetAllBySource")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkRepoWithSlog: method GetAllBySource returned an error")
		} else {
			log.Debug("NetworkRepoWithSlog: method GetAllBySource finished")
		}
	}()
	return _d._base.GetAllBySource(ctx, src)
}

// GetByNameAndSource implements _sourceMigration.NetworkRepo
func (_d NetworkRepoWithSlog) GetByNameAndSource(ctx context.Context, name string, src string) (np1 *_sourceMigration.Network, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("name", name),
		slog.String("src", src),
	).Debug("NetworkRepoWithSlog: calling GetByNameAndSource")
	defer func() {
		log := _d._log.With(
			slog.Any("np1", np1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkRepoWithSlog: method GetByNameAndSource returned an error")
		} else {
			log.Debug("NetworkRepoWithSlog: method GetByNameAndSource finished")
		}
	}()
	return _d._base.GetByNameAndSource(ctx, name, src)
}

// RenameBySource implements _sourceMigration.NetworkRepo
func (_d NetworkRepoWithSlog) RenameBySource(ctx context.Context, oldName string, newName string, src string) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("oldName", oldName),
		slog.String("newName", newName),
		slog.String("src", src),
	).Debug("NetworkRepoWithSlog: calling RenameBySource")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkRepoWithSlog: method RenameBySource returned an error")
		} else {
			log.Debug("NetworkRepoWithSlog: method RenameBySource finished")
		}
	}()
	return _d._base.RenameBySource(ctx, oldName, newName, src)
}

// Update implements _sourceMigration.NetworkRepo
func (_d NetworkRepoWithSlog) Update(ctx context.Context, network _sourceMigration.Network) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("network", network),
	).Debug("NetworkRepoWithSlog: calling Update")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkRepoWithSlog: method Update returned an error")
		} else {
			log.Debug("NetworkRepoWithSlog: method Update finished")
		}
	}()
	return _d._base.Update(ctx, network)
}
