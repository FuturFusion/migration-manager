// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceMigration "github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// WarningRepoWithSlog implements _sourceMigration.WarningRepo that is instrumented with slog logger
type WarningRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceMigration.WarningRepo
}

// NewWarningRepoWithSlog instruments an implementation of the _sourceMigration.WarningRepo with simple logging
func NewWarningRepoWithSlog(base _sourceMigration.WarningRepo, log *slog.Logger) WarningRepoWithSlog {
	return WarningRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// DeleteByUUID implements _sourceMigration.WarningRepo
func (_d WarningRepoWithSlog) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("WarningRepoWithSlog: calling DeleteByUUID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("WarningRepoWithSlog: method DeleteByUUID returned an error")
		} else {
			log.Debug("WarningRepoWithSlog: method DeleteByUUID finished")
		}
	}()
	return _d._base.DeleteByUUID(ctx, id)
}

// GetAll implements _sourceMigration.WarningRepo
func (_d WarningRepoWithSlog) GetAll(ctx context.Context) (w1 _sourceMigration.Warnings, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("WarningRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("w1", w1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("WarningRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("WarningRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetByScopeAndType implements _sourceMigration.WarningRepo
func (_d WarningRepoWithSlog) GetByScopeAndType(ctx context.Context, scope api.WarningScope, wType api.WarningType) (w1 _sourceMigration.Warnings, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("scope", scope),
		slog.Any("wType", wType),
	).Debug("WarningRepoWithSlog: calling GetByScopeAndType")
	defer func() {
		log := _d._log.With(
			slog.Any("w1", w1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("WarningRepoWithSlog: method GetByScopeAndType returned an error")
		} else {
			log.Debug("WarningRepoWithSlog: method GetByScopeAndType finished")
		}
	}()
	return _d._base.GetByScopeAndType(ctx, scope, wType)
}

// GetByUUID implements _sourceMigration.WarningRepo
func (_d WarningRepoWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (wp1 *_sourceMigration.Warning, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("WarningRepoWithSlog: calling GetByUUID")
	defer func() {
		log := _d._log.With(
			slog.Any("wp1", wp1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("WarningRepoWithSlog: method GetByUUID returned an error")
		} else {
			log.Debug("WarningRepoWithSlog: method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// Update implements _sourceMigration.WarningRepo
func (_d WarningRepoWithSlog) Update(ctx context.Context, id uuid.UUID, w _sourceMigration.Warning) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
		slog.Any("w", w),
	).Debug("WarningRepoWithSlog: calling Update")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("WarningRepoWithSlog: method Update returned an error")
		} else {
			log.Debug("WarningRepoWithSlog: method Update finished")
		}
	}()
	return _d._base.Update(ctx, id, w)
}

// Upsert implements _sourceMigration.WarningRepo
func (_d WarningRepoWithSlog) Upsert(ctx context.Context, w _sourceMigration.Warning) (i1 int64, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("w", w),
	).Debug("WarningRepoWithSlog: calling Upsert")
	defer func() {
		log := _d._log.With(
			slog.Int64("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("WarningRepoWithSlog: method Upsert returned an error")
		} else {
			log.Debug("WarningRepoWithSlog: method Upsert finished")
		}
	}()
	return _d._base.Upsert(ctx, w)
}
