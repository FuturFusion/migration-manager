// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// Ensure, that ArtifactRepoMock does implement migration.ArtifactRepo.
// If this is not the case, regenerate this file with moq.
var _ migration.ArtifactRepo = &ArtifactRepoMock{}

// ArtifactRepoMock is a mock implementation of migration.ArtifactRepo.
//
//	func TestSomethingThatUsesArtifactRepo(t *testing.T) {
//
//		// make and configure a mocked migration.ArtifactRepo
//		mockedArtifactRepo := &ArtifactRepoMock{
//			CreateFunc: func(ctx context.Context, artifact migration.Artifact) (int64, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByUUID method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Artifacts, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByTypeFunc: func(ctx context.Context, artType api.ArtifactType) (migration.Artifacts, error) {
//				panic("mock out the GetAllByType method")
//			},
//			GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (*migration.Artifact, error) {
//				panic("mock out the GetByUUID method")
//			},
//			UpdateFunc: func(ctx context.Context, id uuid.UUID, artifact *migration.Artifact) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedArtifactRepo in code that requires migration.ArtifactRepo
//		// and then make assertions.
//
//	}
type ArtifactRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, artifact migration.Artifact) (int64, error)

	// DeleteByUUIDFunc mocks the DeleteByUUID method.
	DeleteByUUIDFunc func(ctx context.Context, id uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Artifacts, error)

	// GetAllByTypeFunc mocks the GetAllByType method.
	GetAllByTypeFunc func(ctx context.Context, artType api.ArtifactType) (migration.Artifacts, error)

	// GetByUUIDFunc mocks the GetByUUID method.
	GetByUUIDFunc func(ctx context.Context, id uuid.UUID) (*migration.Artifact, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id uuid.UUID, artifact *migration.Artifact) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Artifact is the artifact argument value.
			Artifact migration.Artifact
		}
		// DeleteByUUID holds details about calls to the DeleteByUUID method.
		DeleteByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByType holds details about calls to the GetAllByType method.
		GetAllByType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ArtType is the artType argument value.
			ArtType api.ArtifactType
		}
		// GetByUUID holds details about calls to the GetByUUID method.
		GetByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Artifact is the artifact argument value.
			Artifact *migration.Artifact
		}
	}
	lockCreate       sync.RWMutex
	lockDeleteByUUID sync.RWMutex
	lockGetAll       sync.RWMutex
	lockGetAllByType sync.RWMutex
	lockGetByUUID    sync.RWMutex
	lockUpdate       sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ArtifactRepoMock) Create(ctx context.Context, artifact migration.Artifact) (int64, error) {
	if mock.CreateFunc == nil {
		panic("ArtifactRepoMock.CreateFunc: method is nil but ArtifactRepo.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Artifact migration.Artifact
	}{
		Ctx:      ctx,
		Artifact: artifact,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, artifact)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedArtifactRepo.CreateCalls())
func (mock *ArtifactRepoMock) CreateCalls() []struct {
	Ctx      context.Context
	Artifact migration.Artifact
} {
	var calls []struct {
		Ctx      context.Context
		Artifact migration.Artifact
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByUUID calls DeleteByUUIDFunc.
func (mock *ArtifactRepoMock) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByUUIDFunc == nil {
		panic("ArtifactRepoMock.DeleteByUUIDFunc: method is nil but ArtifactRepo.DeleteByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByUUID.Lock()
	mock.calls.DeleteByUUID = append(mock.calls.DeleteByUUID, callInfo)
	mock.lockDeleteByUUID.Unlock()
	return mock.DeleteByUUIDFunc(ctx, id)
}

// DeleteByUUIDCalls gets all the calls that were made to DeleteByUUID.
// Check the length with:
//
//	len(mockedArtifactRepo.DeleteByUUIDCalls())
func (mock *ArtifactRepoMock) DeleteByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByUUID.RLock()
	calls = mock.calls.DeleteByUUID
	mock.lockDeleteByUUID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ArtifactRepoMock) GetAll(ctx context.Context) (migration.Artifacts, error) {
	if mock.GetAllFunc == nil {
		panic("ArtifactRepoMock.GetAllFunc: method is nil but ArtifactRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedArtifactRepo.GetAllCalls())
func (mock *ArtifactRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByType calls GetAllByTypeFunc.
func (mock *ArtifactRepoMock) GetAllByType(ctx context.Context, artType api.ArtifactType) (migration.Artifacts, error) {
	if mock.GetAllByTypeFunc == nil {
		panic("ArtifactRepoMock.GetAllByTypeFunc: method is nil but ArtifactRepo.GetAllByType was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ArtType api.ArtifactType
	}{
		Ctx:     ctx,
		ArtType: artType,
	}
	mock.lockGetAllByType.Lock()
	mock.calls.GetAllByType = append(mock.calls.GetAllByType, callInfo)
	mock.lockGetAllByType.Unlock()
	return mock.GetAllByTypeFunc(ctx, artType)
}

// GetAllByTypeCalls gets all the calls that were made to GetAllByType.
// Check the length with:
//
//	len(mockedArtifactRepo.GetAllByTypeCalls())
func (mock *ArtifactRepoMock) GetAllByTypeCalls() []struct {
	Ctx     context.Context
	ArtType api.ArtifactType
} {
	var calls []struct {
		Ctx     context.Context
		ArtType api.ArtifactType
	}
	mock.lockGetAllByType.RLock()
	calls = mock.calls.GetAllByType
	mock.lockGetAllByType.RUnlock()
	return calls
}

// GetByUUID calls GetByUUIDFunc.
func (mock *ArtifactRepoMock) GetByUUID(ctx context.Context, id uuid.UUID) (*migration.Artifact, error) {
	if mock.GetByUUIDFunc == nil {
		panic("ArtifactRepoMock.GetByUUIDFunc: method is nil but ArtifactRepo.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByUUID.Lock()
	mock.calls.GetByUUID = append(mock.calls.GetByUUID, callInfo)
	mock.lockGetByUUID.Unlock()
	return mock.GetByUUIDFunc(ctx, id)
}

// GetByUUIDCalls gets all the calls that were made to GetByUUID.
// Check the length with:
//
//	len(mockedArtifactRepo.GetByUUIDCalls())
func (mock *ArtifactRepoMock) GetByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByUUID.RLock()
	calls = mock.calls.GetByUUID
	mock.lockGetByUUID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ArtifactRepoMock) Update(ctx context.Context, id uuid.UUID, artifact *migration.Artifact) error {
	if mock.UpdateFunc == nil {
		panic("ArtifactRepoMock.UpdateFunc: method is nil but ArtifactRepo.Update was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ID       uuid.UUID
		Artifact *migration.Artifact
	}{
		Ctx:      ctx,
		ID:       id,
		Artifact: artifact,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, artifact)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedArtifactRepo.UpdateCalls())
func (mock *ArtifactRepoMock) UpdateCalls() []struct {
	Ctx      context.Context
	ID       uuid.UUID
	Artifact *migration.Artifact
} {
	var calls []struct {
		Ctx      context.Context
		ID       uuid.UUID
		Artifact *migration.Artifact
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
