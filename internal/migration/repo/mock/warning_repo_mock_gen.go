// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// Ensure, that WarningRepoMock does implement migration.WarningRepo.
// If this is not the case, regenerate this file with moq.
var _ migration.WarningRepo = &WarningRepoMock{}

// WarningRepoMock is a mock implementation of migration.WarningRepo.
//
//	func TestSomethingThatUsesWarningRepo(t *testing.T) {
//
//		// make and configure a mocked migration.WarningRepo
//		mockedWarningRepo := &WarningRepoMock{
//			DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByUUID method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Warnings, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByScopeAndTypeFunc: func(ctx context.Context, scope api.WarningScope, wType api.WarningType) (migration.Warnings, error) {
//				panic("mock out the GetByScopeAndType method")
//			},
//			GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (*migration.Warning, error) {
//				panic("mock out the GetByUUID method")
//			},
//			UpdateFunc: func(ctx context.Context, id uuid.UUID, w migration.Warning) error {
//				panic("mock out the Update method")
//			},
//			UpsertFunc: func(ctx context.Context, w migration.Warning) (int64, error) {
//				panic("mock out the Upsert method")
//			},
//		}
//
//		// use mockedWarningRepo in code that requires migration.WarningRepo
//		// and then make assertions.
//
//	}
type WarningRepoMock struct {
	// DeleteByUUIDFunc mocks the DeleteByUUID method.
	DeleteByUUIDFunc func(ctx context.Context, id uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Warnings, error)

	// GetByScopeAndTypeFunc mocks the GetByScopeAndType method.
	GetByScopeAndTypeFunc func(ctx context.Context, scope api.WarningScope, wType api.WarningType) (migration.Warnings, error)

	// GetByUUIDFunc mocks the GetByUUID method.
	GetByUUIDFunc func(ctx context.Context, id uuid.UUID) (*migration.Warning, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id uuid.UUID, w migration.Warning) error

	// UpsertFunc mocks the Upsert method.
	UpsertFunc func(ctx context.Context, w migration.Warning) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteByUUID holds details about calls to the DeleteByUUID method.
		DeleteByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByScopeAndType holds details about calls to the GetByScopeAndType method.
		GetByScopeAndType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Scope is the scope argument value.
			Scope api.WarningScope
			// WType is the wType argument value.
			WType api.WarningType
		}
		// GetByUUID holds details about calls to the GetByUUID method.
		GetByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// W is the w argument value.
			W migration.Warning
		}
		// Upsert holds details about calls to the Upsert method.
		Upsert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// W is the w argument value.
			W migration.Warning
		}
	}
	lockDeleteByUUID      sync.RWMutex
	lockGetAll            sync.RWMutex
	lockGetByScopeAndType sync.RWMutex
	lockGetByUUID         sync.RWMutex
	lockUpdate            sync.RWMutex
	lockUpsert            sync.RWMutex
}

// DeleteByUUID calls DeleteByUUIDFunc.
func (mock *WarningRepoMock) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByUUIDFunc == nil {
		panic("WarningRepoMock.DeleteByUUIDFunc: method is nil but WarningRepo.DeleteByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByUUID.Lock()
	mock.calls.DeleteByUUID = append(mock.calls.DeleteByUUID, callInfo)
	mock.lockDeleteByUUID.Unlock()
	return mock.DeleteByUUIDFunc(ctx, id)
}

// DeleteByUUIDCalls gets all the calls that were made to DeleteByUUID.
// Check the length with:
//
//	len(mockedWarningRepo.DeleteByUUIDCalls())
func (mock *WarningRepoMock) DeleteByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByUUID.RLock()
	calls = mock.calls.DeleteByUUID
	mock.lockDeleteByUUID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *WarningRepoMock) GetAll(ctx context.Context) (migration.Warnings, error) {
	if mock.GetAllFunc == nil {
		panic("WarningRepoMock.GetAllFunc: method is nil but WarningRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedWarningRepo.GetAllCalls())
func (mock *WarningRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByScopeAndType calls GetByScopeAndTypeFunc.
func (mock *WarningRepoMock) GetByScopeAndType(ctx context.Context, scope api.WarningScope, wType api.WarningType) (migration.Warnings, error) {
	if mock.GetByScopeAndTypeFunc == nil {
		panic("WarningRepoMock.GetByScopeAndTypeFunc: method is nil but WarningRepo.GetByScopeAndType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Scope api.WarningScope
		WType api.WarningType
	}{
		Ctx:   ctx,
		Scope: scope,
		WType: wType,
	}
	mock.lockGetByScopeAndType.Lock()
	mock.calls.GetByScopeAndType = append(mock.calls.GetByScopeAndType, callInfo)
	mock.lockGetByScopeAndType.Unlock()
	return mock.GetByScopeAndTypeFunc(ctx, scope, wType)
}

// GetByScopeAndTypeCalls gets all the calls that were made to GetByScopeAndType.
// Check the length with:
//
//	len(mockedWarningRepo.GetByScopeAndTypeCalls())
func (mock *WarningRepoMock) GetByScopeAndTypeCalls() []struct {
	Ctx   context.Context
	Scope api.WarningScope
	WType api.WarningType
} {
	var calls []struct {
		Ctx   context.Context
		Scope api.WarningScope
		WType api.WarningType
	}
	mock.lockGetByScopeAndType.RLock()
	calls = mock.calls.GetByScopeAndType
	mock.lockGetByScopeAndType.RUnlock()
	return calls
}

// GetByUUID calls GetByUUIDFunc.
func (mock *WarningRepoMock) GetByUUID(ctx context.Context, id uuid.UUID) (*migration.Warning, error) {
	if mock.GetByUUIDFunc == nil {
		panic("WarningRepoMock.GetByUUIDFunc: method is nil but WarningRepo.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByUUID.Lock()
	mock.calls.GetByUUID = append(mock.calls.GetByUUID, callInfo)
	mock.lockGetByUUID.Unlock()
	return mock.GetByUUIDFunc(ctx, id)
}

// GetByUUIDCalls gets all the calls that were made to GetByUUID.
// Check the length with:
//
//	len(mockedWarningRepo.GetByUUIDCalls())
func (mock *WarningRepoMock) GetByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByUUID.RLock()
	calls = mock.calls.GetByUUID
	mock.lockGetByUUID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *WarningRepoMock) Update(ctx context.Context, id uuid.UUID, w migration.Warning) error {
	if mock.UpdateFunc == nil {
		panic("WarningRepoMock.UpdateFunc: method is nil but WarningRepo.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
		W   migration.Warning
	}{
		Ctx: ctx,
		ID:  id,
		W:   w,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, w)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedWarningRepo.UpdateCalls())
func (mock *WarningRepoMock) UpdateCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
	W   migration.Warning
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
		W   migration.Warning
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Upsert calls UpsertFunc.
func (mock *WarningRepoMock) Upsert(ctx context.Context, w migration.Warning) (int64, error) {
	if mock.UpsertFunc == nil {
		panic("WarningRepoMock.UpsertFunc: method is nil but WarningRepo.Upsert was just called")
	}
	callInfo := struct {
		Ctx context.Context
		W   migration.Warning
	}{
		Ctx: ctx,
		W:   w,
	}
	mock.lockUpsert.Lock()
	mock.calls.Upsert = append(mock.calls.Upsert, callInfo)
	mock.lockUpsert.Unlock()
	return mock.UpsertFunc(ctx, w)
}

// UpsertCalls gets all the calls that were made to Upsert.
// Check the length with:
//
//	len(mockedWarningRepo.UpsertCalls())
func (mock *WarningRepoMock) UpsertCalls() []struct {
	Ctx context.Context
	W   migration.Warning
} {
	var calls []struct {
		Ctx context.Context
		W   migration.Warning
	}
	mock.lockUpsert.RLock()
	calls = mock.calls.Upsert
	mock.lockUpsert.RUnlock()
	return calls
}
