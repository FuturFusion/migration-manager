// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// Ensure, that InstanceRepoMock does implement migration.InstanceRepo.
// If this is not the case, regenerate this file with moq.
var _ migration.InstanceRepo = &InstanceRepoMock{}

// InstanceRepoMock is a mock implementation of migration.InstanceRepo.
//
//	func TestSomethingThatUsesInstanceRepo(t *testing.T) {
//
//		// make and configure a mocked migration.InstanceRepo
//		mockedInstanceRepo := &InstanceRepoMock{
//			CreateFunc: func(ctx context.Context, instance migration.Instance) (migration.Instance, error) {
//				panic("mock out the Create method")
//			},
//			CreateOverridesFunc: func(ctx context.Context, overrides migration.Overrides) (migration.Overrides, error) {
//				panic("mock out the CreateOverrides method")
//			},
//			DeleteByIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByID method")
//			},
//			DeleteOverridesByIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteOverridesByID method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Instances, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByBatchIDFunc: func(ctx context.Context, batchID int) (migration.Instances, error) {
//				panic("mock out the GetAllByBatchID method")
//			},
//			GetAllByStateFunc: func(ctx context.Context, status api.MigrationStatusType) (migration.Instances, error) {
//				panic("mock out the GetAllByState method")
//			},
//			GetAllUUIDsFunc: func(ctx context.Context) ([]uuid.UUID, error) {
//				panic("mock out the GetAllUUIDs method")
//			},
//			GetAllUnassignedFunc: func(ctx context.Context) (migration.Instances, error) {
//				panic("mock out the GetAllUnassigned method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (migration.Instance, error) {
//				panic("mock out the GetByID method")
//			},
//			GetOverridesByIDFunc: func(ctx context.Context, id uuid.UUID) (migration.Overrides, error) {
//				panic("mock out the GetOverridesByID method")
//			},
//			UpdateByIDFunc: func(ctx context.Context, instance migration.Instance) (migration.Instance, error) {
//				panic("mock out the UpdateByID method")
//			},
//			UpdateOverridesByIDFunc: func(ctx context.Context, overrides migration.Overrides) (migration.Overrides, error) {
//				panic("mock out the UpdateOverridesByID method")
//			},
//			UpdateStatusByIDFunc: func(ctx context.Context, id uuid.UUID, status api.MigrationStatusType, statusString string, needsDiskImport bool) (migration.Instance, error) {
//				panic("mock out the UpdateStatusByID method")
//			},
//		}
//
//		// use mockedInstanceRepo in code that requires migration.InstanceRepo
//		// and then make assertions.
//
//	}
type InstanceRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, instance migration.Instance) (migration.Instance, error)

	// CreateOverridesFunc mocks the CreateOverrides method.
	CreateOverridesFunc func(ctx context.Context, overrides migration.Overrides) (migration.Overrides, error)

	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(ctx context.Context, id uuid.UUID) error

	// DeleteOverridesByIDFunc mocks the DeleteOverridesByID method.
	DeleteOverridesByIDFunc func(ctx context.Context, id uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Instances, error)

	// GetAllByBatchIDFunc mocks the GetAllByBatchID method.
	GetAllByBatchIDFunc func(ctx context.Context, batchID int) (migration.Instances, error)

	// GetAllByStateFunc mocks the GetAllByState method.
	GetAllByStateFunc func(ctx context.Context, status api.MigrationStatusType) (migration.Instances, error)

	// GetAllUUIDsFunc mocks the GetAllUUIDs method.
	GetAllUUIDsFunc func(ctx context.Context) ([]uuid.UUID, error)

	// GetAllUnassignedFunc mocks the GetAllUnassigned method.
	GetAllUnassignedFunc func(ctx context.Context) (migration.Instances, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (migration.Instance, error)

	// GetOverridesByIDFunc mocks the GetOverridesByID method.
	GetOverridesByIDFunc func(ctx context.Context, id uuid.UUID) (migration.Overrides, error)

	// UpdateByIDFunc mocks the UpdateByID method.
	UpdateByIDFunc func(ctx context.Context, instance migration.Instance) (migration.Instance, error)

	// UpdateOverridesByIDFunc mocks the UpdateOverridesByID method.
	UpdateOverridesByIDFunc func(ctx context.Context, overrides migration.Overrides) (migration.Overrides, error)

	// UpdateStatusByIDFunc mocks the UpdateStatusByID method.
	UpdateStatusByIDFunc func(ctx context.Context, id uuid.UUID, status api.MigrationStatusType, statusString string, needsDiskImport bool) (migration.Instance, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance migration.Instance
		}
		// CreateOverrides holds details about calls to the CreateOverrides method.
		CreateOverrides []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Overrides is the overrides argument value.
			Overrides migration.Overrides
		}
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteOverridesByID holds details about calls to the DeleteOverridesByID method.
		DeleteOverridesByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByBatchID holds details about calls to the GetAllByBatchID method.
		GetAllByBatchID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchID is the batchID argument value.
			BatchID int
		}
		// GetAllByState holds details about calls to the GetAllByState method.
		GetAllByState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status api.MigrationStatusType
		}
		// GetAllUUIDs holds details about calls to the GetAllUUIDs method.
		GetAllUUIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllUnassigned holds details about calls to the GetAllUnassigned method.
		GetAllUnassigned []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetOverridesByID holds details about calls to the GetOverridesByID method.
		GetOverridesByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// UpdateByID holds details about calls to the UpdateByID method.
		UpdateByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instance is the instance argument value.
			Instance migration.Instance
		}
		// UpdateOverridesByID holds details about calls to the UpdateOverridesByID method.
		UpdateOverridesByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Overrides is the overrides argument value.
			Overrides migration.Overrides
		}
		// UpdateStatusByID holds details about calls to the UpdateStatusByID method.
		UpdateStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Status is the status argument value.
			Status api.MigrationStatusType
			// StatusString is the statusString argument value.
			StatusString string
			// NeedsDiskImport is the needsDiskImport argument value.
			NeedsDiskImport bool
		}
	}
	lockCreate              sync.RWMutex
	lockCreateOverrides     sync.RWMutex
	lockDeleteByID          sync.RWMutex
	lockDeleteOverridesByID sync.RWMutex
	lockGetAll              sync.RWMutex
	lockGetAllByBatchID     sync.RWMutex
	lockGetAllByState       sync.RWMutex
	lockGetAllUUIDs         sync.RWMutex
	lockGetAllUnassigned    sync.RWMutex
	lockGetByID             sync.RWMutex
	lockGetOverridesByID    sync.RWMutex
	lockUpdateByID          sync.RWMutex
	lockUpdateOverridesByID sync.RWMutex
	lockUpdateStatusByID    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *InstanceRepoMock) Create(ctx context.Context, instance migration.Instance) (migration.Instance, error) {
	if mock.CreateFunc == nil {
		panic("InstanceRepoMock.CreateFunc: method is nil but InstanceRepo.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance migration.Instance
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, instance)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedInstanceRepo.CreateCalls())
func (mock *InstanceRepoMock) CreateCalls() []struct {
	Ctx      context.Context
	Instance migration.Instance
} {
	var calls []struct {
		Ctx      context.Context
		Instance migration.Instance
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// CreateOverrides calls CreateOverridesFunc.
func (mock *InstanceRepoMock) CreateOverrides(ctx context.Context, overrides migration.Overrides) (migration.Overrides, error) {
	if mock.CreateOverridesFunc == nil {
		panic("InstanceRepoMock.CreateOverridesFunc: method is nil but InstanceRepo.CreateOverrides was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Overrides migration.Overrides
	}{
		Ctx:       ctx,
		Overrides: overrides,
	}
	mock.lockCreateOverrides.Lock()
	mock.calls.CreateOverrides = append(mock.calls.CreateOverrides, callInfo)
	mock.lockCreateOverrides.Unlock()
	return mock.CreateOverridesFunc(ctx, overrides)
}

// CreateOverridesCalls gets all the calls that were made to CreateOverrides.
// Check the length with:
//
//	len(mockedInstanceRepo.CreateOverridesCalls())
func (mock *InstanceRepoMock) CreateOverridesCalls() []struct {
	Ctx       context.Context
	Overrides migration.Overrides
} {
	var calls []struct {
		Ctx       context.Context
		Overrides migration.Overrides
	}
	mock.lockCreateOverrides.RLock()
	calls = mock.calls.CreateOverrides
	mock.lockCreateOverrides.RUnlock()
	return calls
}

// DeleteByID calls DeleteByIDFunc.
func (mock *InstanceRepoMock) DeleteByID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByIDFunc == nil {
		panic("InstanceRepoMock.DeleteByIDFunc: method is nil but InstanceRepo.DeleteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	mock.lockDeleteByID.Unlock()
	return mock.DeleteByIDFunc(ctx, id)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//
//	len(mockedInstanceRepo.DeleteByIDCalls())
func (mock *InstanceRepoMock) DeleteByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	mock.lockDeleteByID.RUnlock()
	return calls
}

// DeleteOverridesByID calls DeleteOverridesByIDFunc.
func (mock *InstanceRepoMock) DeleteOverridesByID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteOverridesByIDFunc == nil {
		panic("InstanceRepoMock.DeleteOverridesByIDFunc: method is nil but InstanceRepo.DeleteOverridesByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteOverridesByID.Lock()
	mock.calls.DeleteOverridesByID = append(mock.calls.DeleteOverridesByID, callInfo)
	mock.lockDeleteOverridesByID.Unlock()
	return mock.DeleteOverridesByIDFunc(ctx, id)
}

// DeleteOverridesByIDCalls gets all the calls that were made to DeleteOverridesByID.
// Check the length with:
//
//	len(mockedInstanceRepo.DeleteOverridesByIDCalls())
func (mock *InstanceRepoMock) DeleteOverridesByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteOverridesByID.RLock()
	calls = mock.calls.DeleteOverridesByID
	mock.lockDeleteOverridesByID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *InstanceRepoMock) GetAll(ctx context.Context) (migration.Instances, error) {
	if mock.GetAllFunc == nil {
		panic("InstanceRepoMock.GetAllFunc: method is nil but InstanceRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedInstanceRepo.GetAllCalls())
func (mock *InstanceRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByBatchID calls GetAllByBatchIDFunc.
func (mock *InstanceRepoMock) GetAllByBatchID(ctx context.Context, batchID int) (migration.Instances, error) {
	if mock.GetAllByBatchIDFunc == nil {
		panic("InstanceRepoMock.GetAllByBatchIDFunc: method is nil but InstanceRepo.GetAllByBatchID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BatchID int
	}{
		Ctx:     ctx,
		BatchID: batchID,
	}
	mock.lockGetAllByBatchID.Lock()
	mock.calls.GetAllByBatchID = append(mock.calls.GetAllByBatchID, callInfo)
	mock.lockGetAllByBatchID.Unlock()
	return mock.GetAllByBatchIDFunc(ctx, batchID)
}

// GetAllByBatchIDCalls gets all the calls that were made to GetAllByBatchID.
// Check the length with:
//
//	len(mockedInstanceRepo.GetAllByBatchIDCalls())
func (mock *InstanceRepoMock) GetAllByBatchIDCalls() []struct {
	Ctx     context.Context
	BatchID int
} {
	var calls []struct {
		Ctx     context.Context
		BatchID int
	}
	mock.lockGetAllByBatchID.RLock()
	calls = mock.calls.GetAllByBatchID
	mock.lockGetAllByBatchID.RUnlock()
	return calls
}

// GetAllByState calls GetAllByStateFunc.
func (mock *InstanceRepoMock) GetAllByState(ctx context.Context, status api.MigrationStatusType) (migration.Instances, error) {
	if mock.GetAllByStateFunc == nil {
		panic("InstanceRepoMock.GetAllByStateFunc: method is nil but InstanceRepo.GetAllByState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status api.MigrationStatusType
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockGetAllByState.Lock()
	mock.calls.GetAllByState = append(mock.calls.GetAllByState, callInfo)
	mock.lockGetAllByState.Unlock()
	return mock.GetAllByStateFunc(ctx, status)
}

// GetAllByStateCalls gets all the calls that were made to GetAllByState.
// Check the length with:
//
//	len(mockedInstanceRepo.GetAllByStateCalls())
func (mock *InstanceRepoMock) GetAllByStateCalls() []struct {
	Ctx    context.Context
	Status api.MigrationStatusType
} {
	var calls []struct {
		Ctx    context.Context
		Status api.MigrationStatusType
	}
	mock.lockGetAllByState.RLock()
	calls = mock.calls.GetAllByState
	mock.lockGetAllByState.RUnlock()
	return calls
}

// GetAllUUIDs calls GetAllUUIDsFunc.
func (mock *InstanceRepoMock) GetAllUUIDs(ctx context.Context) ([]uuid.UUID, error) {
	if mock.GetAllUUIDsFunc == nil {
		panic("InstanceRepoMock.GetAllUUIDsFunc: method is nil but InstanceRepo.GetAllUUIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUUIDs.Lock()
	mock.calls.GetAllUUIDs = append(mock.calls.GetAllUUIDs, callInfo)
	mock.lockGetAllUUIDs.Unlock()
	return mock.GetAllUUIDsFunc(ctx)
}

// GetAllUUIDsCalls gets all the calls that were made to GetAllUUIDs.
// Check the length with:
//
//	len(mockedInstanceRepo.GetAllUUIDsCalls())
func (mock *InstanceRepoMock) GetAllUUIDsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUUIDs.RLock()
	calls = mock.calls.GetAllUUIDs
	mock.lockGetAllUUIDs.RUnlock()
	return calls
}

// GetAllUnassigned calls GetAllUnassignedFunc.
func (mock *InstanceRepoMock) GetAllUnassigned(ctx context.Context) (migration.Instances, error) {
	if mock.GetAllUnassignedFunc == nil {
		panic("InstanceRepoMock.GetAllUnassignedFunc: method is nil but InstanceRepo.GetAllUnassigned was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUnassigned.Lock()
	mock.calls.GetAllUnassigned = append(mock.calls.GetAllUnassigned, callInfo)
	mock.lockGetAllUnassigned.Unlock()
	return mock.GetAllUnassignedFunc(ctx)
}

// GetAllUnassignedCalls gets all the calls that were made to GetAllUnassigned.
// Check the length with:
//
//	len(mockedInstanceRepo.GetAllUnassignedCalls())
func (mock *InstanceRepoMock) GetAllUnassignedCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUnassigned.RLock()
	calls = mock.calls.GetAllUnassigned
	mock.lockGetAllUnassigned.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *InstanceRepoMock) GetByID(ctx context.Context, id uuid.UUID) (migration.Instance, error) {
	if mock.GetByIDFunc == nil {
		panic("InstanceRepoMock.GetByIDFunc: method is nil but InstanceRepo.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedInstanceRepo.GetByIDCalls())
func (mock *InstanceRepoMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetOverridesByID calls GetOverridesByIDFunc.
func (mock *InstanceRepoMock) GetOverridesByID(ctx context.Context, id uuid.UUID) (migration.Overrides, error) {
	if mock.GetOverridesByIDFunc == nil {
		panic("InstanceRepoMock.GetOverridesByIDFunc: method is nil but InstanceRepo.GetOverridesByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetOverridesByID.Lock()
	mock.calls.GetOverridesByID = append(mock.calls.GetOverridesByID, callInfo)
	mock.lockGetOverridesByID.Unlock()
	return mock.GetOverridesByIDFunc(ctx, id)
}

// GetOverridesByIDCalls gets all the calls that were made to GetOverridesByID.
// Check the length with:
//
//	len(mockedInstanceRepo.GetOverridesByIDCalls())
func (mock *InstanceRepoMock) GetOverridesByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetOverridesByID.RLock()
	calls = mock.calls.GetOverridesByID
	mock.lockGetOverridesByID.RUnlock()
	return calls
}

// UpdateByID calls UpdateByIDFunc.
func (mock *InstanceRepoMock) UpdateByID(ctx context.Context, instance migration.Instance) (migration.Instance, error) {
	if mock.UpdateByIDFunc == nil {
		panic("InstanceRepoMock.UpdateByIDFunc: method is nil but InstanceRepo.UpdateByID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Instance migration.Instance
	}{
		Ctx:      ctx,
		Instance: instance,
	}
	mock.lockUpdateByID.Lock()
	mock.calls.UpdateByID = append(mock.calls.UpdateByID, callInfo)
	mock.lockUpdateByID.Unlock()
	return mock.UpdateByIDFunc(ctx, instance)
}

// UpdateByIDCalls gets all the calls that were made to UpdateByID.
// Check the length with:
//
//	len(mockedInstanceRepo.UpdateByIDCalls())
func (mock *InstanceRepoMock) UpdateByIDCalls() []struct {
	Ctx      context.Context
	Instance migration.Instance
} {
	var calls []struct {
		Ctx      context.Context
		Instance migration.Instance
	}
	mock.lockUpdateByID.RLock()
	calls = mock.calls.UpdateByID
	mock.lockUpdateByID.RUnlock()
	return calls
}

// UpdateOverridesByID calls UpdateOverridesByIDFunc.
func (mock *InstanceRepoMock) UpdateOverridesByID(ctx context.Context, overrides migration.Overrides) (migration.Overrides, error) {
	if mock.UpdateOverridesByIDFunc == nil {
		panic("InstanceRepoMock.UpdateOverridesByIDFunc: method is nil but InstanceRepo.UpdateOverridesByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Overrides migration.Overrides
	}{
		Ctx:       ctx,
		Overrides: overrides,
	}
	mock.lockUpdateOverridesByID.Lock()
	mock.calls.UpdateOverridesByID = append(mock.calls.UpdateOverridesByID, callInfo)
	mock.lockUpdateOverridesByID.Unlock()
	return mock.UpdateOverridesByIDFunc(ctx, overrides)
}

// UpdateOverridesByIDCalls gets all the calls that were made to UpdateOverridesByID.
// Check the length with:
//
//	len(mockedInstanceRepo.UpdateOverridesByIDCalls())
func (mock *InstanceRepoMock) UpdateOverridesByIDCalls() []struct {
	Ctx       context.Context
	Overrides migration.Overrides
} {
	var calls []struct {
		Ctx       context.Context
		Overrides migration.Overrides
	}
	mock.lockUpdateOverridesByID.RLock()
	calls = mock.calls.UpdateOverridesByID
	mock.lockUpdateOverridesByID.RUnlock()
	return calls
}

// UpdateStatusByID calls UpdateStatusByIDFunc.
func (mock *InstanceRepoMock) UpdateStatusByID(ctx context.Context, id uuid.UUID, status api.MigrationStatusType, statusString string, needsDiskImport bool) (migration.Instance, error) {
	if mock.UpdateStatusByIDFunc == nil {
		panic("InstanceRepoMock.UpdateStatusByIDFunc: method is nil but InstanceRepo.UpdateStatusByID was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		ID              uuid.UUID
		Status          api.MigrationStatusType
		StatusString    string
		NeedsDiskImport bool
	}{
		Ctx:             ctx,
		ID:              id,
		Status:          status,
		StatusString:    statusString,
		NeedsDiskImport: needsDiskImport,
	}
	mock.lockUpdateStatusByID.Lock()
	mock.calls.UpdateStatusByID = append(mock.calls.UpdateStatusByID, callInfo)
	mock.lockUpdateStatusByID.Unlock()
	return mock.UpdateStatusByIDFunc(ctx, id, status, statusString, needsDiskImport)
}

// UpdateStatusByIDCalls gets all the calls that were made to UpdateStatusByID.
// Check the length with:
//
//	len(mockedInstanceRepo.UpdateStatusByIDCalls())
func (mock *InstanceRepoMock) UpdateStatusByIDCalls() []struct {
	Ctx             context.Context
	ID              uuid.UUID
	Status          api.MigrationStatusType
	StatusString    string
	NeedsDiskImport bool
} {
	var calls []struct {
		Ctx             context.Context
		ID              uuid.UUID
		Status          api.MigrationStatusType
		StatusString    string
		NeedsDiskImport bool
	}
	mock.lockUpdateStatusByID.RLock()
	calls = mock.calls.UpdateStatusByID
	mock.lockUpdateStatusByID.RUnlock()
	return calls
}
