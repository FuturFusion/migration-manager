// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// Ensure, that BatchRepoMock does implement migration.BatchRepo.
// If this is not the case, regenerate this file with moq.
var _ migration.BatchRepo = &BatchRepoMock{}

// BatchRepoMock is a mock implementation of migration.BatchRepo.
//
//	func TestSomethingThatUsesBatchRepo(t *testing.T) {
//
//		// make and configure a mocked migration.BatchRepo
//		mockedBatchRepo := &BatchRepoMock{
//			AssignBatchFunc: func(ctx context.Context, batchName string, instanceUUID uuid.UUID) error {
//				panic("mock out the AssignBatch method")
//			},
//			AssignMigrationWindowsFunc: func(ctx context.Context, batch string, windows migration.MigrationWindows) error {
//				panic("mock out the AssignMigrationWindows method")
//			},
//			CreateFunc: func(ctx context.Context, batch migration.Batch) (int64, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Batches, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByStateFunc: func(ctx context.Context, status api.BatchStatusType) (migration.Batches, error) {
//				panic("mock out the GetAllByState method")
//			},
//			GetAllNamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetAllNamesByStateFunc: func(ctx context.Context, status api.BatchStatusType) ([]string, error) {
//				panic("mock out the GetAllNamesByState method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (*migration.Batch, error) {
//				panic("mock out the GetByName method")
//			},
//			GetMigrationWindowFunc: func(ctx context.Context, windowID int64) (*migration.MigrationWindow, error) {
//				panic("mock out the GetMigrationWindow method")
//			},
//			GetMigrationWindowsByBatchFunc: func(ctx context.Context, batch string) (migration.MigrationWindows, error) {
//				panic("mock out the GetMigrationWindowsByBatch method")
//			},
//			RenameFunc: func(ctx context.Context, oldName string, newName string) error {
//				panic("mock out the Rename method")
//			},
//			UnassignBatchFunc: func(ctx context.Context, batchName string, instanceUUID uuid.UUID) error {
//				panic("mock out the UnassignBatch method")
//			},
//			UnassignMigrationWindowsFunc: func(ctx context.Context, batch string) error {
//				panic("mock out the UnassignMigrationWindows method")
//			},
//			UpdateFunc: func(ctx context.Context, name string, batch migration.Batch) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedBatchRepo in code that requires migration.BatchRepo
//		// and then make assertions.
//
//	}
type BatchRepoMock struct {
	// AssignBatchFunc mocks the AssignBatch method.
	AssignBatchFunc func(ctx context.Context, batchName string, instanceUUID uuid.UUID) error

	// AssignMigrationWindowsFunc mocks the AssignMigrationWindows method.
	AssignMigrationWindowsFunc func(ctx context.Context, batch string, windows migration.MigrationWindows) error

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, batch migration.Batch) (int64, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Batches, error)

	// GetAllByStateFunc mocks the GetAllByState method.
	GetAllByStateFunc func(ctx context.Context, status api.BatchStatusType) (migration.Batches, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context) ([]string, error)

	// GetAllNamesByStateFunc mocks the GetAllNamesByState method.
	GetAllNamesByStateFunc func(ctx context.Context, status api.BatchStatusType) ([]string, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (*migration.Batch, error)

	// GetMigrationWindowFunc mocks the GetMigrationWindow method.
	GetMigrationWindowFunc func(ctx context.Context, windowID int64) (*migration.MigrationWindow, error)

	// GetMigrationWindowsByBatchFunc mocks the GetMigrationWindowsByBatch method.
	GetMigrationWindowsByBatchFunc func(ctx context.Context, batch string) (migration.MigrationWindows, error)

	// RenameFunc mocks the Rename method.
	RenameFunc func(ctx context.Context, oldName string, newName string) error

	// UnassignBatchFunc mocks the UnassignBatch method.
	UnassignBatchFunc func(ctx context.Context, batchName string, instanceUUID uuid.UUID) error

	// UnassignMigrationWindowsFunc mocks the UnassignMigrationWindows method.
	UnassignMigrationWindowsFunc func(ctx context.Context, batch string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, name string, batch migration.Batch) error

	// calls tracks calls to the methods.
	calls struct {
		// AssignBatch holds details about calls to the AssignBatch method.
		AssignBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchName is the batchName argument value.
			BatchName string
			// InstanceUUID is the instanceUUID argument value.
			InstanceUUID uuid.UUID
		}
		// AssignMigrationWindows holds details about calls to the AssignMigrationWindows method.
		AssignMigrationWindows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch string
			// Windows is the windows argument value.
			Windows migration.MigrationWindows
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch migration.Batch
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByState holds details about calls to the GetAllByState method.
		GetAllByState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status api.BatchStatusType
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllNamesByState holds details about calls to the GetAllNamesByState method.
		GetAllNamesByState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status api.BatchStatusType
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetMigrationWindow holds details about calls to the GetMigrationWindow method.
		GetMigrationWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WindowID is the windowID argument value.
			WindowID int64
		}
		// GetMigrationWindowsByBatch holds details about calls to the GetMigrationWindowsByBatch method.
		GetMigrationWindowsByBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch string
		}
		// Rename holds details about calls to the Rename method.
		Rename []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OldName is the oldName argument value.
			OldName string
			// NewName is the newName argument value.
			NewName string
		}
		// UnassignBatch holds details about calls to the UnassignBatch method.
		UnassignBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchName is the batchName argument value.
			BatchName string
			// InstanceUUID is the instanceUUID argument value.
			InstanceUUID uuid.UUID
		}
		// UnassignMigrationWindows holds details about calls to the UnassignMigrationWindows method.
		UnassignMigrationWindows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Batch is the batch argument value.
			Batch migration.Batch
		}
	}
	lockAssignBatch                sync.RWMutex
	lockAssignMigrationWindows     sync.RWMutex
	lockCreate                     sync.RWMutex
	lockDeleteByName               sync.RWMutex
	lockGetAll                     sync.RWMutex
	lockGetAllByState              sync.RWMutex
	lockGetAllNames                sync.RWMutex
	lockGetAllNamesByState         sync.RWMutex
	lockGetByName                  sync.RWMutex
	lockGetMigrationWindow         sync.RWMutex
	lockGetMigrationWindowsByBatch sync.RWMutex
	lockRename                     sync.RWMutex
	lockUnassignBatch              sync.RWMutex
	lockUnassignMigrationWindows   sync.RWMutex
	lockUpdate                     sync.RWMutex
}

// AssignBatch calls AssignBatchFunc.
func (mock *BatchRepoMock) AssignBatch(ctx context.Context, batchName string, instanceUUID uuid.UUID) error {
	if mock.AssignBatchFunc == nil {
		panic("BatchRepoMock.AssignBatchFunc: method is nil but BatchRepo.AssignBatch was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		BatchName    string
		InstanceUUID uuid.UUID
	}{
		Ctx:          ctx,
		BatchName:    batchName,
		InstanceUUID: instanceUUID,
	}
	mock.lockAssignBatch.Lock()
	mock.calls.AssignBatch = append(mock.calls.AssignBatch, callInfo)
	mock.lockAssignBatch.Unlock()
	return mock.AssignBatchFunc(ctx, batchName, instanceUUID)
}

// AssignBatchCalls gets all the calls that were made to AssignBatch.
// Check the length with:
//
//	len(mockedBatchRepo.AssignBatchCalls())
func (mock *BatchRepoMock) AssignBatchCalls() []struct {
	Ctx          context.Context
	BatchName    string
	InstanceUUID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		BatchName    string
		InstanceUUID uuid.UUID
	}
	mock.lockAssignBatch.RLock()
	calls = mock.calls.AssignBatch
	mock.lockAssignBatch.RUnlock()
	return calls
}

// AssignMigrationWindows calls AssignMigrationWindowsFunc.
func (mock *BatchRepoMock) AssignMigrationWindows(ctx context.Context, batch string, windows migration.MigrationWindows) error {
	if mock.AssignMigrationWindowsFunc == nil {
		panic("BatchRepoMock.AssignMigrationWindowsFunc: method is nil but BatchRepo.AssignMigrationWindows was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Batch   string
		Windows migration.MigrationWindows
	}{
		Ctx:     ctx,
		Batch:   batch,
		Windows: windows,
	}
	mock.lockAssignMigrationWindows.Lock()
	mock.calls.AssignMigrationWindows = append(mock.calls.AssignMigrationWindows, callInfo)
	mock.lockAssignMigrationWindows.Unlock()
	return mock.AssignMigrationWindowsFunc(ctx, batch, windows)
}

// AssignMigrationWindowsCalls gets all the calls that were made to AssignMigrationWindows.
// Check the length with:
//
//	len(mockedBatchRepo.AssignMigrationWindowsCalls())
func (mock *BatchRepoMock) AssignMigrationWindowsCalls() []struct {
	Ctx     context.Context
	Batch   string
	Windows migration.MigrationWindows
} {
	var calls []struct {
		Ctx     context.Context
		Batch   string
		Windows migration.MigrationWindows
	}
	mock.lockAssignMigrationWindows.RLock()
	calls = mock.calls.AssignMigrationWindows
	mock.lockAssignMigrationWindows.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *BatchRepoMock) Create(ctx context.Context, batch migration.Batch) (int64, error) {
	if mock.CreateFunc == nil {
		panic("BatchRepoMock.CreateFunc: method is nil but BatchRepo.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch migration.Batch
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, batch)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedBatchRepo.CreateCalls())
func (mock *BatchRepoMock) CreateCalls() []struct {
	Ctx   context.Context
	Batch migration.Batch
} {
	var calls []struct {
		Ctx   context.Context
		Batch migration.Batch
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *BatchRepoMock) DeleteByName(ctx context.Context, name string) error {
	if mock.DeleteByNameFunc == nil {
		panic("BatchRepoMock.DeleteByNameFunc: method is nil but BatchRepo.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedBatchRepo.DeleteByNameCalls())
func (mock *BatchRepoMock) DeleteByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *BatchRepoMock) GetAll(ctx context.Context) (migration.Batches, error) {
	if mock.GetAllFunc == nil {
		panic("BatchRepoMock.GetAllFunc: method is nil but BatchRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedBatchRepo.GetAllCalls())
func (mock *BatchRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByState calls GetAllByStateFunc.
func (mock *BatchRepoMock) GetAllByState(ctx context.Context, status api.BatchStatusType) (migration.Batches, error) {
	if mock.GetAllByStateFunc == nil {
		panic("BatchRepoMock.GetAllByStateFunc: method is nil but BatchRepo.GetAllByState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockGetAllByState.Lock()
	mock.calls.GetAllByState = append(mock.calls.GetAllByState, callInfo)
	mock.lockGetAllByState.Unlock()
	return mock.GetAllByStateFunc(ctx, status)
}

// GetAllByStateCalls gets all the calls that were made to GetAllByState.
// Check the length with:
//
//	len(mockedBatchRepo.GetAllByStateCalls())
func (mock *BatchRepoMock) GetAllByStateCalls() []struct {
	Ctx    context.Context
	Status api.BatchStatusType
} {
	var calls []struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}
	mock.lockGetAllByState.RLock()
	calls = mock.calls.GetAllByState
	mock.lockGetAllByState.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *BatchRepoMock) GetAllNames(ctx context.Context) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("BatchRepoMock.GetAllNamesFunc: method is nil but BatchRepo.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedBatchRepo.GetAllNamesCalls())
func (mock *BatchRepoMock) GetAllNamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetAllNamesByState calls GetAllNamesByStateFunc.
func (mock *BatchRepoMock) GetAllNamesByState(ctx context.Context, status api.BatchStatusType) ([]string, error) {
	if mock.GetAllNamesByStateFunc == nil {
		panic("BatchRepoMock.GetAllNamesByStateFunc: method is nil but BatchRepo.GetAllNamesByState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockGetAllNamesByState.Lock()
	mock.calls.GetAllNamesByState = append(mock.calls.GetAllNamesByState, callInfo)
	mock.lockGetAllNamesByState.Unlock()
	return mock.GetAllNamesByStateFunc(ctx, status)
}

// GetAllNamesByStateCalls gets all the calls that were made to GetAllNamesByState.
// Check the length with:
//
//	len(mockedBatchRepo.GetAllNamesByStateCalls())
func (mock *BatchRepoMock) GetAllNamesByStateCalls() []struct {
	Ctx    context.Context
	Status api.BatchStatusType
} {
	var calls []struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}
	mock.lockGetAllNamesByState.RLock()
	calls = mock.calls.GetAllNamesByState
	mock.lockGetAllNamesByState.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *BatchRepoMock) GetByName(ctx context.Context, name string) (*migration.Batch, error) {
	if mock.GetByNameFunc == nil {
		panic("BatchRepoMock.GetByNameFunc: method is nil but BatchRepo.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedBatchRepo.GetByNameCalls())
func (mock *BatchRepoMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// GetMigrationWindow calls GetMigrationWindowFunc.
func (mock *BatchRepoMock) GetMigrationWindow(ctx context.Context, windowID int64) (*migration.MigrationWindow, error) {
	if mock.GetMigrationWindowFunc == nil {
		panic("BatchRepoMock.GetMigrationWindowFunc: method is nil but BatchRepo.GetMigrationWindow was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		WindowID int64
	}{
		Ctx:      ctx,
		WindowID: windowID,
	}
	mock.lockGetMigrationWindow.Lock()
	mock.calls.GetMigrationWindow = append(mock.calls.GetMigrationWindow, callInfo)
	mock.lockGetMigrationWindow.Unlock()
	return mock.GetMigrationWindowFunc(ctx, windowID)
}

// GetMigrationWindowCalls gets all the calls that were made to GetMigrationWindow.
// Check the length with:
//
//	len(mockedBatchRepo.GetMigrationWindowCalls())
func (mock *BatchRepoMock) GetMigrationWindowCalls() []struct {
	Ctx      context.Context
	WindowID int64
} {
	var calls []struct {
		Ctx      context.Context
		WindowID int64
	}
	mock.lockGetMigrationWindow.RLock()
	calls = mock.calls.GetMigrationWindow
	mock.lockGetMigrationWindow.RUnlock()
	return calls
}

// GetMigrationWindowsByBatch calls GetMigrationWindowsByBatchFunc.
func (mock *BatchRepoMock) GetMigrationWindowsByBatch(ctx context.Context, batch string) (migration.MigrationWindows, error) {
	if mock.GetMigrationWindowsByBatchFunc == nil {
		panic("BatchRepoMock.GetMigrationWindowsByBatchFunc: method is nil but BatchRepo.GetMigrationWindowsByBatch was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch string
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockGetMigrationWindowsByBatch.Lock()
	mock.calls.GetMigrationWindowsByBatch = append(mock.calls.GetMigrationWindowsByBatch, callInfo)
	mock.lockGetMigrationWindowsByBatch.Unlock()
	return mock.GetMigrationWindowsByBatchFunc(ctx, batch)
}

// GetMigrationWindowsByBatchCalls gets all the calls that were made to GetMigrationWindowsByBatch.
// Check the length with:
//
//	len(mockedBatchRepo.GetMigrationWindowsByBatchCalls())
func (mock *BatchRepoMock) GetMigrationWindowsByBatchCalls() []struct {
	Ctx   context.Context
	Batch string
} {
	var calls []struct {
		Ctx   context.Context
		Batch string
	}
	mock.lockGetMigrationWindowsByBatch.RLock()
	calls = mock.calls.GetMigrationWindowsByBatch
	mock.lockGetMigrationWindowsByBatch.RUnlock()
	return calls
}

// Rename calls RenameFunc.
func (mock *BatchRepoMock) Rename(ctx context.Context, oldName string, newName string) error {
	if mock.RenameFunc == nil {
		panic("BatchRepoMock.RenameFunc: method is nil but BatchRepo.Rename was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		OldName string
		NewName string
	}{
		Ctx:     ctx,
		OldName: oldName,
		NewName: newName,
	}
	mock.lockRename.Lock()
	mock.calls.Rename = append(mock.calls.Rename, callInfo)
	mock.lockRename.Unlock()
	return mock.RenameFunc(ctx, oldName, newName)
}

// RenameCalls gets all the calls that were made to Rename.
// Check the length with:
//
//	len(mockedBatchRepo.RenameCalls())
func (mock *BatchRepoMock) RenameCalls() []struct {
	Ctx     context.Context
	OldName string
	NewName string
} {
	var calls []struct {
		Ctx     context.Context
		OldName string
		NewName string
	}
	mock.lockRename.RLock()
	calls = mock.calls.Rename
	mock.lockRename.RUnlock()
	return calls
}

// UnassignBatch calls UnassignBatchFunc.
func (mock *BatchRepoMock) UnassignBatch(ctx context.Context, batchName string, instanceUUID uuid.UUID) error {
	if mock.UnassignBatchFunc == nil {
		panic("BatchRepoMock.UnassignBatchFunc: method is nil but BatchRepo.UnassignBatch was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		BatchName    string
		InstanceUUID uuid.UUID
	}{
		Ctx:          ctx,
		BatchName:    batchName,
		InstanceUUID: instanceUUID,
	}
	mock.lockUnassignBatch.Lock()
	mock.calls.UnassignBatch = append(mock.calls.UnassignBatch, callInfo)
	mock.lockUnassignBatch.Unlock()
	return mock.UnassignBatchFunc(ctx, batchName, instanceUUID)
}

// UnassignBatchCalls gets all the calls that were made to UnassignBatch.
// Check the length with:
//
//	len(mockedBatchRepo.UnassignBatchCalls())
func (mock *BatchRepoMock) UnassignBatchCalls() []struct {
	Ctx          context.Context
	BatchName    string
	InstanceUUID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		BatchName    string
		InstanceUUID uuid.UUID
	}
	mock.lockUnassignBatch.RLock()
	calls = mock.calls.UnassignBatch
	mock.lockUnassignBatch.RUnlock()
	return calls
}

// UnassignMigrationWindows calls UnassignMigrationWindowsFunc.
func (mock *BatchRepoMock) UnassignMigrationWindows(ctx context.Context, batch string) error {
	if mock.UnassignMigrationWindowsFunc == nil {
		panic("BatchRepoMock.UnassignMigrationWindowsFunc: method is nil but BatchRepo.UnassignMigrationWindows was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch string
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockUnassignMigrationWindows.Lock()
	mock.calls.UnassignMigrationWindows = append(mock.calls.UnassignMigrationWindows, callInfo)
	mock.lockUnassignMigrationWindows.Unlock()
	return mock.UnassignMigrationWindowsFunc(ctx, batch)
}

// UnassignMigrationWindowsCalls gets all the calls that were made to UnassignMigrationWindows.
// Check the length with:
//
//	len(mockedBatchRepo.UnassignMigrationWindowsCalls())
func (mock *BatchRepoMock) UnassignMigrationWindowsCalls() []struct {
	Ctx   context.Context
	Batch string
} {
	var calls []struct {
		Ctx   context.Context
		Batch string
	}
	mock.lockUnassignMigrationWindows.RLock()
	calls = mock.calls.UnassignMigrationWindows
	mock.lockUnassignMigrationWindows.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *BatchRepoMock) Update(ctx context.Context, name string, batch migration.Batch) error {
	if mock.UpdateFunc == nil {
		panic("BatchRepoMock.UpdateFunc: method is nil but BatchRepo.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Name  string
		Batch migration.Batch
	}{
		Ctx:   ctx,
		Name:  name,
		Batch: batch,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, name, batch)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedBatchRepo.UpdateCalls())
func (mock *BatchRepoMock) UpdateCalls() []struct {
	Ctx   context.Context
	Name  string
	Batch migration.Batch
} {
	var calls []struct {
		Ctx   context.Context
		Name  string
		Batch migration.Batch
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
