// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
	"github.com/google/uuid"
)

// Ensure, that QueueRepoMock does implement migration.QueueRepo.
// If this is not the case, regenerate this file with moq.
var _ migration.QueueRepo = &QueueRepoMock{}

// QueueRepoMock is a mock implementation of migration.QueueRepo.
//
//	func TestSomethingThatUsesQueueRepo(t *testing.T) {
//
//		// make and configure a mocked migration.QueueRepo
//		mockedQueueRepo := &QueueRepoMock{
//			CreateFunc: func(ctx context.Context, queue migration.QueueEntry) (int64, error) {
//				panic("mock out the Create method")
//			},
//			DeleteAllByBatchFunc: func(ctx context.Context, batch string) error {
//				panic("mock out the DeleteAllByBatch method")
//			},
//			DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByUUID method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.QueueEntries, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByBatchFunc: func(ctx context.Context, batch string) (migration.QueueEntries, error) {
//				panic("mock out the GetAllByBatch method")
//			},
//			GetAllByBatchAndStateFunc: func(ctx context.Context, batch string, status api.MigrationStatusType) (migration.QueueEntries, error) {
//				panic("mock out the GetAllByBatchAndState method")
//			},
//			GetAllByStateFunc: func(ctx context.Context, status ...api.MigrationStatusType) (migration.QueueEntries, error) {
//				panic("mock out the GetAllByState method")
//			},
//			GetAllNeedingImportFunc: func(ctx context.Context, batch string, needsDiskImport bool) (migration.QueueEntries, error) {
//				panic("mock out the GetAllNeedingImport method")
//			},
//			GetByInstanceUUIDFunc: func(ctx context.Context, id uuid.UUID) (*migration.QueueEntry, error) {
//				panic("mock out the GetByInstanceUUID method")
//			},
//			UpdateFunc: func(ctx context.Context, entry migration.QueueEntry) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedQueueRepo in code that requires migration.QueueRepo
//		// and then make assertions.
//
//	}
type QueueRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, queue migration.QueueEntry) (int64, error)

	// DeleteAllByBatchFunc mocks the DeleteAllByBatch method.
	DeleteAllByBatchFunc func(ctx context.Context, batch string) error

	// DeleteByUUIDFunc mocks the DeleteByUUID method.
	DeleteByUUIDFunc func(ctx context.Context, id uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.QueueEntries, error)

	// GetAllByBatchFunc mocks the GetAllByBatch method.
	GetAllByBatchFunc func(ctx context.Context, batch string) (migration.QueueEntries, error)

	// GetAllByBatchAndStateFunc mocks the GetAllByBatchAndState method.
	GetAllByBatchAndStateFunc func(ctx context.Context, batch string, status api.MigrationStatusType) (migration.QueueEntries, error)

	// GetAllByStateFunc mocks the GetAllByState method.
	GetAllByStateFunc func(ctx context.Context, status ...api.MigrationStatusType) (migration.QueueEntries, error)

	// GetAllNeedingImportFunc mocks the GetAllNeedingImport method.
	GetAllNeedingImportFunc func(ctx context.Context, batch string, needsDiskImport bool) (migration.QueueEntries, error)

	// GetByInstanceUUIDFunc mocks the GetByInstanceUUID method.
	GetByInstanceUUIDFunc func(ctx context.Context, id uuid.UUID) (*migration.QueueEntry, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, entry migration.QueueEntry) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Queue is the queue argument value.
			Queue migration.QueueEntry
		}
		// DeleteAllByBatch holds details about calls to the DeleteAllByBatch method.
		DeleteAllByBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch string
		}
		// DeleteByUUID holds details about calls to the DeleteByUUID method.
		DeleteByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByBatch holds details about calls to the GetAllByBatch method.
		GetAllByBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch string
		}
		// GetAllByBatchAndState holds details about calls to the GetAllByBatchAndState method.
		GetAllByBatchAndState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch string
			// Status is the status argument value.
			Status api.MigrationStatusType
		}
		// GetAllByState holds details about calls to the GetAllByState method.
		GetAllByState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status []api.MigrationStatusType
		}
		// GetAllNeedingImport holds details about calls to the GetAllNeedingImport method.
		GetAllNeedingImport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch string
			// NeedsDiskImport is the needsDiskImport argument value.
			NeedsDiskImport bool
		}
		// GetByInstanceUUID holds details about calls to the GetByInstanceUUID method.
		GetByInstanceUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Entry is the entry argument value.
			Entry migration.QueueEntry
		}
	}
	lockCreate                sync.RWMutex
	lockDeleteAllByBatch      sync.RWMutex
	lockDeleteByUUID          sync.RWMutex
	lockGetAll                sync.RWMutex
	lockGetAllByBatch         sync.RWMutex
	lockGetAllByBatchAndState sync.RWMutex
	lockGetAllByState         sync.RWMutex
	lockGetAllNeedingImport   sync.RWMutex
	lockGetByInstanceUUID     sync.RWMutex
	lockUpdate                sync.RWMutex
}

// Create calls CreateFunc.
func (mock *QueueRepoMock) Create(ctx context.Context, queue migration.QueueEntry) (int64, error) {
	if mock.CreateFunc == nil {
		panic("QueueRepoMock.CreateFunc: method is nil but QueueRepo.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Queue migration.QueueEntry
	}{
		Ctx:   ctx,
		Queue: queue,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, queue)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedQueueRepo.CreateCalls())
func (mock *QueueRepoMock) CreateCalls() []struct {
	Ctx   context.Context
	Queue migration.QueueEntry
} {
	var calls []struct {
		Ctx   context.Context
		Queue migration.QueueEntry
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteAllByBatch calls DeleteAllByBatchFunc.
func (mock *QueueRepoMock) DeleteAllByBatch(ctx context.Context, batch string) error {
	if mock.DeleteAllByBatchFunc == nil {
		panic("QueueRepoMock.DeleteAllByBatchFunc: method is nil but QueueRepo.DeleteAllByBatch was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch string
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockDeleteAllByBatch.Lock()
	mock.calls.DeleteAllByBatch = append(mock.calls.DeleteAllByBatch, callInfo)
	mock.lockDeleteAllByBatch.Unlock()
	return mock.DeleteAllByBatchFunc(ctx, batch)
}

// DeleteAllByBatchCalls gets all the calls that were made to DeleteAllByBatch.
// Check the length with:
//
//	len(mockedQueueRepo.DeleteAllByBatchCalls())
func (mock *QueueRepoMock) DeleteAllByBatchCalls() []struct {
	Ctx   context.Context
	Batch string
} {
	var calls []struct {
		Ctx   context.Context
		Batch string
	}
	mock.lockDeleteAllByBatch.RLock()
	calls = mock.calls.DeleteAllByBatch
	mock.lockDeleteAllByBatch.RUnlock()
	return calls
}

// DeleteByUUID calls DeleteByUUIDFunc.
func (mock *QueueRepoMock) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByUUIDFunc == nil {
		panic("QueueRepoMock.DeleteByUUIDFunc: method is nil but QueueRepo.DeleteByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByUUID.Lock()
	mock.calls.DeleteByUUID = append(mock.calls.DeleteByUUID, callInfo)
	mock.lockDeleteByUUID.Unlock()
	return mock.DeleteByUUIDFunc(ctx, id)
}

// DeleteByUUIDCalls gets all the calls that were made to DeleteByUUID.
// Check the length with:
//
//	len(mockedQueueRepo.DeleteByUUIDCalls())
func (mock *QueueRepoMock) DeleteByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByUUID.RLock()
	calls = mock.calls.DeleteByUUID
	mock.lockDeleteByUUID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *QueueRepoMock) GetAll(ctx context.Context) (migration.QueueEntries, error) {
	if mock.GetAllFunc == nil {
		panic("QueueRepoMock.GetAllFunc: method is nil but QueueRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedQueueRepo.GetAllCalls())
func (mock *QueueRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByBatch calls GetAllByBatchFunc.
func (mock *QueueRepoMock) GetAllByBatch(ctx context.Context, batch string) (migration.QueueEntries, error) {
	if mock.GetAllByBatchFunc == nil {
		panic("QueueRepoMock.GetAllByBatchFunc: method is nil but QueueRepo.GetAllByBatch was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch string
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockGetAllByBatch.Lock()
	mock.calls.GetAllByBatch = append(mock.calls.GetAllByBatch, callInfo)
	mock.lockGetAllByBatch.Unlock()
	return mock.GetAllByBatchFunc(ctx, batch)
}

// GetAllByBatchCalls gets all the calls that were made to GetAllByBatch.
// Check the length with:
//
//	len(mockedQueueRepo.GetAllByBatchCalls())
func (mock *QueueRepoMock) GetAllByBatchCalls() []struct {
	Ctx   context.Context
	Batch string
} {
	var calls []struct {
		Ctx   context.Context
		Batch string
	}
	mock.lockGetAllByBatch.RLock()
	calls = mock.calls.GetAllByBatch
	mock.lockGetAllByBatch.RUnlock()
	return calls
}

// GetAllByBatchAndState calls GetAllByBatchAndStateFunc.
func (mock *QueueRepoMock) GetAllByBatchAndState(ctx context.Context, batch string, status api.MigrationStatusType) (migration.QueueEntries, error) {
	if mock.GetAllByBatchAndStateFunc == nil {
		panic("QueueRepoMock.GetAllByBatchAndStateFunc: method is nil but QueueRepo.GetAllByBatchAndState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Batch  string
		Status api.MigrationStatusType
	}{
		Ctx:    ctx,
		Batch:  batch,
		Status: status,
	}
	mock.lockGetAllByBatchAndState.Lock()
	mock.calls.GetAllByBatchAndState = append(mock.calls.GetAllByBatchAndState, callInfo)
	mock.lockGetAllByBatchAndState.Unlock()
	return mock.GetAllByBatchAndStateFunc(ctx, batch, status)
}

// GetAllByBatchAndStateCalls gets all the calls that were made to GetAllByBatchAndState.
// Check the length with:
//
//	len(mockedQueueRepo.GetAllByBatchAndStateCalls())
func (mock *QueueRepoMock) GetAllByBatchAndStateCalls() []struct {
	Ctx    context.Context
	Batch  string
	Status api.MigrationStatusType
} {
	var calls []struct {
		Ctx    context.Context
		Batch  string
		Status api.MigrationStatusType
	}
	mock.lockGetAllByBatchAndState.RLock()
	calls = mock.calls.GetAllByBatchAndState
	mock.lockGetAllByBatchAndState.RUnlock()
	return calls
}

// GetAllByState calls GetAllByStateFunc.
func (mock *QueueRepoMock) GetAllByState(ctx context.Context, status ...api.MigrationStatusType) (migration.QueueEntries, error) {
	if mock.GetAllByStateFunc == nil {
		panic("QueueRepoMock.GetAllByStateFunc: method is nil but QueueRepo.GetAllByState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status []api.MigrationStatusType
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockGetAllByState.Lock()
	mock.calls.GetAllByState = append(mock.calls.GetAllByState, callInfo)
	mock.lockGetAllByState.Unlock()
	return mock.GetAllByStateFunc(ctx, status...)
}

// GetAllByStateCalls gets all the calls that were made to GetAllByState.
// Check the length with:
//
//	len(mockedQueueRepo.GetAllByStateCalls())
func (mock *QueueRepoMock) GetAllByStateCalls() []struct {
	Ctx    context.Context
	Status []api.MigrationStatusType
} {
	var calls []struct {
		Ctx    context.Context
		Status []api.MigrationStatusType
	}
	mock.lockGetAllByState.RLock()
	calls = mock.calls.GetAllByState
	mock.lockGetAllByState.RUnlock()
	return calls
}

// GetAllNeedingImport calls GetAllNeedingImportFunc.
func (mock *QueueRepoMock) GetAllNeedingImport(ctx context.Context, batch string, needsDiskImport bool) (migration.QueueEntries, error) {
	if mock.GetAllNeedingImportFunc == nil {
		panic("QueueRepoMock.GetAllNeedingImportFunc: method is nil but QueueRepo.GetAllNeedingImport was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Batch           string
		NeedsDiskImport bool
	}{
		Ctx:             ctx,
		Batch:           batch,
		NeedsDiskImport: needsDiskImport,
	}
	mock.lockGetAllNeedingImport.Lock()
	mock.calls.GetAllNeedingImport = append(mock.calls.GetAllNeedingImport, callInfo)
	mock.lockGetAllNeedingImport.Unlock()
	return mock.GetAllNeedingImportFunc(ctx, batch, needsDiskImport)
}

// GetAllNeedingImportCalls gets all the calls that were made to GetAllNeedingImport.
// Check the length with:
//
//	len(mockedQueueRepo.GetAllNeedingImportCalls())
func (mock *QueueRepoMock) GetAllNeedingImportCalls() []struct {
	Ctx             context.Context
	Batch           string
	NeedsDiskImport bool
} {
	var calls []struct {
		Ctx             context.Context
		Batch           string
		NeedsDiskImport bool
	}
	mock.lockGetAllNeedingImport.RLock()
	calls = mock.calls.GetAllNeedingImport
	mock.lockGetAllNeedingImport.RUnlock()
	return calls
}

// GetByInstanceUUID calls GetByInstanceUUIDFunc.
func (mock *QueueRepoMock) GetByInstanceUUID(ctx context.Context, id uuid.UUID) (*migration.QueueEntry, error) {
	if mock.GetByInstanceUUIDFunc == nil {
		panic("QueueRepoMock.GetByInstanceUUIDFunc: method is nil but QueueRepo.GetByInstanceUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByInstanceUUID.Lock()
	mock.calls.GetByInstanceUUID = append(mock.calls.GetByInstanceUUID, callInfo)
	mock.lockGetByInstanceUUID.Unlock()
	return mock.GetByInstanceUUIDFunc(ctx, id)
}

// GetByInstanceUUIDCalls gets all the calls that were made to GetByInstanceUUID.
// Check the length with:
//
//	len(mockedQueueRepo.GetByInstanceUUIDCalls())
func (mock *QueueRepoMock) GetByInstanceUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByInstanceUUID.RLock()
	calls = mock.calls.GetByInstanceUUID
	mock.lockGetByInstanceUUID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *QueueRepoMock) Update(ctx context.Context, entry migration.QueueEntry) error {
	if mock.UpdateFunc == nil {
		panic("QueueRepoMock.UpdateFunc: method is nil but QueueRepo.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Entry migration.QueueEntry
	}{
		Ctx:   ctx,
		Entry: entry,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, entry)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedQueueRepo.UpdateCalls())
func (mock *QueueRepoMock) UpdateCalls() []struct {
	Ctx   context.Context
	Entry migration.QueueEntry
} {
	var calls []struct {
		Ctx   context.Context
		Entry migration.QueueEntry
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
