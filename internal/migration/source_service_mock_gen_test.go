// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package migration_test

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
)

// Ensure, that SourceServiceMock does implement migration.SourceService.
// If this is not the case, regenerate this file with moq.
var _ migration.SourceService = &SourceServiceMock{}

// SourceServiceMock is a mock implementation of migration.SourceService.
//
//	func TestSomethingThatUsesSourceService(t *testing.T) {
//
//		// make and configure a mocked migration.SourceService
//		mockedSourceService := &SourceServiceMock{
//			CreateFunc: func(ctx context.Context, source migration.Source) (migration.Source, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string, instanceService migration.InstanceService) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context, sourceTypes ...api.SourceType) (migration.Sources, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllNamesFunc: func(ctx context.Context, sourceTypes ...api.SourceType) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (*migration.Source, error) {
//				panic("mock out the GetByName method")
//			},
//			GetCachedImportsFunc: func(sourceName string) int {
//				panic("mock out the GetCachedImports method")
//			},
//			InitImportCacheFunc: func(initial map[string]int) error {
//				panic("mock out the InitImportCache method")
//			},
//			RecordActiveImportFunc: func(sourceName string)  {
//				panic("mock out the RecordActiveImport method")
//			},
//			RemoveActiveImportFunc: func(sourceName string)  {
//				panic("mock out the RemoveActiveImport method")
//			},
//			UpdateFunc: func(ctx context.Context, name string, source *migration.Source, instanceService migration.InstanceService) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedSourceService in code that requires migration.SourceService
//		// and then make assertions.
//
//	}
type SourceServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, source migration.Source) (migration.Source, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string, instanceService migration.InstanceService) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, sourceTypes ...api.SourceType) (migration.Sources, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context, sourceTypes ...api.SourceType) ([]string, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (*migration.Source, error)

	// GetCachedImportsFunc mocks the GetCachedImports method.
	GetCachedImportsFunc func(sourceName string) int

	// InitImportCacheFunc mocks the InitImportCache method.
	InitImportCacheFunc func(initial map[string]int) error

	// RecordActiveImportFunc mocks the RecordActiveImport method.
	RecordActiveImportFunc func(sourceName string)

	// RemoveActiveImportFunc mocks the RemoveActiveImport method.
	RemoveActiveImportFunc func(sourceName string)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, name string, source *migration.Source, instanceService migration.InstanceService) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Source is the source argument value.
			Source migration.Source
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// InstanceService is the instanceService argument value.
			InstanceService migration.InstanceService
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SourceTypes is the sourceTypes argument value.
			SourceTypes []api.SourceType
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SourceTypes is the sourceTypes argument value.
			SourceTypes []api.SourceType
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetCachedImports holds details about calls to the GetCachedImports method.
		GetCachedImports []struct {
			// SourceName is the sourceName argument value.
			SourceName string
		}
		// InitImportCache holds details about calls to the InitImportCache method.
		InitImportCache []struct {
			// Initial is the initial argument value.
			Initial map[string]int
		}
		// RecordActiveImport holds details about calls to the RecordActiveImport method.
		RecordActiveImport []struct {
			// SourceName is the sourceName argument value.
			SourceName string
		}
		// RemoveActiveImport holds details about calls to the RemoveActiveImport method.
		RemoveActiveImport []struct {
			// SourceName is the sourceName argument value.
			SourceName string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Source is the source argument value.
			Source *migration.Source
			// InstanceService is the instanceService argument value.
			InstanceService migration.InstanceService
		}
	}
	lockCreate             sync.RWMutex
	lockDeleteByName       sync.RWMutex
	lockGetAll             sync.RWMutex
	lockGetAllNames        sync.RWMutex
	lockGetByName          sync.RWMutex
	lockGetCachedImports   sync.RWMutex
	lockInitImportCache    sync.RWMutex
	lockRecordActiveImport sync.RWMutex
	lockRemoveActiveImport sync.RWMutex
	lockUpdate             sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SourceServiceMock) Create(ctx context.Context, source migration.Source) (migration.Source, error) {
	if mock.CreateFunc == nil {
		panic("SourceServiceMock.CreateFunc: method is nil but SourceService.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Source migration.Source
	}{
		Ctx:    ctx,
		Source: source,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, source)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedSourceService.CreateCalls())
func (mock *SourceServiceMock) CreateCalls() []struct {
	Ctx    context.Context
	Source migration.Source
} {
	var calls []struct {
		Ctx    context.Context
		Source migration.Source
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *SourceServiceMock) DeleteByName(ctx context.Context, name string, instanceService migration.InstanceService) error {
	if mock.DeleteByNameFunc == nil {
		panic("SourceServiceMock.DeleteByNameFunc: method is nil but SourceService.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Name            string
		InstanceService migration.InstanceService
	}{
		Ctx:             ctx,
		Name:            name,
		InstanceService: instanceService,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name, instanceService)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedSourceService.DeleteByNameCalls())
func (mock *SourceServiceMock) DeleteByNameCalls() []struct {
	Ctx             context.Context
	Name            string
	InstanceService migration.InstanceService
} {
	var calls []struct {
		Ctx             context.Context
		Name            string
		InstanceService migration.InstanceService
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *SourceServiceMock) GetAll(ctx context.Context, sourceTypes ...api.SourceType) (migration.Sources, error) {
	if mock.GetAllFunc == nil {
		panic("SourceServiceMock.GetAllFunc: method is nil but SourceService.GetAll was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		SourceTypes []api.SourceType
	}{
		Ctx:         ctx,
		SourceTypes: sourceTypes,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx, sourceTypes...)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedSourceService.GetAllCalls())
func (mock *SourceServiceMock) GetAllCalls() []struct {
	Ctx         context.Context
	SourceTypes []api.SourceType
} {
	var calls []struct {
		Ctx         context.Context
		SourceTypes []api.SourceType
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *SourceServiceMock) GetAllNames(ctx context.Context, sourceTypes ...api.SourceType) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("SourceServiceMock.GetAllNamesFunc: method is nil but SourceService.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		SourceTypes []api.SourceType
	}{
		Ctx:         ctx,
		SourceTypes: sourceTypes,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx, sourceTypes...)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedSourceService.GetAllNamesCalls())
func (mock *SourceServiceMock) GetAllNamesCalls() []struct {
	Ctx         context.Context
	SourceTypes []api.SourceType
} {
	var calls []struct {
		Ctx         context.Context
		SourceTypes []api.SourceType
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *SourceServiceMock) GetByName(ctx context.Context, name string) (*migration.Source, error) {
	if mock.GetByNameFunc == nil {
		panic("SourceServiceMock.GetByNameFunc: method is nil but SourceService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedSourceService.GetByNameCalls())
func (mock *SourceServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// GetCachedImports calls GetCachedImportsFunc.
func (mock *SourceServiceMock) GetCachedImports(sourceName string) int {
	if mock.GetCachedImportsFunc == nil {
		panic("SourceServiceMock.GetCachedImportsFunc: method is nil but SourceService.GetCachedImports was just called")
	}
	callInfo := struct {
		SourceName string
	}{
		SourceName: sourceName,
	}
	mock.lockGetCachedImports.Lock()
	mock.calls.GetCachedImports = append(mock.calls.GetCachedImports, callInfo)
	mock.lockGetCachedImports.Unlock()
	return mock.GetCachedImportsFunc(sourceName)
}

// GetCachedImportsCalls gets all the calls that were made to GetCachedImports.
// Check the length with:
//
//	len(mockedSourceService.GetCachedImportsCalls())
func (mock *SourceServiceMock) GetCachedImportsCalls() []struct {
	SourceName string
} {
	var calls []struct {
		SourceName string
	}
	mock.lockGetCachedImports.RLock()
	calls = mock.calls.GetCachedImports
	mock.lockGetCachedImports.RUnlock()
	return calls
}

// InitImportCache calls InitImportCacheFunc.
func (mock *SourceServiceMock) InitImportCache(initial map[string]int) error {
	if mock.InitImportCacheFunc == nil {
		panic("SourceServiceMock.InitImportCacheFunc: method is nil but SourceService.InitImportCache was just called")
	}
	callInfo := struct {
		Initial map[string]int
	}{
		Initial: initial,
	}
	mock.lockInitImportCache.Lock()
	mock.calls.InitImportCache = append(mock.calls.InitImportCache, callInfo)
	mock.lockInitImportCache.Unlock()
	return mock.InitImportCacheFunc(initial)
}

// InitImportCacheCalls gets all the calls that were made to InitImportCache.
// Check the length with:
//
//	len(mockedSourceService.InitImportCacheCalls())
func (mock *SourceServiceMock) InitImportCacheCalls() []struct {
	Initial map[string]int
} {
	var calls []struct {
		Initial map[string]int
	}
	mock.lockInitImportCache.RLock()
	calls = mock.calls.InitImportCache
	mock.lockInitImportCache.RUnlock()
	return calls
}

// RecordActiveImport calls RecordActiveImportFunc.
func (mock *SourceServiceMock) RecordActiveImport(sourceName string) {
	if mock.RecordActiveImportFunc == nil {
		panic("SourceServiceMock.RecordActiveImportFunc: method is nil but SourceService.RecordActiveImport was just called")
	}
	callInfo := struct {
		SourceName string
	}{
		SourceName: sourceName,
	}
	mock.lockRecordActiveImport.Lock()
	mock.calls.RecordActiveImport = append(mock.calls.RecordActiveImport, callInfo)
	mock.lockRecordActiveImport.Unlock()
	mock.RecordActiveImportFunc(sourceName)
}

// RecordActiveImportCalls gets all the calls that were made to RecordActiveImport.
// Check the length with:
//
//	len(mockedSourceService.RecordActiveImportCalls())
func (mock *SourceServiceMock) RecordActiveImportCalls() []struct {
	SourceName string
} {
	var calls []struct {
		SourceName string
	}
	mock.lockRecordActiveImport.RLock()
	calls = mock.calls.RecordActiveImport
	mock.lockRecordActiveImport.RUnlock()
	return calls
}

// RemoveActiveImport calls RemoveActiveImportFunc.
func (mock *SourceServiceMock) RemoveActiveImport(sourceName string) {
	if mock.RemoveActiveImportFunc == nil {
		panic("SourceServiceMock.RemoveActiveImportFunc: method is nil but SourceService.RemoveActiveImport was just called")
	}
	callInfo := struct {
		SourceName string
	}{
		SourceName: sourceName,
	}
	mock.lockRemoveActiveImport.Lock()
	mock.calls.RemoveActiveImport = append(mock.calls.RemoveActiveImport, callInfo)
	mock.lockRemoveActiveImport.Unlock()
	mock.RemoveActiveImportFunc(sourceName)
}

// RemoveActiveImportCalls gets all the calls that were made to RemoveActiveImport.
// Check the length with:
//
//	len(mockedSourceService.RemoveActiveImportCalls())
func (mock *SourceServiceMock) RemoveActiveImportCalls() []struct {
	SourceName string
} {
	var calls []struct {
		SourceName string
	}
	mock.lockRemoveActiveImport.RLock()
	calls = mock.calls.RemoveActiveImport
	mock.lockRemoveActiveImport.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SourceServiceMock) Update(ctx context.Context, name string, source *migration.Source, instanceService migration.InstanceService) error {
	if mock.UpdateFunc == nil {
		panic("SourceServiceMock.UpdateFunc: method is nil but SourceService.Update was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Name            string
		Source          *migration.Source
		InstanceService migration.InstanceService
	}{
		Ctx:             ctx,
		Name:            name,
		Source:          source,
		InstanceService: instanceService,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, name, source, instanceService)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedSourceService.UpdateCalls())
func (mock *SourceServiceMock) UpdateCalls() []struct {
	Ctx             context.Context
	Name            string
	Source          *migration.Source
	InstanceService migration.InstanceService
} {
	var calls []struct {
		Ctx             context.Context
		Name            string
		Source          *migration.Source
		InstanceService migration.InstanceService
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
