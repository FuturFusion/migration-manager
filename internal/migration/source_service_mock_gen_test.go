// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package migration_test

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
)

// Ensure, that SourceServiceMock does implement migration.SourceService.
// If this is not the case, regenerate this file with moq.
var _ migration.SourceService = &SourceServiceMock{}

// SourceServiceMock is a mock implementation of migration.SourceService.
//
//	func TestSomethingThatUsesSourceService(t *testing.T) {
//
//		// make and configure a mocked migration.SourceService
//		mockedSourceService := &SourceServiceMock{
//			CreateFunc: func(ctx context.Context, source migration.Source) (migration.Source, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Sources, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllNamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (migration.Source, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (migration.Source, error) {
//				panic("mock out the GetByName method")
//			},
//			UpdateByNameFunc: func(ctx context.Context, source migration.Source) (migration.Source, error) {
//				panic("mock out the UpdateByName method")
//			},
//		}
//
//		// use mockedSourceService in code that requires migration.SourceService
//		// and then make assertions.
//
//	}
type SourceServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, source migration.Source) (migration.Source, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Sources, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context) ([]string, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (migration.Source, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (migration.Source, error)

	// UpdateByNameFunc mocks the UpdateByName method.
	UpdateByNameFunc func(ctx context.Context, source migration.Source) (migration.Source, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Source is the source argument value.
			Source migration.Source
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// UpdateByName holds details about calls to the UpdateByName method.
		UpdateByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Source is the source argument value.
			Source migration.Source
		}
	}
	lockCreate       sync.RWMutex
	lockDeleteByName sync.RWMutex
	lockGetAll       sync.RWMutex
	lockGetAllNames  sync.RWMutex
	lockGetByID      sync.RWMutex
	lockGetByName    sync.RWMutex
	lockUpdateByName sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SourceServiceMock) Create(ctx context.Context, source migration.Source) (migration.Source, error) {
	if mock.CreateFunc == nil {
		panic("SourceServiceMock.CreateFunc: method is nil but SourceService.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Source migration.Source
	}{
		Ctx:    ctx,
		Source: source,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, source)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedSourceService.CreateCalls())
func (mock *SourceServiceMock) CreateCalls() []struct {
	Ctx    context.Context
	Source migration.Source
} {
	var calls []struct {
		Ctx    context.Context
		Source migration.Source
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *SourceServiceMock) DeleteByName(ctx context.Context, name string) error {
	if mock.DeleteByNameFunc == nil {
		panic("SourceServiceMock.DeleteByNameFunc: method is nil but SourceService.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedSourceService.DeleteByNameCalls())
func (mock *SourceServiceMock) DeleteByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *SourceServiceMock) GetAll(ctx context.Context) (migration.Sources, error) {
	if mock.GetAllFunc == nil {
		panic("SourceServiceMock.GetAllFunc: method is nil but SourceService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedSourceService.GetAllCalls())
func (mock *SourceServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *SourceServiceMock) GetAllNames(ctx context.Context) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("SourceServiceMock.GetAllNamesFunc: method is nil but SourceService.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedSourceService.GetAllNamesCalls())
func (mock *SourceServiceMock) GetAllNamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *SourceServiceMock) GetByID(ctx context.Context, id int) (migration.Source, error) {
	if mock.GetByIDFunc == nil {
		panic("SourceServiceMock.GetByIDFunc: method is nil but SourceService.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedSourceService.GetByIDCalls())
func (mock *SourceServiceMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *SourceServiceMock) GetByName(ctx context.Context, name string) (migration.Source, error) {
	if mock.GetByNameFunc == nil {
		panic("SourceServiceMock.GetByNameFunc: method is nil but SourceService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedSourceService.GetByNameCalls())
func (mock *SourceServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// UpdateByName calls UpdateByNameFunc.
func (mock *SourceServiceMock) UpdateByName(ctx context.Context, source migration.Source) (migration.Source, error) {
	if mock.UpdateByNameFunc == nil {
		panic("SourceServiceMock.UpdateByNameFunc: method is nil but SourceService.UpdateByName was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Source migration.Source
	}{
		Ctx:    ctx,
		Source: source,
	}
	mock.lockUpdateByName.Lock()
	mock.calls.UpdateByName = append(mock.calls.UpdateByName, callInfo)
	mock.lockUpdateByName.Unlock()
	return mock.UpdateByNameFunc(ctx, source)
}

// UpdateByNameCalls gets all the calls that were made to UpdateByName.
// Check the length with:
//
//	len(mockedSourceService.UpdateByNameCalls())
func (mock *SourceServiceMock) UpdateByNameCalls() []struct {
	Ctx    context.Context
	Source migration.Source
} {
	var calls []struct {
		Ctx    context.Context
		Source migration.Source
	}
	mock.lockUpdateByName.RLock()
	calls = mock.calls.UpdateByName
	mock.lockUpdateByName.RUnlock()
	return calls
}
