// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"crypto/x509"
	"log/slog"

	_sourceMigration "github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
)

// SourceEndpointWithSlog implements _sourceMigration.SourceEndpoint that is instrumented with slog logger
type SourceEndpointWithSlog struct {
	_log  *slog.Logger
	_base _sourceMigration.SourceEndpoint
}

// NewSourceEndpointWithSlog instruments an implementation of the _sourceMigration.SourceEndpoint with simple logging
func NewSourceEndpointWithSlog(base _sourceMigration.SourceEndpoint, log *slog.Logger) SourceEndpointWithSlog {
	return SourceEndpointWithSlog{
		_base: base,
		_log:  log,
	}
}

// Connect implements _sourceMigration.SourceEndpoint
func (_d SourceEndpointWithSlog) Connect(ctx context.Context) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("SourceEndpointWithSlog: calling Connect")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("SourceEndpointWithSlog: method Connect returned an error")
		} else {
			log.Debug("SourceEndpointWithSlog: method Connect finished")
		}
	}()
	return _d._base.Connect(ctx)
}

// DoBasicConnectivityCheck implements _sourceMigration.SourceEndpoint
func (_d SourceEndpointWithSlog) DoBasicConnectivityCheck() (e1 api.ExternalConnectivityStatus, cp1 *x509.Certificate) {
	_d._log.Debug("SourceEndpointWithSlog: calling DoBasicConnectivityCheck")
	defer func() {
		log := _d._log.With(
			slog.Any("e1", e1),
			slog.Any("cp1", cp1),
		)
		log.Debug("SourceEndpointWithSlog: method DoBasicConnectivityCheck finished")
	}()
	return _d._base.DoBasicConnectivityCheck()
}
