// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"crypto/x509"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
)

// Ensure, that TargetEndpointMock does implement migration.TargetEndpoint.
// If this is not the case, regenerate this file with moq.
var _ migration.TargetEndpoint = &TargetEndpointMock{}

// TargetEndpointMock is a mock implementation of migration.TargetEndpoint.
//
//	func TestSomethingThatUsesTargetEndpoint(t *testing.T) {
//
//		// make and configure a mocked migration.TargetEndpoint
//		mockedTargetEndpoint := &TargetEndpointMock{
//			ConnectFunc: func(ctx context.Context) error {
//				panic("mock out the Connect method")
//			},
//			DoBasicConnectivityCheckFunc: func() (api.ExternalConnectivityStatus, *x509.Certificate) {
//				panic("mock out the DoBasicConnectivityCheck method")
//			},
//			IsWaitingForOIDCTokensFunc: func() bool {
//				panic("mock out the IsWaitingForOIDCTokens method")
//			},
//		}
//
//		// use mockedTargetEndpoint in code that requires migration.TargetEndpoint
//		// and then make assertions.
//
//	}
type TargetEndpointMock struct {
	// ConnectFunc mocks the Connect method.
	ConnectFunc func(ctx context.Context) error

	// DoBasicConnectivityCheckFunc mocks the DoBasicConnectivityCheck method.
	DoBasicConnectivityCheckFunc func() (api.ExternalConnectivityStatus, *x509.Certificate)

	// IsWaitingForOIDCTokensFunc mocks the IsWaitingForOIDCTokens method.
	IsWaitingForOIDCTokensFunc func() bool

	// calls tracks calls to the methods.
	calls struct {
		// Connect holds details about calls to the Connect method.
		Connect []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// DoBasicConnectivityCheck holds details about calls to the DoBasicConnectivityCheck method.
		DoBasicConnectivityCheck []struct {
		}
		// IsWaitingForOIDCTokens holds details about calls to the IsWaitingForOIDCTokens method.
		IsWaitingForOIDCTokens []struct {
		}
	}
	lockConnect                  sync.RWMutex
	lockDoBasicConnectivityCheck sync.RWMutex
	lockIsWaitingForOIDCTokens   sync.RWMutex
}

// Connect calls ConnectFunc.
func (mock *TargetEndpointMock) Connect(ctx context.Context) error {
	if mock.ConnectFunc == nil {
		panic("TargetEndpointMock.ConnectFunc: method is nil but TargetEndpoint.Connect was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	mock.lockConnect.Unlock()
	return mock.ConnectFunc(ctx)
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//
//	len(mockedTargetEndpoint.ConnectCalls())
func (mock *TargetEndpointMock) ConnectCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockConnect.RLock()
	calls = mock.calls.Connect
	mock.lockConnect.RUnlock()
	return calls
}

// DoBasicConnectivityCheck calls DoBasicConnectivityCheckFunc.
func (mock *TargetEndpointMock) DoBasicConnectivityCheck() (api.ExternalConnectivityStatus, *x509.Certificate) {
	if mock.DoBasicConnectivityCheckFunc == nil {
		panic("TargetEndpointMock.DoBasicConnectivityCheckFunc: method is nil but TargetEndpoint.DoBasicConnectivityCheck was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDoBasicConnectivityCheck.Lock()
	mock.calls.DoBasicConnectivityCheck = append(mock.calls.DoBasicConnectivityCheck, callInfo)
	mock.lockDoBasicConnectivityCheck.Unlock()
	return mock.DoBasicConnectivityCheckFunc()
}

// DoBasicConnectivityCheckCalls gets all the calls that were made to DoBasicConnectivityCheck.
// Check the length with:
//
//	len(mockedTargetEndpoint.DoBasicConnectivityCheckCalls())
func (mock *TargetEndpointMock) DoBasicConnectivityCheckCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDoBasicConnectivityCheck.RLock()
	calls = mock.calls.DoBasicConnectivityCheck
	mock.lockDoBasicConnectivityCheck.RUnlock()
	return calls
}

// IsWaitingForOIDCTokens calls IsWaitingForOIDCTokensFunc.
func (mock *TargetEndpointMock) IsWaitingForOIDCTokens() bool {
	if mock.IsWaitingForOIDCTokensFunc == nil {
		panic("TargetEndpointMock.IsWaitingForOIDCTokensFunc: method is nil but TargetEndpoint.IsWaitingForOIDCTokens was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsWaitingForOIDCTokens.Lock()
	mock.calls.IsWaitingForOIDCTokens = append(mock.calls.IsWaitingForOIDCTokens, callInfo)
	mock.lockIsWaitingForOIDCTokens.Unlock()
	return mock.IsWaitingForOIDCTokensFunc()
}

// IsWaitingForOIDCTokensCalls gets all the calls that were made to IsWaitingForOIDCTokens.
// Check the length with:
//
//	len(mockedTargetEndpoint.IsWaitingForOIDCTokensCalls())
func (mock *TargetEndpointMock) IsWaitingForOIDCTokensCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsWaitingForOIDCTokens.RLock()
	calls = mock.calls.IsWaitingForOIDCTokens
	mock.lockIsWaitingForOIDCTokens.RUnlock()
	return calls
}
