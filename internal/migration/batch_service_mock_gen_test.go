// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package migration_test

import (
	"context"
	"sync"

	"github.com/FuturFusion/migration-manager/internal/migration"
	"github.com/FuturFusion/migration-manager/shared/api"
)

// Ensure, that BatchServiceMock does implement migration.BatchService.
// If this is not the case, regenerate this file with moq.
var _ migration.BatchService = &BatchServiceMock{}

// BatchServiceMock is a mock implementation of migration.BatchService.
//
//	func TestSomethingThatUsesBatchService(t *testing.T) {
//
//		// make and configure a mocked migration.BatchService
//		mockedBatchService := &BatchServiceMock{
//			CreateFunc: func(ctx context.Context, batch migration.Batch) (migration.Batch, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (migration.Batches, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByStateFunc: func(ctx context.Context, status api.BatchStatusType) (migration.Batches, error) {
//				panic("mock out the GetAllByState method")
//			},
//			GetAllNamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetAllNamesByStateFunc: func(ctx context.Context, status api.BatchStatusType) ([]string, error) {
//				panic("mock out the GetAllNamesByState method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (*migration.Batch, error) {
//				panic("mock out the GetByName method")
//			},
//			RenameFunc: func(ctx context.Context, oldName string, newName string) error {
//				panic("mock out the Rename method")
//			},
//			StartBatchByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the StartBatchByName method")
//			},
//			StopBatchByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the StopBatchByName method")
//			},
//			UpdateFunc: func(ctx context.Context, batch *migration.Batch) error {
//				panic("mock out the Update method")
//			},
//			UpdateInstancesAssignedToBatchFunc: func(ctx context.Context, batch migration.Batch) error {
//				panic("mock out the UpdateInstancesAssignedToBatch method")
//			},
//			UpdateStatusByNameFunc: func(ctx context.Context, name string, status api.BatchStatusType, statusMessage string) (*migration.Batch, error) {
//				panic("mock out the UpdateStatusByName method")
//			},
//		}
//
//		// use mockedBatchService in code that requires migration.BatchService
//		// and then make assertions.
//
//	}
type BatchServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, batch migration.Batch) (migration.Batch, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (migration.Batches, error)

	// GetAllByStateFunc mocks the GetAllByState method.
	GetAllByStateFunc func(ctx context.Context, status api.BatchStatusType) (migration.Batches, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context) ([]string, error)

	// GetAllNamesByStateFunc mocks the GetAllNamesByState method.
	GetAllNamesByStateFunc func(ctx context.Context, status api.BatchStatusType) ([]string, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (*migration.Batch, error)

	// RenameFunc mocks the Rename method.
	RenameFunc func(ctx context.Context, oldName string, newName string) error

	// StartBatchByNameFunc mocks the StartBatchByName method.
	StartBatchByNameFunc func(ctx context.Context, name string) error

	// StopBatchByNameFunc mocks the StopBatchByName method.
	StopBatchByNameFunc func(ctx context.Context, name string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, batch *migration.Batch) error

	// UpdateInstancesAssignedToBatchFunc mocks the UpdateInstancesAssignedToBatch method.
	UpdateInstancesAssignedToBatchFunc func(ctx context.Context, batch migration.Batch) error

	// UpdateStatusByNameFunc mocks the UpdateStatusByName method.
	UpdateStatusByNameFunc func(ctx context.Context, name string, status api.BatchStatusType, statusMessage string) (*migration.Batch, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch migration.Batch
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByState holds details about calls to the GetAllByState method.
		GetAllByState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status api.BatchStatusType
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllNamesByState holds details about calls to the GetAllNamesByState method.
		GetAllNamesByState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status api.BatchStatusType
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// Rename holds details about calls to the Rename method.
		Rename []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OldName is the oldName argument value.
			OldName string
			// NewName is the newName argument value.
			NewName string
		}
		// StartBatchByName holds details about calls to the StartBatchByName method.
		StartBatchByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// StopBatchByName holds details about calls to the StopBatchByName method.
		StopBatchByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch *migration.Batch
		}
		// UpdateInstancesAssignedToBatch holds details about calls to the UpdateInstancesAssignedToBatch method.
		UpdateInstancesAssignedToBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Batch is the batch argument value.
			Batch migration.Batch
		}
		// UpdateStatusByName holds details about calls to the UpdateStatusByName method.
		UpdateStatusByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Status is the status argument value.
			Status api.BatchStatusType
			// StatusMessage is the statusMessage argument value.
			StatusMessage string
		}
	}
	lockCreate                         sync.RWMutex
	lockDeleteByName                   sync.RWMutex
	lockGetAll                         sync.RWMutex
	lockGetAllByState                  sync.RWMutex
	lockGetAllNames                    sync.RWMutex
	lockGetAllNamesByState             sync.RWMutex
	lockGetByName                      sync.RWMutex
	lockRename                         sync.RWMutex
	lockStartBatchByName               sync.RWMutex
	lockStopBatchByName                sync.RWMutex
	lockUpdate                         sync.RWMutex
	lockUpdateInstancesAssignedToBatch sync.RWMutex
	lockUpdateStatusByName             sync.RWMutex
}

// Create calls CreateFunc.
func (mock *BatchServiceMock) Create(ctx context.Context, batch migration.Batch) (migration.Batch, error) {
	if mock.CreateFunc == nil {
		panic("BatchServiceMock.CreateFunc: method is nil but BatchService.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch migration.Batch
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, batch)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedBatchService.CreateCalls())
func (mock *BatchServiceMock) CreateCalls() []struct {
	Ctx   context.Context
	Batch migration.Batch
} {
	var calls []struct {
		Ctx   context.Context
		Batch migration.Batch
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *BatchServiceMock) DeleteByName(ctx context.Context, name string) error {
	if mock.DeleteByNameFunc == nil {
		panic("BatchServiceMock.DeleteByNameFunc: method is nil but BatchService.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedBatchService.DeleteByNameCalls())
func (mock *BatchServiceMock) DeleteByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *BatchServiceMock) GetAll(ctx context.Context) (migration.Batches, error) {
	if mock.GetAllFunc == nil {
		panic("BatchServiceMock.GetAllFunc: method is nil but BatchService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedBatchService.GetAllCalls())
func (mock *BatchServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByState calls GetAllByStateFunc.
func (mock *BatchServiceMock) GetAllByState(ctx context.Context, status api.BatchStatusType) (migration.Batches, error) {
	if mock.GetAllByStateFunc == nil {
		panic("BatchServiceMock.GetAllByStateFunc: method is nil but BatchService.GetAllByState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockGetAllByState.Lock()
	mock.calls.GetAllByState = append(mock.calls.GetAllByState, callInfo)
	mock.lockGetAllByState.Unlock()
	return mock.GetAllByStateFunc(ctx, status)
}

// GetAllByStateCalls gets all the calls that were made to GetAllByState.
// Check the length with:
//
//	len(mockedBatchService.GetAllByStateCalls())
func (mock *BatchServiceMock) GetAllByStateCalls() []struct {
	Ctx    context.Context
	Status api.BatchStatusType
} {
	var calls []struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}
	mock.lockGetAllByState.RLock()
	calls = mock.calls.GetAllByState
	mock.lockGetAllByState.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *BatchServiceMock) GetAllNames(ctx context.Context) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("BatchServiceMock.GetAllNamesFunc: method is nil but BatchService.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedBatchService.GetAllNamesCalls())
func (mock *BatchServiceMock) GetAllNamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetAllNamesByState calls GetAllNamesByStateFunc.
func (mock *BatchServiceMock) GetAllNamesByState(ctx context.Context, status api.BatchStatusType) ([]string, error) {
	if mock.GetAllNamesByStateFunc == nil {
		panic("BatchServiceMock.GetAllNamesByStateFunc: method is nil but BatchService.GetAllNamesByState was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockGetAllNamesByState.Lock()
	mock.calls.GetAllNamesByState = append(mock.calls.GetAllNamesByState, callInfo)
	mock.lockGetAllNamesByState.Unlock()
	return mock.GetAllNamesByStateFunc(ctx, status)
}

// GetAllNamesByStateCalls gets all the calls that were made to GetAllNamesByState.
// Check the length with:
//
//	len(mockedBatchService.GetAllNamesByStateCalls())
func (mock *BatchServiceMock) GetAllNamesByStateCalls() []struct {
	Ctx    context.Context
	Status api.BatchStatusType
} {
	var calls []struct {
		Ctx    context.Context
		Status api.BatchStatusType
	}
	mock.lockGetAllNamesByState.RLock()
	calls = mock.calls.GetAllNamesByState
	mock.lockGetAllNamesByState.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *BatchServiceMock) GetByName(ctx context.Context, name string) (*migration.Batch, error) {
	if mock.GetByNameFunc == nil {
		panic("BatchServiceMock.GetByNameFunc: method is nil but BatchService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedBatchService.GetByNameCalls())
func (mock *BatchServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// Rename calls RenameFunc.
func (mock *BatchServiceMock) Rename(ctx context.Context, oldName string, newName string) error {
	if mock.RenameFunc == nil {
		panic("BatchServiceMock.RenameFunc: method is nil but BatchService.Rename was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		OldName string
		NewName string
	}{
		Ctx:     ctx,
		OldName: oldName,
		NewName: newName,
	}
	mock.lockRename.Lock()
	mock.calls.Rename = append(mock.calls.Rename, callInfo)
	mock.lockRename.Unlock()
	return mock.RenameFunc(ctx, oldName, newName)
}

// RenameCalls gets all the calls that were made to Rename.
// Check the length with:
//
//	len(mockedBatchService.RenameCalls())
func (mock *BatchServiceMock) RenameCalls() []struct {
	Ctx     context.Context
	OldName string
	NewName string
} {
	var calls []struct {
		Ctx     context.Context
		OldName string
		NewName string
	}
	mock.lockRename.RLock()
	calls = mock.calls.Rename
	mock.lockRename.RUnlock()
	return calls
}

// StartBatchByName calls StartBatchByNameFunc.
func (mock *BatchServiceMock) StartBatchByName(ctx context.Context, name string) error {
	if mock.StartBatchByNameFunc == nil {
		panic("BatchServiceMock.StartBatchByNameFunc: method is nil but BatchService.StartBatchByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockStartBatchByName.Lock()
	mock.calls.StartBatchByName = append(mock.calls.StartBatchByName, callInfo)
	mock.lockStartBatchByName.Unlock()
	return mock.StartBatchByNameFunc(ctx, name)
}

// StartBatchByNameCalls gets all the calls that were made to StartBatchByName.
// Check the length with:
//
//	len(mockedBatchService.StartBatchByNameCalls())
func (mock *BatchServiceMock) StartBatchByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockStartBatchByName.RLock()
	calls = mock.calls.StartBatchByName
	mock.lockStartBatchByName.RUnlock()
	return calls
}

// StopBatchByName calls StopBatchByNameFunc.
func (mock *BatchServiceMock) StopBatchByName(ctx context.Context, name string) error {
	if mock.StopBatchByNameFunc == nil {
		panic("BatchServiceMock.StopBatchByNameFunc: method is nil but BatchService.StopBatchByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockStopBatchByName.Lock()
	mock.calls.StopBatchByName = append(mock.calls.StopBatchByName, callInfo)
	mock.lockStopBatchByName.Unlock()
	return mock.StopBatchByNameFunc(ctx, name)
}

// StopBatchByNameCalls gets all the calls that were made to StopBatchByName.
// Check the length with:
//
//	len(mockedBatchService.StopBatchByNameCalls())
func (mock *BatchServiceMock) StopBatchByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockStopBatchByName.RLock()
	calls = mock.calls.StopBatchByName
	mock.lockStopBatchByName.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *BatchServiceMock) Update(ctx context.Context, batch *migration.Batch) error {
	if mock.UpdateFunc == nil {
		panic("BatchServiceMock.UpdateFunc: method is nil but BatchService.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch *migration.Batch
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, batch)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedBatchService.UpdateCalls())
func (mock *BatchServiceMock) UpdateCalls() []struct {
	Ctx   context.Context
	Batch *migration.Batch
} {
	var calls []struct {
		Ctx   context.Context
		Batch *migration.Batch
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateInstancesAssignedToBatch calls UpdateInstancesAssignedToBatchFunc.
func (mock *BatchServiceMock) UpdateInstancesAssignedToBatch(ctx context.Context, batch migration.Batch) error {
	if mock.UpdateInstancesAssignedToBatchFunc == nil {
		panic("BatchServiceMock.UpdateInstancesAssignedToBatchFunc: method is nil but BatchService.UpdateInstancesAssignedToBatch was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Batch migration.Batch
	}{
		Ctx:   ctx,
		Batch: batch,
	}
	mock.lockUpdateInstancesAssignedToBatch.Lock()
	mock.calls.UpdateInstancesAssignedToBatch = append(mock.calls.UpdateInstancesAssignedToBatch, callInfo)
	mock.lockUpdateInstancesAssignedToBatch.Unlock()
	return mock.UpdateInstancesAssignedToBatchFunc(ctx, batch)
}

// UpdateInstancesAssignedToBatchCalls gets all the calls that were made to UpdateInstancesAssignedToBatch.
// Check the length with:
//
//	len(mockedBatchService.UpdateInstancesAssignedToBatchCalls())
func (mock *BatchServiceMock) UpdateInstancesAssignedToBatchCalls() []struct {
	Ctx   context.Context
	Batch migration.Batch
} {
	var calls []struct {
		Ctx   context.Context
		Batch migration.Batch
	}
	mock.lockUpdateInstancesAssignedToBatch.RLock()
	calls = mock.calls.UpdateInstancesAssignedToBatch
	mock.lockUpdateInstancesAssignedToBatch.RUnlock()
	return calls
}

// UpdateStatusByName calls UpdateStatusByNameFunc.
func (mock *BatchServiceMock) UpdateStatusByName(ctx context.Context, name string, status api.BatchStatusType, statusMessage string) (*migration.Batch, error) {
	if mock.UpdateStatusByNameFunc == nil {
		panic("BatchServiceMock.UpdateStatusByNameFunc: method is nil but BatchService.UpdateStatusByName was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Name          string
		Status        api.BatchStatusType
		StatusMessage string
	}{
		Ctx:           ctx,
		Name:          name,
		Status:        status,
		StatusMessage: statusMessage,
	}
	mock.lockUpdateStatusByName.Lock()
	mock.calls.UpdateStatusByName = append(mock.calls.UpdateStatusByName, callInfo)
	mock.lockUpdateStatusByName.Unlock()
	return mock.UpdateStatusByNameFunc(ctx, name, status, statusMessage)
}

// UpdateStatusByNameCalls gets all the calls that were made to UpdateStatusByName.
// Check the length with:
//
//	len(mockedBatchService.UpdateStatusByNameCalls())
func (mock *BatchServiceMock) UpdateStatusByNameCalls() []struct {
	Ctx           context.Context
	Name          string
	Status        api.BatchStatusType
	StatusMessage string
} {
	var calls []struct {
		Ctx           context.Context
		Name          string
		Status        api.BatchStatusType
		StatusMessage string
	}
	mock.lockUpdateStatusByName.RLock()
	calls = mock.calls.UpdateStatusByName
	mock.lockUpdateStatusByName.RUnlock()
	return calls
}
